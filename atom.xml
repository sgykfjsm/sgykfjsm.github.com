<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sgykfjsm.github.com]]></title>
  <link href="http://sgykfjsm.github.io/atom.xml" rel="self"/>
  <link href="http://sgykfjsm.github.io/"/>
  <updated>2017-11-19T21:05:40+09:00</updated>
  <id>http://sgykfjsm.github.io/</id>
  <author>
    <name><![CDATA[sgykfjsm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DjangoをTango with Djangoで学ぶ - 3 -]]></title>
    <link href="http://sgykfjsm.github.io/blog/2017/11/19/models-in-basic-by-tango-with-django/"/>
    <updated>2017-11-19T20:15:21+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2017/11/19/models-in-basic-by-tango-with-django</id>
    <content type="html"><![CDATA[<p><a href="http://sgykfjsm.github.io/blog/2017/09/21/djangowotango-with-djangodexue-bu-2/">DjangoをTango with Djangoで学ぶ - 2 -</a>の続き。今回はモデルの基礎の話。</p>

<p>Webアプリケーションでデータを保存・参照・更新・削除という、いわゆるCRUD操作を行う場合はデータベースを利用するのが一般的で、特にリレーショナル・データベース（RDB）が利用される。RDBに対する操作はSQLを用いられる。これはまぁ一般常識。フルスタックWebアプリケーションの場合、SQLで操作するデータをModelとして定義し、それをORM(Object Relational Mapper)を使って、Modelとデータ(データベースの中にあるテーブル定義)と対応させる。Djangoでもこういった機能を提供しており、今回はこれを学習する。</p>

<!-- more -->


<p>さて、Tango with Djangoというテキストで開発するアプリケーションはRangoであるが、ここで改めてRangoの要件を簡単に説明とすると、以下の様になる。</p>

<ul>
<li>RangoはWebサイトのURLリンク集である。</li>
<li>WebサイトのURLはCategoryエンティティが持つ分類に関する情報と紐づく</li>
<li>WebサイトのURLで参照されるページの情報（タイトル、URLそして閲覧回数）を持つ。これをPageエンティティと呼ぶ。</li>
<li>PageエンティティはCateforyエンティティを参照する。RDB的に言うと、Categoryエンティティに外部キーを持つ。</li>
<li>CategoryエンティティとPageエンティティはhousesオブジェクトを介して1 to manyの関係を持つ。下図参照。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Category]-|---------&lt;houses&gt;-----|-&lt;[Page]</span></code></pre></td></tr></table></div></figure>


<p>さて、早速Modelに関するコーディングを始めていきたいところだが、その前にDjangoアプリケーションにおけるデータベースの設定を確認する。</p>

<p>通常、Djangoアプリケーションをセットアップした時点で以下のような設定が<code>settings.py</code>に含まれているはず。</p>

<p>settings.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Database</span>
</span><span class='line'><span class="c"># https://docs.djangoproject.com/en/1.11/ref/settings/#databases</span>
</span><span class='line'>
</span><span class='line'><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s">&#39;django.db.backends.sqlite3&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;NAME&#39;</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&#39;db.sqlite3&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>デフォルト設定だとSQlite3を利用することになっているが、もちろんMySQLなど他のデータベースエンジンを利用することができる。その場合の設定の詳細は<a href="https://docs.djangoproject.com/en/1.11/ref/databases/">公式ドキュメントの&#8221;Databases&#8221;</a>を参照すること。</p>

<p>では、これからモデルの定義を行なう。これまでと同様にアプリケーション固有の設定は各アプリケーションディレクトリの下で行う。今回の場合だと<code>rango/model.py</code>が対象だ。</p>

<p>rango/model.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Category</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Page</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">category</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Category</span><span class="p">)</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">URLField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">views</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">title</span>
</span></code></pre></td></tr></table></div></figure>


<p>上のコードを見れば何となくそれぞれの意味がわかると思う。<code>class Category</code>はCategoryテーブルを表現している。もう１つの<code>class Page</code>はPageテーブルを表現している。</p>

<p>ここで最も気をつけなければならないことは、各クラスともに<code>models.Model</code>を継承していることだ。これは忘れてはならない。</p>

<p><code>class Category</code>には１つのフィールドが定義されており、それは見ての通りChar型で最大データ長は128バイトでユニーク制約を持つ。これらはメソッド名や引数名を見たら分かると思う。<code>class Page</code>についても同様だ。ここでは利用されていないが、デフォルトを<code>default=</code>で指定することもできるし、カラムがnullableかどうかも指定できる。</p>

<p>テーブル間の関係は<code>one-to-one</code>, <code>one-to-many</code>そして<code>many-to-many</code>の３つに大別できるが、<code>models.ForeignKey</code>によって、<code>one-to-many</code>を表現している。この場合、PageテーブルがCategoryテーブルを参照しているので、PageテーブルがManyで、CategoryテーブルがOneとなる。なお、<code>one-to-one</code>は<code>OneToOneField</code>, <code>many-to-many</code>は<code>ManyToManyField</code>という見たままのネーミングとなっている。</p>

<p>それぞれのクラスには<code>__str__</code>が定義されている。このメソッドは各クラスのオブジェクトを文字列として扱うときに利用されるメソッドだ。これを定義しないと継承元の<code>__str__</code>が呼び出されて、<code>&lt;Category:Category object&gt;</code>というよく分からない文字列が出力されるので、モデルを定義する際には<code>__str__</code>も定義することがベストプラクティスの１つとなる。</p>

<p>最後に注意する点として、各クラスには暗黙的に<code>id</code>カラムが設定され、そのカラムは<code>integer NOT NULL PRIMARY KEY AUTOINCREMENT</code>という設定がされていることだ。</p>

<p>とりあえずはテーブルの定義が完了したので、ここでDjangoのマイグレーションツールを試してみる。</p>

<p>まずはデフォルトで設定されているテーブル類のマイグレーションを行なう。「デフォルトで設定されているテーブル」とは<code>settings.py</code>の中にある<code>INSTALLED_APPS</code>だ。</p>

<p>なお、久しぶりのDjangoコマンドの実行なので、virtualenvのactivateを忘れないようにしよう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> python manage.py migrate
</span><span class='line'><span class="go">Operations to perform:</span>
</span><span class='line'><span class="go">  Apply all migrations: admin, auth, contenttypes, sessions</span>
</span><span class='line'><span class="go">Running migrations:</span>
</span><span class='line'><span class="go">  Applying contenttypes.0001_initial... OK</span>
</span><span class='line'><span class="go">  Applying auth.0001_initial... OK</span>
</span><span class='line'><span class="go">  Applying admin.0001_initial... OK</span>
</span><span class='line'><span class="go">  Applying admin.0002_logentry_remove_auto_add... OK</span>
</span><span class='line'><span class="go">  Applying contenttypes.0002_remove_content_type_name... OK</span>
</span><span class='line'><span class="go">  Applying auth.0002_alter_permission_name_max_length... OK</span>
</span><span class='line'><span class="go">  Applying auth.0003_alter_user_email_max_length... OK</span>
</span><span class='line'><span class="go">  Applying auth.0004_alter_user_username_opts... OK</span>
</span><span class='line'><span class="go">  Applying auth.0005_alter_user_last_login_null... OK</span>
</span><span class='line'><span class="go">  Applying auth.0006_require_contenttypes_0002... OK</span>
</span><span class='line'><span class="go">  Applying auth.0007_alter_validators_add_error_messages... OK</span>
</span><span class='line'><span class="go">  Applying auth.0008_alter_user_username_max_length... OK</span>
</span><span class='line'><span class="go">  Applying sessions.0001_initial... OK</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでDjangoにとっての基本的なテーブルが出来た。次にテーブルを操作するためのスーパーユーザー（要はrootユーザーみたいなもの）を用意する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> python manage.py createsuperuser
</span><span class='line'><span class="go">Username (leave blank to use &#39;you&#39;):</span>
</span><span class='line'><span class="go">Email address:</span>
</span><span class='line'><span class="go">Password:</span>
</span><span class='line'><span class="go">Password (again):</span>
</span><span class='line'><span class="go">Superuser created successfully.</span>
</span></code></pre></td></tr></table></div></figure>


<p>つぎに、アプリケーション固有のテーブルのマイグレーション、つまり先ほど定義した<code>rango/models.py</code>を元にマイグレーションを行なう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> python manage.py makemigrations rango
</span><span class='line'><span class="go">Migrations for &#39;rango&#39;:</span>
</span><span class='line'><span class="go">  rango/migrations/0001_initial.py</span>
</span><span class='line'><span class="go">    - Create model Category</span>
</span><span class='line'><span class="go">    - Create model Page</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成されたファイルの中身を見ても良いが、より確実な確認として、生成したファイルから更に生成されるSQLを確認してみよう</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> python manage.py sqlmigrate rango 0001
</span><span class='line'><span class="go">BEGIN;</span>
</span><span class='line'><span class="go">--</span>
</span><span class='line'><span class="go">-- Create model Category</span>
</span><span class='line'><span class="go">--</span>
</span><span class='line'><span class="go">CREATE TABLE &quot;rango_category&quot; (&quot;id&quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT, &quot;name&quot; varchar(128) NOT NULL UNIQUE);</span>
</span><span class='line'><span class="go">--</span>
</span><span class='line'><span class="go">-- Create model Page</span>
</span><span class='line'><span class="go">--</span>
</span><span class='line'><span class="go">CREATE TABLE &quot;rango_page&quot; (&quot;id&quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT, &quot;title&quot; varchar(128) NOT NULL, &quot;url&quot; varchar(200) NOT NULL, &quot;views&quot; integer NOT NULL, &quot;category_id&quot; integer NOT NULL REFERENCES &quot;rango_category&quot; (&quot;id&quot;));</span>
</span><span class='line'><span class="go">CREATE INDEX &quot;rango_page_category_id_0872388a&quot; ON &quot;rango_page&quot; (&quot;category_id&quot;);</span>
</span><span class='line'><span class="go">COMMIT;</span>
</span></code></pre></td></tr></table></div></figure>


<p>改行されていないので少し見にくいが、期待通りのSQLが生成されていることがわかると思う。</p>

<p><code>makemigrations</code>で生成されたのは<code>migrate</code>で利用されるパーツのようなもの。このパーツをDjangoアプリケーションとして組み込むためにはもう1度<code>migrate</code>を実行すれば良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> python manage.py migrate
</span><span class='line'><span class="go">Operations to perform:</span>
</span><span class='line'><span class="go">  Apply all migrations: admin, auth, contenttypes, rango, sessions</span>
</span><span class='line'><span class="go">Running migrations:</span>
</span><span class='line'><span class="go">  Applying rango.0001_initial... OK</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでrango固有のテーブルがDjangoアプリケーションに取り込まれた。今回はSQLiteなのでブラウザとして <a href="http://sqlitebrowser.org/">SQLite Database Browser</a> を使うと、取り込まれている様子がわかると思う。</p>

<p>DjangoはShell機能を提供している。といっても実際はただのPythonのREPLではあるけど。起動方法はいつものようにmanage.pyを使う。以下の通り。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> python manage.py shell
</span><span class='line'><span class="go">Python 3.5.3 (default, Sep  4 2017, 22:33:15)</span>
</span><span class='line'><span class="go">[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)] on darwin</span>
</span><span class='line'><span class="go">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span>
</span><span class='line'><span class="go">(InteractiveConsole)</span>
</span><span class='line'><span class="gp">&gt;</span>&gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>この起動によってプロジェクトの諸々の設定も取り込まれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> python manage.py shell
</span><span class='line'><span class="go">Python 3.5.3 (default, Sep  4 2017, 22:33:15)</span>
</span><span class='line'><span class="go">[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)] on darwin</span>
</span><span class='line'><span class="go">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span>
</span><span class='line'><span class="go">(InteractiveConsole)</span>
</span><span class='line'><span class="gp">&gt;</span>&gt;&gt; from rango.models import Category
</span><span class='line'><span class="gp">&gt;</span>&gt;&gt; print<span class="o">(</span>Category.objects.all<span class="o">())</span>
</span><span class='line'><span class="go">&lt;QuerySet []&gt;</span>
</span><span class='line'><span class="gp">&gt;</span>&gt;&gt; <span class="nv">c</span> <span class="o">=</span> Category<span class="o">(</span><span class="nv">name</span><span class="o">=</span><span class="s2">&quot;Test&quot;</span><span class="o">)</span>
</span><span class='line'><span class="gp">&gt;</span>&gt;&gt; c.save<span class="o">()</span>
</span><span class='line'><span class="gp">&gt;</span>&gt;&gt; print<span class="o">(</span>Category.objects.all<span class="o">())</span>
</span><span class='line'><span class="go">&lt;QuerySet [&lt;Category: Test&gt;]&gt;</span>
</span><span class='line'><span class="gp">&gt;</span>&gt;&gt; quit<span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>上で紹介したDB Browserを使うと、ちゃんとDBに&#8221;Test&#8221;が保存されていることを確認することができる。</p>

<p>Djangoの目を引く特徴の1つとしてWebの管理画面をデフォルトで提供していることが挙げられる。これを使って、DBの中のデータを見たり編集することができる。ここで改めてプロジェクトディレクトリにある<code>settings.py</code>と<code>urls.py</code>を見ると、以下があることに気づくだろう。</p>

<p>settings.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="s">&#39;django.contrib.admin&#39;</span><span class="p">,</span>   <span class="c"># &lt;- これ</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="s">&#39;rango&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>urls.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">),</span>  <span class="c"># &lt;- これ</span>
</span><span class='line'><span class="p">]</span> <span class="o">+</span> <span class="n">static</span><span class="p">(</span><span class="n">settings</span><span class="o">.</span><span class="n">MEDIA_URL</span><span class="p">,</span> <span class="n">document_root</span><span class="o">=</span><span class="n">settings</span><span class="o">.</span><span class="n">MEDIA_ROOT</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記2つの設定があることを確認したら<code>python manage.py runserver</code>でアプリケーションを起動してみよう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> python manage.py runserver
</span></code></pre></td></tr></table></div></figure>


<p>早速ブラウザで<a href="http://localhost:8000/admin/">http://localhost:8000/admin/</a> にアクセスするとログイン画面が出てくるので、<code>python manage.py createsuperuser</code>で作成したユーザでログインすれば良い。もしどんなユーザを作成したか忘れてしまったのならば、改めて再作成すれば良い。</p>

<p>ログイン後、表示された画面には<em>AUTHENTICATION AND AUTHORIZATION</em>というタイトルの項目があるが、肝心のrangoアプリケーションのテーブルが存在しないことに気づくだろう。これはDjangoのAdmin機能がrangoアプリケーションのmodelsの存在を知らないからだ。なので、教えてあげる必要がある。<code>rango/admin.py</code>に以下のように編集する。</p>

<p>rango/admin.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- a/rango/admin.py</span>
</span><span class='line'><span class="gi">+++ b/rango/admin.py</span>
</span><span class='line'><span class="gu">@@ -1,3 +1,5 @@</span>
</span><span class='line'> from django.contrib import admin
</span><span class='line'><span class="gi">+from rango.models import Category, Page</span>
</span><span class='line'>
</span><span class='line'><span class="gd">-# Register your models here.</span>
</span><span class='line'><span class="gi">+admin.site.register(Category)</span>
</span><span class='line'><span class="gi">+admin.site.register(Page)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のとおりに編集してWebの画面をリロードすると、<em>RANGO</em>という項目が追加されるはず。&#8221;Categorys&#8221;をクリックすると、先ほどShell機能を使って追加した&#8221;Test&#8221;が存在することがわかる。このような方法でもDBを確認することができるし、おそらくDjangoの開発中はこちらを利用することが多いだろう。</p>

<p>ところで、Webの管理画面では&#8221;Category&#8221;が&#8221;Categorys&#8221;となっていることに気づいただろうか？これは別にDjangoがtypoしているわけではなくて、モデルのメタデータの<code>verbose_name_plural</code>のデフォルト設定によるもの。気になるようであれば、自分で修正することができる。以下の様に。</p>

<p>rango/models.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff | cat -
</span><span class='line'><span class="gh">diff --git a/rango/models.py b/rango/models.py</span>
</span><span class='line'><span class="gh">index c65a919..b9b694d 100644</span>
</span><span class='line'><span class="gd">--- a/rango/models.py</span>
</span><span class='line'><span class="gi">+++ b/rango/models.py</span>
</span><span class='line'><span class="gu">@@ -4,6 +4,9 @@ from django.db import models</span>
</span><span class='line'> class Category(models.Model):
</span><span class='line'>     name = models.CharField(max_length=128, unique=True)
</span><span class='line'>
</span><span class='line'><span class="gi">+    class Meta:</span>
</span><span class='line'><span class="gi">+        verbose_name_plural = &#39;Categories&#39;</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'>     def __str__(self):
</span><span class='line'>         return self.name
</span></code></pre></td></tr></table></div></figure>


<p>編集後は再度画面をリロードして確認しておくこと。</p>

<p>ここまでの作業でモデルが用意できた。実際の開発では、このモデルにデータを入れて動作確認やテストをしたりするわけだけど、そのためのテストデータを毎回用意するのは正直ダルい。ので、一般的にはpopulation scriptと呼ばれるダミーデータ生成のためのスクリプトを用意する。ダミーデータとは言え、ランダムな文字列を適当に入れても、あまり役に立たない。ここでは、それっぽいデータを用意してDBに格納するスクリプトを書く。<code>populate_rango.py</code>という名前でプロジェクトディレクトリの直下にファイルを用意しよう。こんな感じ。</p>

<p>populate_rango.py</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s">&#39;DJANGO_SETTINGS_MODULE&#39;</span><span class="p">,</span> <span class="s">&#39;tango_with_django_project.settings&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">django</span>
</span><span class='line'><span class="n">django</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">rango.models</span> <span class="kn">import</span> <span class="n">Category</span><span class="p">,</span> <span class="n">Page</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">populate</span><span class="p">():</span>
</span><span class='line'>    <span class="n">python_pages</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;title&quot;</span><span class="p">:</span> <span class="s">&quot;Official Python Tutorial&quot;</span><span class="p">,</span>  <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="s">&quot;http://docs.python.org/2/tutorial&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;title&quot;</span><span class="p">:</span> <span class="s">&quot;How to Think like a Computer Scientis&quot;</span><span class="p">,</span>  <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="s">&quot;http://www.greenteapress.com/thinkpython&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;title&quot;</span><span class="p">:</span> <span class="s">&quot;Learn Python in 10 Minutes&quot;</span><span class="p">,</span>  <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="s">&quot;http://www.korokithakis.net/tutorials/python&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">django_pages</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;title&quot;</span><span class="p">:</span> <span class="s">&quot;Official Django Tutorial&quot;</span><span class="p">,</span> <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="s">&quot;https://docs.djangoproject.com/en/1.9/intro/tutorial01/&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;title&quot;</span><span class="p">:</span> <span class="s">&quot;Django Rocks&quot;</span><span class="p">,</span> <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="s">&quot;http://djangorocks.com&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;title&quot;</span><span class="p">:</span> <span class="s">&quot;How to Tango with Django&quot;</span><span class="p">,</span> <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="s">&quot;http://www.tangowithdjango.com/&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">other_pages</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;title&quot;</span><span class="p">:</span> <span class="s">&quot;Bottle&quot;</span><span class="p">,</span> <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="s">&quot;https://bottlepy.org/docs/dev/&quot;</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s">&quot;title&quot;</span><span class="p">:</span> <span class="s">&quot;Flask&quot;</span><span class="p">,</span> <span class="s">&quot;url&quot;</span><span class="p">:</span> <span class="s">&quot;http://flask.pocoo.org/&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cats</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;Python&quot;</span><span class="p">:</span> <span class="p">{</span><span class="s">&quot;pages&quot;</span><span class="p">:</span> <span class="n">python_pages</span><span class="p">},</span>
</span><span class='line'>        <span class="s">&quot;Django&quot;</span><span class="p">:</span> <span class="p">{</span><span class="s">&quot;pages&quot;</span><span class="p">:</span> <span class="n">django_pages</span><span class="p">},</span>
</span><span class='line'>        <span class="s">&quot;Other Frameworks&quot;</span><span class="p">:</span> <span class="p">{</span><span class="s">&quot;pages&quot;</span><span class="p">:</span> <span class="n">other_pages</span><span class="p">},</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">cat</span><span class="p">,</span> <span class="n">cat_data</span> <span class="ow">in</span> <span class="n">cats</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="n">add_cat</span><span class="p">(</span><span class="n">cat</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">cat_data</span><span class="p">[</span><span class="s">&quot;pages&quot;</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">add_page</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">p</span><span class="p">[</span><span class="s">&quot;title&quot;</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="s">&quot;url&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">Category</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">():</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">Page</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">category</span><span class="o">=</span><span class="n">c</span><span class="p">):</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;- {0} - {1}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="nb">str</span><span class="p">(</span><span class="n">p</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">add_page</span><span class="p">(</span><span class="n">cat</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">views</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">Page</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get_or_create</span><span class="p">(</span><span class="n">category</span><span class="o">=</span><span class="n">cat</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="n">views</span> <span class="o">=</span> <span class="n">views</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">add_cat</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="n">Category</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get_or_create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">c</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Starting Rango population script...&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">populate</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>このスクリプトを簡単に解説する。まず、一番下の<code>if __name__ == '__main__':</code>は「ファイルを直接実行したかどうか」を判定していて、直接実行した場合には<code>"Starting Rango population script..."</code>をターミナルに表示して、<code>populate()</code>という関数を実行する。<code>populate()</code>のほとんどはテストデータの定義だけど、後半の数行は<code>foo</code>ループを実行している。最初のループでは、Categoryテーブルにデータを入れて、それからPageテーブルにデータを追加している。次のループはちゃんとデータが格納されているかどうかを確認するために、テーブルからデータを取り出してターミナルに表示している。それだけ。</p>

<p>実際にpopulate scriptを実行してから<code>python manage.py runserver</code>を実行、ブラウザで<a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a> にアクセスして各テーブルのページを開くと、追加したデータを確認できる。</p>

<a name="L..........................."></a>
<h2>ここまでのおさらい</h2>

<p>DjangoにおけるModelsとはデータモデル、より直接的に言うと、データの定義や操作のこととなる。Djangoでは以下のような作業順序で行なうことが一般的だ。</p>

<ol>
<li>自分のDjangoアプリケーションの中に<code>models.py</code>を用意して、その中にテーブル定義をモデルクラスとして記述する。</li>
<li><code>admin.py</code>の中に定義したモデルクラスを登録する。</li>
<li><code>python manage.py makemigrations ${app_name}</code>を実行してマイグレーションの準備を行なう。</li>
<li><code>python manage.py migrate</code>を実行してDBに対するマイグレーションを行なう。</li>
<li>モデルの動作確認やテストのためにpopulation script（ダミーデータの生成スクリプト）を用意する。</li>
</ol>


<p>色々な理由でDBを削除して作り直すことが発生すると思うけど、その場合は<code>python manage.py migrate</code>を実行すればDBが新たに作成される。その際には、ちゃんとマイグレーションのスクリプト（アプリケーションのディレクトリにある<code>migrations</code>ディレクトリの中のスクリプト）がちゃんと存在していることを確認しておくこと。また、管理者用アカウントは<code>`python manage.py createsuperuser</code>を実行して作成する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[モニタリングについて思うこと]]></title>
    <link href="http://sgykfjsm.github.io/blog/2017/10/11/monitaringunituitesi-ukoto/"/>
    <updated>2017-10-11T21:25:29+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2017/10/11/monitaringunituitesi-ukoto</id>
    <content type="html"><![CDATA[<p>色々思うところがあって、こんな文章を書いたけど、途中で考えが整理できなくなった。でもまぁ、脳内の考えを一旦吐き出しておいて、いつか気が向いたら、改めて書き直そうと思う。</p>

<p>最近、SRE(Site Reliablity Engineering)だとかなんとかでモニタリングが流行っている気がする。流行っているというか、今までもモニタリングをやっていたんだけど&#8221;SRE&#8221;という言葉が流行って行く中で、モニタリングの責任が明らかになって、より一般的になったというべきか。また、ポジションとしてのSRE(Site Reliablity Engineer)が確立し、職責として「だれがモニタリングを行なうべきか」ということも明確になったし、DataDogやMackerelなどのようにモニタリングがビジネスとして成立するようになってきたという背景もモニタリングの重要性を高めているのだと思う。あとはGrafanaなんかが提供するダッシュボードがカッコイイというのもあるかな。</p>

<!-- more -->


<p>で、じゃあどういう風にモニタリングしているのかというと、DataDogやMackerelのようなモニタリング・プラットフォームを利用している場合はちょっと違うかもしれないけど、自分たちで収集するメトリクスを決めて、メトリクスを収集するスクリプトを書き、アラートを設定して、というのが一般的だろう。Prometheusのような場合はコミュニティが提供するExporterを使うこともあるだろう。</p>

<p>モニタリングのアーキテクチャ（Pull or Pushなど）に関してもいくつか思うところはあるのだけれども、個人的にすごくモヤモヤしているのが、「とりあえず集めておく」という姿勢だ。もちろん、メトリクスを集めること自体は悪くない。データが多ければ、その分だけ検証できる内容や深みを増すことができる。しかし、一方でそれに比例してアラートも増える。ある程度の規模の会社やチームだと、こういったメトリクスやアラートは共通化されていき、次第にそれが社内のモニタリング基盤となる。</p>

<p>こういったシナリオは一見すると良さそうに見える。しかし、本当にそうだろうか。集めたメトリクスはサービスを超えて本当に共有できるだろうか。例えばCPUが90%を超えたとして、次に見るべきものは何か。ディスク使用量が85%を超えているという事実は大きなディスクを持つストレージサービスと比較的ディスクが少ないAPIサービスとで同じ意味を持つだろうか。また、同種のサービスであっても、稼働環境がテスト環境かプロダクション環境かによってメトリクスが示唆するものは異なるはずだ。こういったメトリクスの意味や重要性の違いは、サービスやアプリケーション、稼働環境によって異なるはずだ。そしてモニタリングの利用者は膨大なアラートの中から必要なものだけを選択していく。アラートなどによって省みられることがないメトリクスは存在しないことと同じだ。そのため、次第に多くのメトリクスはゴミデータとしてただストレージに蓄積されていく。メトリクスを収集するスクリプトやエージェントは貴重なリソースを消費しているにもかかわらず。</p>

<p>自分は現在、いわゆる&#8221;SRE&#8221;チームと分類される組織に所属している(&ldquo;SRE&#8221;を生業にしていると明言できないのは、SREが出来ていないからだという自覚があるからだ)。だから、ここで述べる視点はサービス開発者ではなく、モニタリングを提供する側の視点となる。また、ここで問題視したいのは「とりあえず集めた」メトリクスに何の価値があるのか、ということだ。私自身の考えとしては以下の通りだ。</p>

<ul>
<li>メトリクスはアクションを起こすものでなければならない</li>
<li>メトリクスは示唆をあたえるものでなければならない</li>
<li>上記を1つも満たさないメトリクスは価値がなく、貴重なサーバーリソースを浪費するコストとなる</li>
</ul>


<a name="L................................."></a>
<h2>ここで問題としたいこと</h2>

<p>モニタリングによって集められているデータは次の通り大きく２つに分けることができるだろう。１つは数値データだ。場合によっては数字で表現されたアプリケーションのバージョン情報ということあるだろうが、異常値あるいは閾値を設定しなければ評価できないことを考えると、数字で表現されたバージョン情報は数値データとみなすことが出来る。もう１つは&#8221;INFO&#8221;, &ldquo;WARN&rdquo;, &ldquo;FATAL&#8221;といったような意味をもつ情報だ。この場合、情報自体が意味をもっているため、価値云々を議論する余地は無いものと考える。もちろん、付与された情報のレベルが妥当かどうかという議論は発生するが、それはここでは問題としない。なぜならば、情報のレベルはサービス開発側で予め決められているおり、すでに情報としての価値が決定されているからだ。よって、今回の議論の対象にはしない。ここで議論したいのは数値データであるメトリクスであり、それの運用についてだ。</p>

<a name="L...................................."></a>
<h2>メトリクスを運用するとは</h2>

<p>先にも少し触れたが、メトリクスは必ずしもアラートのためだけではない。アプリケーションやサーバーの稼働状況を数値で表現し、期待通りの動作をしているかというパフォーマンスの検証に用いることもできる。この場合、どのメトリクスを見ることで期待通りの動作をしていると言えるかは一概にいえるものではないと思う。例えばWebサーバーならば処理したリクエストの数だったり、リクエストを受け取ってからレスポンスを返すまでのレイテンシかもしれない。ストレージサービスであれば、如何にディスクIOが少ないかということになるかもしれない。このように、適切な指標の決定はサービス開発者あるいはサービス開発のチームに所属にしていなければ決められないはずだ。これらを踏まえると、「メトリクスを運用する」とは「どのようにメトリクスを評価するか」ということになる。</p>

<a name="L...................................."></a>
<h2>メトリクスを評価するとは</h2>

<p>では、メトリクスを評価するとは具体的にどのようなことだろうか。これもまた繰り返しになるが、結局のところ、サービスやアプリケーション、そして環境によって異なる。しかしながら、それでも共通する点を見出すとするならば、メトリクスの値のどこからどこまでが異常で、どこが異常と正常の閾値になるのかを決定しなければならないということだ。「評価」とはこのような決定を意味している。メトリクスの種類や収集した環境やサービスの違いにかかわらず、メトリクスの閾値は必ず設定されなければならない。</p>

<p>ただし、共通しているのはここまでで、ここから先、つまり決定的な閾値はやはりメトリクスだけで決まるものではない。仮に過去1ヶ月間のCPUが10%から20%で推移していたからといって、これから1ヶ月のうちにCPU使用率が30%になったら、それは異常事態だと言えるだろうか。単純な統計に基づくなら異常と言えるかもしれない。しかし現実にはそう判断できないはずだ。なぜならば、ユーザーの増加、アプリケーションに実装したアルゴリズムの変化など、「正常(起きてしかるべき)な変化」とみなす要因が常に存在しうるからだ。もちろん正常な変化だからといって、そのままにしておいて良いというわけではない。</p>

<a name="L......................................................"></a>
<h2>モニタリングの提供者ができることは？</h2>

<p>こうなってくると、メトリクスの評価はサービス開発者の専有事項となりそうだ。確かに多くの場合はそうかもしれない。サービスに携わることなくサービスを評価することは出来ないし、ましてや、そのサービスのアプリケーションが使用するリソースの多寡の良し悪しを判断することなど出来るはずもない。このような前提を基にすると、SREはどのようにモニタリングに関わることができるのだろうか？単にサービス開発者のモニタリング設定作業を代行するだけ？オンコールを受けてトラブルシューティング？そうではないはずだ。SREが文字通りにWebサイトやサービスの安定化に資するエンジニアであるならば、モニタリングにおいては主導的にならなければならないし、それは作業代行者であってはならないはず。</p>

<p>モニタリングを提供する側はサービス開発者に対してメトリクスを評価するための示唆を与えることができるはずだ。例えば&hellip;(ここから先は考えがまとまらなかった)</p>

<p>以下はメモランダム。あとで推敲して書き直す</p>

<ul>
<li>メトリクスはむやみに収集するのではなく、目的をもって収集すべき。</li>
<li>メトリクスの目的はかならず共有されていなければならない。</li>
<li>メトリクスはアクションを導き出すべき</li>
<li>メトリクスが導出するアクションを具体的な手順に落とし込んだ文書があるべき</li>
<li>モニタリングの提供者はメトリクスの評価者に対して示唆を与える表現（例えばダッシュボードだったり、関連情報の添付、わかりやすいアラートメールのぶん面など）を提供するべき</li>
<li>モニタリングにはコストが発生していることを自覚するべき</li>
</ul>


<p>これもメモランダム。なんとなくだけど、SREっていうムーブメントは、かつては「フルスタックエンジニア」と称する何かをもてはやしたり、「ビッグデータ活用」みたいな「とりあえずウチは大規模に何かやってます！」みたいな中身のない何かになってやしないかなという思いがある。もちろんSRE本がテキストとして存在しているので、これらほど適当なものではないけど、カンバンを変えただけでやってることは今まで通りだったり、逆にモニタリングをそれっぽいアプリケーションでやってるからSREと言ったり…あるいはタチの悪いところだと、リクルーティングのためだけにSREと自称しているところもありそうな気がする。</p>

<p>SREは特定の職能や役割を表現するものではなくて、求められる技術や経験、知識はとても幅広い。だから、個人がSREとなるというよりかは、組織がSREとなるほうが実態としては自然なのかもしれない。それはかつてDevOpsという言葉で表現していたような、ただOpsだけをやるエンジニアだけじゃなくてコードで問題を解決するというDevを取り込むようなチームづくりと基本的な考え方は同じかもしれない。縦割りの組織じゃなくて、横方向に人材を広げて組織として役割の柔軟性や弾力性を持たせる。そうすることでサービス開発者の足元を確かにし、成功への道筋を確かにしていくような役割。SREはスーパーエンジニアの代名詞などではなくて、そういった弾力性に富んだ組織のことを意味するのではないかなぁと思うけど、それって別にSREって表現しなくても今までにも必要とされたし、成功している組織には当たり前にいるんだろうな。</p>

<p>とりとめがないので、このへんで。もう少し考えを整理する必要がある。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goの正規表現とReplacerを比較した]]></title>
    <link href="http://sgykfjsm.github.io/blog/2017/09/26/gofalsezheng-gui-biao-xian-toreplacerwobi-jiao-sita/"/>
    <updated>2017-09-26T00:42:43+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2017/09/26/gofalsezheng-gui-biao-xian-toreplacerwobi-jiao-sita</id>
    <content type="html"><![CDATA[<p>なんとなく色んな人のISUCON6の記事を読んでたら、Goの正規表現が遅くて苦労した、という話を多く見受けられた。そもそも一般的に正規表現自体が遅いとされており、だからこそ各言語では正規表現エンジンが色々実装されてたりするんだけど、Goではあまりそういう話を聞かない。自分が知らないだけでどこかで話題になっているかもしれないけど。</p>

<p>で、<a href="http://dsas.blog.klab.org/archives/2016-09-20/isucon5q.html">KLabの人の記事</a>では、</p>

<blockquote><p>まずGoの正規表現は遅いので strings.Replacer を使ってキーワードからリンクへの変換をします。</p></blockquote>

<p>とあり、なるほどGoで単語の置き換えをするなら<code>strings.Replacer</code>が早いのか、ということを知った。じゃあ、どのくらい早いんですかっていうのを確認してみた。</p>

<p>結論から言うと、<code>strings.Replacer</code>のほうが圧倒的に早い。</p>

<!-- more -->


<p>比較対象に用いた関数は以下のような感じ。ほぼ等価だとは思うけど、もしかしたら不公平な部分があるかもしれない。</p>

<p>regexp_vs_replacer.go</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">regexp_vs_replacer</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;regexp&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">DoRegexp</span><span class="p">(</span><span class="nx">re</span> <span class="o">*</span><span class="nx">regexp</span><span class="p">.</span><span class="nx">Regexp</span><span class="p">,</span> <span class="nx">contents</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">re</span><span class="p">.</span><span class="nx">ReplaceAllStringFunc</span><span class="p">(</span><span class="nx">contents</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">ToUpper</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">DoReplacer</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">strings</span><span class="p">.</span><span class="nx">Replacer</span><span class="p">,</span> <span class="nx">contents</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Replace</span><span class="p">(</span><span class="nx">contents</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ベンチマークに使ったテストコードは以下。なお、読み込んだテキストファイルは <a href="http://www.blindtextgenerator.com/lorem-ipsum">http://www.blindtextgenerator.com/lorem-ipsum</a> で作成したダミーテキスト。ちなみに中身には<a href="http://www.aozora.gr.jp/cards/001235/card49866.html">カフカの「変身」</a>の原文だ。4000語でファイルサイズはおよそ21KB。</p>

<p>regexp_vs_replacer_test.go</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">regexp_vs_replacer</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;regexp&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'>  <span class="s">&quot;testing&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">r</span>        <span class="o">*</span><span class="nx">strings</span><span class="p">.</span><span class="nx">Replacer</span>
</span><span class='line'>  <span class="nx">re</span>       <span class="o">*</span><span class="nx">regexp</span><span class="p">.</span><span class="nx">Regexp</span>
</span><span class='line'>  <span class="nx">contents</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">keywords</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;One&quot;</span><span class="p">,</span> <span class="s">&quot;morning&quot;</span><span class="p">,</span> <span class="s">&quot;when&quot;</span><span class="p">,</span> <span class="s">&quot;Gregor&quot;</span><span class="p">,</span> <span class="s">&quot;Samsa&quot;</span><span class="p">,</span> <span class="s">&quot;woke&quot;</span><span class="p">,</span> <span class="s">&quot;from&quot;</span><span class="p">,</span> <span class="s">&quot;troubled&quot;</span><span class="p">,</span> <span class="s">&quot;dreams&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">pairList</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">keywords</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_contents</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadFile</span><span class="p">(</span><span class="s">&quot;kafka.txt&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">contents</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">_contents</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">re</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nx">MustCompile</span><span class="p">(</span><span class="s">`(`</span> <span class="o">+</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Join</span><span class="p">(</span><span class="nx">keywords</span><span class="p">,</span> <span class="s">&quot;|&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s">`)`</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">keyword</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">keywords</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">pairList</span><span class="p">[</span><span class="nx">i</span><span class="o">*</span><span class="mi">2</span><span class="p">],</span> <span class="nx">pairList</span><span class="p">[</span><span class="nx">i</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">keyword</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">ToUpper</span><span class="p">(</span><span class="nx">keyword</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">r</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">NewReplacer</span><span class="p">(</span><span class="nx">pairList</span><span class="o">...</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkDoRegexp</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">b</span><span class="p">.</span><span class="nx">ResetTimer</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">DoRegexp</span><span class="p">(</span><span class="nx">re</span><span class="p">,</span> <span class="nx">contents</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">BenchmarkDoReplacer</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">b</span><span class="p">.</span><span class="nx">ResetTimer</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">DoReplacer</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">contents</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TestDoRegexp_Equal_To_DoReplacer</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">DoRegexp</span><span class="p">(</span><span class="nx">re</span><span class="p">,</span> <span class="nx">contents</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">DoReplacer</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="nx">contents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">t</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="s">&quot;DoRegexp is not equal to DoReplacer&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、ベンチマークの結果は以下の通り。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="k">for</span> i in <span class="k">$(</span>seq <span class="m">1</span> 3<span class="k">)</span><span class="p">;</span> <span class="k">do</span> go <span class="nb">test</span> -benchtime<span class="o">=</span>10s -bench<span class="o">=</span>. -benchmem<span class="p">;</span> <span class="nb">echo</span> <span class="p">;</span> <span class="k">done</span>
</span><span class='line'><span class="go">goos: darwin</span>
</span><span class='line'><span class="go">goarch: amd64</span>
</span><span class='line'><span class="go">pkg: github.com/sgykfjsm/sample-program-by-go/regexp_vs_replacer</span>
</span><span class='line'><span class="go">BenchmarkDoRegexp-4                 2000           7200480 ns/op          130768 B/op        201 allocs/op</span>
</span><span class='line'><span class="go">BenchmarkDoReplacer-4             100000            230524 ns/op           43552 B/op          3 allocs/op</span>
</span><span class='line'><span class="go">PASS</span>
</span><span class='line'><span class="go">ok      github.com/sgykfjsm/sample-program-by-go/regexp_vs_replacer     40.552s</span>
</span><span class='line'>
</span><span class='line'><span class="go">goos: darwin</span>
</span><span class='line'><span class="go">goarch: amd64</span>
</span><span class='line'><span class="go">pkg: github.com/sgykfjsm/sample-program-by-go/regexp_vs_replacer</span>
</span><span class='line'><span class="go">BenchmarkDoRegexp-4                 2000           6803820 ns/op          130768 B/op        201 allocs/op</span>
</span><span class='line'><span class="go">BenchmarkDoReplacer-4             100000            240129 ns/op           43552 B/op          3 allocs/op</span>
</span><span class='line'><span class="go">PASS</span>
</span><span class='line'><span class="go">ok      github.com/sgykfjsm/sample-program-by-go/regexp_vs_replacer     40.670s</span>
</span><span class='line'>
</span><span class='line'><span class="go">goos: darwin</span>
</span><span class='line'><span class="go">goarch: amd64</span>
</span><span class='line'><span class="go">pkg: github.com/sgykfjsm/sample-program-by-go/regexp_vs_replacer</span>
</span><span class='line'><span class="go">BenchmarkDoRegexp-4                 2000           7402882 ns/op          130769 B/op        201 allocs/op</span>
</span><span class='line'><span class="go">BenchmarkDoReplacer-4             100000            238944 ns/op           43552 B/op          3 allocs/op</span>
</span><span class='line'><span class="go">PASS</span>
</span><span class='line'><span class="go">ok      github.com/sgykfjsm/sample-program-by-go/regexp_vs_replacer     41.822s</span>
</span></code></pre></td></tr></table></div></figure>


<p>10秒程度の実行でかなり差がついた。ざっくりと以下の様に言うことができると思う。</p>

<ul>
<li>実行回数だと<code>strings.Replacer</code>は50倍程度多く実行することが出来る</li>
<li>1回あたりの所要時間だと、<code>strings.Replacer</code>は1/35程度短い</li>
<li>1回あたりのメモリ使用量だと、<code>strings.Replacer</code>は1/3程度に抑えることができる</li>
<li>メモリアロケーションの回数だと、<code>strings.Replacer</code>は1/70程度に抑えることができる</li>
</ul>


<p>この結果から明らかなように、置換前後のリストを予め作成することができるのであれば、<code>strings.Replacer</code>を使うようにするべきだろう。また、なるべくなら正規表現は避けるようにしたほうが良さそうだ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DjangoをTango with Djangoで学ぶ - 2 -]]></title>
    <link href="http://sgykfjsm.github.io/blog/2017/09/21/djangowotango-with-djangodexue-bu-2/"/>
    <updated>2017-09-21T00:19:39+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2017/09/21/djangowotango-with-djangodexue-bu-2</id>
    <content type="html"><![CDATA[<p><a href="http://sgykfjsm.github.io/blog/2017/09/07/djangowotango-with-djangodexue-bu-1/">DjangoをTango with Djangoで学ぶ - 1 -</a>の続き</p>

<p>これまでは表示するHTML（ただのテキストだけど）をviews.pyに直接記載していたが、Djangoでも他のWebフレームワークと同様にテンプレートシステムを備えている。</p>

<p>テンプレートシステムとは簡単に言うと、独自のシンタックスとHTMLを混ぜておきて、独自シンタックスの部分をサーバーサイドで指定された文字列などに置き換えたりすることだ。場合によっては多少の制御構文を備えており、ループ文やIF文を提供するテンプレートシステムも多い。</p>

<!-- more -->


<p>Djangoでテンプレートシステムを利用する場合、<code>${workspace}/tango_with_django_project/templates/${application}</code>というフォルダを作ればよい。今回の場合だと以下の様になる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> ls -la
</span><span class='line'><span class="go">total 20</span>
</span><span class='line'><span class="go">drwxr-xr-x  9 sgyk   306  9  6 09:40 ./</span>
</span><span class='line'><span class="go">drwxr-xr-x  9 sgyk   306  9  4 22:40 ../</span>
</span><span class='line'><span class="go">drwxr-xr-x 12 sgyk   408  9  6 09:35 .git/</span>
</span><span class='line'><span class="go">-rw-r--r--  1 sgyk  3329  9  4 23:09 .gitignore</span>
</span><span class='line'><span class="go">drwxr-xr-x 12 sgyk   408  9  6 09:35 .idea/</span>
</span><span class='line'><span class="go">-rw-r--r--  1 sgyk 12288  9  4 22:52 db.sqlite3</span>
</span><span class='line'><span class="go">-rwxr-xr-x  1 sgyk   823  9  4 22:40 manage.py*</span>
</span><span class='line'><span class="go">drwxr-xr-x 11 sgyk   374  9  4 23:50 rango/</span>
</span><span class='line'><span class="go">drwxr-xr-x  8 sgyk   272  9  6 09:40 tango_with_django_project/</span>
</span><span class='line'>
</span><span class='line'><span class="gp">$</span> ls -la tango_with_django_project/
</span><span class='line'><span class="go">total 12</span>
</span><span class='line'><span class="go">drwxr-xr-x 8 sgyk  272  9  6 09:40 ./</span>
</span><span class='line'><span class="go">drwxr-xr-x 9 sgyk  306  9  6 09:40 ../</span>
</span><span class='line'><span class="go">-rw-r--r-- 1 sgyk    0  9  4 22:40 __init__.py</span>
</span><span class='line'><span class="go">drwxr-xr-x 6 sgyk  204  9  4 23:39 __pycache__/</span>
</span><span class='line'><span class="go">-rw-r--r-- 1 sgyk 3166  9  4 23:10 settings.py</span>
</span><span class='line'><span class="go">drwxr-xr-x 3 sgyk  102  9  6 09:40 templates/</span>
</span><span class='line'><span class="go">-rw-r--r-- 1 sgyk  930  9  4 23:39 urls.py</span>
</span><span class='line'><span class="go">-rw-r--r-- 1 sgyk  428  9  4 22:40 wsgi.py</span>
</span><span class='line'>
</span><span class='line'><span class="gp">$</span> ls -la tango_with_django_project/templates/
</span><span class='line'><span class="go">total 0</span>
</span><span class='line'><span class="go">drwxr-xr-x 3 sgyk 102  9  6 09:40 ./</span>
</span><span class='line'><span class="go">drwxr-xr-x 8 sgyk 272  9  6 09:40 ../</span>
</span><span class='line'><span class="go">drwxr-xr-x 2 sgyk  68  9  6 09:40 rango/</span>
</span></code></pre></td></tr></table></div></figure>


<p>次にDjangoに<code>tango_with_django_project/templates/rango</code>あるテンプレートを利用するということを教えてあげる必要がある。具体的には<code>tango_with_django_project/settings.py</code>に以下に設定を追加する必要がある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">TEMPLATES</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;BACKEND&#39;</span><span class="p">:</span> <span class="s">&#39;django.template.backends.django.DjangoTemplates&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;DIRS&#39;</span><span class="p">:</span> <span class="p">[],</span>  <span class="c"># &lt;-- ここにテンプレートのパスを追加する</span>
</span><span class='line'>        <span class="s">&#39;APP_DIRS&#39;</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>早速追加したいところだけど注意点がある。それは、<code>DIRS</code>に追加するパスは<strong>絶対パス</strong>でなければならないということだ。しかし、通常、開発時のテンプレートのパスとプロダクション環境で動作させるときに配置されるテンプレートのパスは異なるはず。異なる部分はワークスペース部分のパスになる。例えば、開発時は<code>/Users/you/workspace</code>がワークスペースかもしれないが、デプロイ時のパスは<code>/home/production/application</code>となるかもしれない。この違いの吸収するようにしないといけない。</p>

<p>もちろん、各環境ごとのパスを１つずつハードコーディングするのはダメである。一方、<code>tango_with_django_project/settings.py</code>をよく見てみると、次の１文に気づくはずだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span>
</span><span class='line'><span class="n">BASE_DIR</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">__file__</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>BASE_DIR</code>は<code>tango_with_django_project/settings.py</code>の絶対パスを取得して、２つ上のディレクトリパスを取得している。もし<code>/Users/you/workspace/tango_with_django_project/settings.py</code>だとすると、<code>BASE_DIR</code>には<code>/Users/you/workspace</code>が格納される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">python</span>
</span><span class='line'><span class="n">Python</span> <span class="mf">3.5</span><span class="o">.</span><span class="mi">3</span> <span class="p">(</span><span class="n">default</span><span class="p">,</span> <span class="n">Sep</span>  <span class="mi">4</span> <span class="mi">2017</span><span class="p">,</span> <span class="mi">22</span><span class="p">:</span><span class="mi">33</span><span class="p">:</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">GCC</span> <span class="mf">4.2</span><span class="o">.</span><span class="mi">1</span> <span class="n">Compatible</span> <span class="n">Apple</span> <span class="n">LLVM</span> <span class="mf">8.1</span><span class="o">.</span><span class="mi">0</span> <span class="p">(</span><span class="n">clang</span><span class="o">-</span><span class="mf">802.0</span><span class="o">.</span><span class="mi">42</span><span class="p">)]</span> <span class="n">on</span> <span class="n">darwin</span>
</span><span class='line'><span class="n">Type</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;copyright&quot;</span><span class="p">,</span> <span class="s">&quot;credits&quot;</span> <span class="ow">or</span> <span class="s">&quot;license&quot;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="s">&quot;/Users/you/workspace/tango_with_django_project/settings.py&quot;</span><span class="p">))</span>
</span><span class='line'><span class="s">&#39;/Users/you/workspace&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ということで、<code>/Users/you/workspace/tango_with_django_project/templates/rango</code>のようにパスをハードコートするのではなく、<code>BASE_DIR</code>を利用して以下の様に設定すれば良いことになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff
</span><span class='line'><span class="gh">diff --git a/tango_with_django_project/settings.py b/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gh">index 8d38aa9..3b12343 100644</span>
</span><span class='line'><span class="gd">--- a/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gi">+++ b/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gu">@@ -52,10 +52,12 @@ MIDDLEWARE = [</span>
</span><span class='line'>
</span><span class='line'> ROOT_URLCONF = &#39;tango_with_django_project.urls&#39;
</span><span class='line'>
</span><span class='line'><span class="gi">+TEMPLATE_DIR = os.path.join(BASE_DIR, &#39;templates&#39;)</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'> TEMPLATES = [
</span><span class='line'>     {
</span><span class='line'>         &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,
</span><span class='line'><span class="gd">-        &#39;DIRS&#39;: [],</span>
</span><span class='line'><span class="gi">+        &#39;DIRS&#39;: [TEMPLATE_DIR, ],</span>
</span><span class='line'>         &#39;APP_DIRS&#39;: True,
</span><span class='line'>         &#39;OPTIONS&#39;: {
</span><span class='line'>             &#39;context_processors&#39;: [
</span></code></pre></td></tr></table></div></figure>


<p>テンプレートの場所の設定が済んだので実際にテンプレートファイルを記述していく。ここでは以下のようなファイルを<code>rango/templates/index.html</code>として用意する。</p>

<p>templates/rango/index.html</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Rango says...<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>Rango says...<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>  hey there parther!<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;strong&gt;</span><span class="nt">&lt;/strong&gt;&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/rango/about/&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ほとんどはただのHTMLファイルだが、&#8220;をプレースホルダーとして設定している。AnsibleやJinja2などを経験しているならわかるが、このプレースホルダーがサーバーサイドで任意の変数に置き換えられる。</p>

<p>次にレンダリング処理を記述する。記述する箇所はもちろん<code>rango/views.py</code>だ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff rango/views.py
</span><span class='line'><span class="gh">diff --git a/rango/views.py b/rango/views.py</span>
</span><span class='line'><span class="gh">index 117afb3..6aeae71 100644</span>
</span><span class='line'><span class="gd">--- a/rango/views.py</span>
</span><span class='line'><span class="gi">+++ b/rango/views.py</span>
</span><span class='line'><span class="gu">@@ -1,5 +1,21 @@</span>
</span><span class='line'> from django.http import HttpResponse
</span><span class='line'><span class="gi">+from django.shortcuts import render</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> def index(request):
</span><span class='line'><span class="gd">-    return HttpResponse(&quot;Rango says hey there partner!&quot;)</span>
</span><span class='line'><span class="gi">+    &quot;&quot;&quot;</span>
</span><span class='line'><span class="gi">+    Construct a dicitionary to pass to the template engine as its context.</span>
</span><span class='line'><span class="gi">+    Note the key boldmessage is the same as  in the template!</span>
</span><span class='line'><span class="gi">+    &quot;&quot;&quot;</span>
</span><span class='line'><span class="gi">+    context_dict = {&#39;boldmessage&#39;: &#39;Crunchy, creamy, cookie, candy, cupcake!&#39;}</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+    &quot;&quot;&quot;</span>
</span><span class='line'><span class="gi">+    Return a rendered response to send to the client.</span>
</span><span class='line'><span class="gi">+    We make use of the shortcut function to make our lives easier.</span>
</span><span class='line'><span class="gi">+    Note that the first parameter is the template we wish to use.</span>
</span><span class='line'><span class="gi">+    &quot;&quot;&quot;</span>
</span><span class='line'><span class="gi">+    return render(request, &#39;rango/index.html&#39;, context=context_dict)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これも見れば大体わかるだろう。<code>render(request, 'index.html', context=context_dict)</code>だけに注目すれば良い。<code>render</code>の引数の１つ目はリクエストオブジェクトだ。これはお作法として「１つめはリクエストオブジェクト」とおぼえておけば良い。２つ目の引数は、このレンダリング処理が利用するテンプレートの位置を教えている。ディレクトリの位置は先ほど<code>'DIRS': [TEMPLATE_DIR, ]</code>と設定しているので、ここでは<code>TEMPLATE_DIR</code>以降の相対パスを記述すれば良い、ということになる。では３つ目は？これはcontextを渡している。一口にcontextといっても意味するところはまさにcontextに依存するわけだが、ここでは「テンプレートファイルに渡す情報」と理解しておけば良い。よって<code>context=context_dict</code>は<code>{'boldmessage': 'Crunchy, creamy, cookie, candy, cupcake!'}</code>という辞書変数をテンプレートファイルに渡していることを意味する。</p>

<p>さて、コードの順序とは逆だが、ここでテンプレートファイルに渡しているコンテキスト情報を見てみる。キーが<code>boldmessage</code>で値が<code>Crunchy, creamy, cookie, candy, cupcake!</code>だ。今回の処理では、「テンプレートファイルの中にある<code>boldmessage</code>というプレースホルダーに<code>Crunchy, creamy, cookie, candy, cupcake!</code>という値を渡す」ということになる。実際に<code>python runserver</code>を実行して <a href="http://127.0.0.1:8000/rango/">http://127.0.0.1:8000/rango/</a> にアクセスすると太字になった<strong>Crunchy, creamy, cookie, candy, cupcake!</strong>がブラウザに表示されるはずだ。</p>

<p>HTMLが配信されるようになった。とくれば次はCSSやJavascriptなどを使いたくなる。このような静的なファイルは本来はDjangoの守備範囲ではない。なぜならば、これは「静的」であり、サーバーサイドで生成するようなものではないからだ。とはいえ、Djangoアプリケーションで静的ファイルを配信することはもちろん可能である。</p>

<p>まず静的ファイルを配置するディレクトリを設定する。今回はtemplateディレクトリと同様にプロジェクトのルートに<code>static</code>ディレクトリを配置する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> ls -l
</span><span class='line'><span class="go">total 20</span>
</span><span class='line'><span class="go">drwxr-xr-x 11 sgyk   374  9  6 23:16 ./</span>
</span><span class='line'><span class="go">drwxr-xr-x  9 sgyk   306  9  4 22:40 ../</span>
</span><span class='line'><span class="go">drwxr-xr-x 12 sgyk   408  9  6 22:55 .git/</span>
</span><span class='line'><span class="go">-rw-r--r--  1 sgyk  3329  9  4 23:09 .gitignore</span>
</span><span class='line'><span class="go">drwxr-xr-x 12 sgyk   408  9  6 23:01 .idea/</span>
</span><span class='line'><span class="go">-rw-r--r--  1 sgyk 12288  9  4 22:52 db.sqlite3</span>
</span><span class='line'><span class="go">-rwxr-xr-x  1 sgyk   823  9  4 22:40 manage.py*</span>
</span><span class='line'><span class="go">drwxr-xr-x 11 sgyk   374  9  6 22:48 rango/</span>
</span><span class='line'><span class="go">drwxr-xr-x  2 sgyk    68  9  6 23:16 static/    # &lt;- コレ</span>
</span><span class='line'><span class="go">drwxr-xr-x  7 sgyk   238  9  6 22:48 tango_with_django_project/</span>
</span><span class='line'><span class="go">drwxr-xr-x  3 sgyk   102  9  6 22:47 templates/</span>
</span></code></pre></td></tr></table></div></figure>


<p>次にtemplatesディレクトリのときと同様にDjangoにstaticディレクトリの位置を教えてあげれば良い。ここでも絶対パスとして定義するようにすること。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff
</span><span class='line'><span class="gh">diff --git a/tango_with_django_project/settings.py b/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gh">index 634f1b7..cc817d7 100644</span>
</span><span class='line'><span class="gd">--- a/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gi">+++ b/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gu">@@ -121,3 +121,5 @@ USE_TZ = True</span>
</span><span class='line'> # https://docs.djangoproject.com/en/1.11/howto/static-files/
</span><span class='line'>
</span><span class='line'> STATIC_URL = &#39;/static/&#39;
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+STATIC_DIR = os.path.join(BASE_DIR, &#39;static&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に<code>STATICFILES_DIRS</code>を定義する。以下のようにすれば良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff
</span><span class='line'><span class="gh">diff --git a/tango_with_django_project/settings.py b/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gh">index 634f1b7..2cec3bc 100644</span>
</span><span class='line'><span class="gd">--- a/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gi">+++ b/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gu">@@ -121,3 +121,7 @@ USE_TZ = True</span>
</span><span class='line'> # https://docs.djangoproject.com/en/1.11/howto/static-files/
</span><span class='line'>
</span><span class='line'> STATIC_URL = &#39;/static/&#39;
</span><span class='line'>
</span><span class='line'>STATIC_DIR = os.path.join(BASE_DIR, &#39;static&#39;)
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+STATICFILES_DIRS = [STATIC_DIR, ]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>STATICFILES_DIRS</code>については「そういうもの」とおぼえておけばよい。要はお作法なのだ。詳細を知りたいなら <a href="https://docs.djangoproject.com/en/1.11/howto/static-files/">https://docs.djangoproject.com/en/1.11/howto/static-files/</a> を参照すること。また、<code>STATIC_URL = '/static/'</code>もちゃんと定義されていることを確認すること。これはDjangoプロジェクトを始める時点で生成されるファイルに予め記述されているはずだが、なければ上記のように定義しておく。<code>STATIC_URL</code>は定義されている値から想像できるように、静的ファイルを配信するときのURLだ。例えば、画像を/static/rango.jpgとして配置すると、ブラウザ上では <a href="http://127.0.0.1:8000/static/rango.jpg">http://127.0.0.1:8000/static/rango.jpg</a> としてアクセスできるようになる。また、<code>STATIC_URL</code>に定義する値はスラッシュを前後につけること。<code>STATIC_URL  = 'static/'</code>や<code>STATIC_URL  = '/static'</code>ではエラーになる。</p>

<p>では静的ファイルをどのようにテンプレートに組み込むか。これは簡単だ。まずは変更後のテンプレートファイルを見て欲しい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff templates/rango/index.html
</span><span class='line'><span class="gh">diff --git a/templates/rango/index.html b/templates/rango/index.html</span>
</span><span class='line'><span class="gh">index 8d06f2d..6895561 100644</span>
</span><span class='line'><span class="gd">--- a/templates/rango/index.html</span>
</span><span class='line'><span class="gi">+++ b/templates/rango/index.html</span>
</span><span class='line'><span class="gu">@@ -1,4 +1,7 @@</span>
</span><span class='line'> &lt;!DOCTYPE html&gt;
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+{% load staticfiles %}</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'> &lt;html lang=&quot;en&quot;&gt;
</span><span class='line'> &lt;head&gt;
</span><span class='line'>   &lt;meta charset=&quot;UTF-8&quot;&gt;
</span><span class='line'><span class="gu">@@ -13,5 +16,9 @@</span>
</span><span class='line'> &lt;div&gt;
</span><span class='line'>   &lt;a href=&quot;/rango/about/&quot;&gt;About&lt;/a&gt;
</span><span class='line'> &lt;/div&gt;
</span><span class='line'><span class="gi">+&lt;div&gt;</span>
</span><span class='line'><span class="gi">+  &lt;img src=&quot;{% static &quot;rango.jpg&quot; %}&quot; alt=&quot;Picture of Rango&quot; /&gt;</span>
</span><span class='line'><span class="gi">+&lt;/div&gt;</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'> &lt;/body&gt;
</span><span class='line'> &lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<p>テンプレートファイルの上部で<code>{% load staticfiles %}</code>と書いてDjangoに対して静的ファイルを使うことを宣言する。次に通常のHTMLタグを記述して参照したい静的ファイルを<code>{% static "rango.jpg" %}</code>と書く。これについて説明する。<code>{{ foo }}</code>をプレースホルダーと呼んでいたのに対して、<code>{% ... %}</code>は<strong>テンプレートタグ</strong>と呼ぶ。詳細な説明は一旦スキップして、ここでは<code>{% static %}</code>として先ほど設定した<code>STATIC_URL</code>と結びついて参照先URLを生成する。つまり、コードで表現すると<code>{% static "rango.jpg" %}</code>は<code>STATIC_URL + "rango.jpg"</code>となり<code>/static/smile.jpg</code>という文字列を生成する。</p>

<p>先述した静的ファイルの配信はあくまでサイトないしはWebアプリケーションのアセットを前提としたものだった。しかし、例えばユーザーやサイト管理者が任意に画像をアップロードし、それをコンテンツとして配信しないといけない場合はどうだろうか。こういったファイルは更新または削除されうるため、「静的」なコンテンツとは言えない。しかし、サーバーサイドのアプリケーションが生成するとも言えない。こういった場合、やはりDjangoに「このファイルは外部ユーザーが管理しているファイルですよ」と教えてあげる設定をしてあげれば良い。</p>

<p>まずは以下の様に外部からアップロードされるファイルを保存する場所を設定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff tango_with_django_project/settings.py
</span><span class='line'><span class="gh">diff --git a/tango_with_django_project/settings.py b/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gh">index 2cec3bc..7e8a909 100644</span>
</span><span class='line'><span class="gd">--- a/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gi">+++ b/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gu">@@ -125,3 +125,9 @@ STATIC_URL = &#39;/static/&#39;</span>
</span><span class='line'> STATIC_DIR = os.path.join(BASE_DIR, &#39;static&#39;)
</span><span class='line'>
</span><span class='line'> STATICFILES_DIRS = [STATIC_DIR, ]
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+MEDIA_DIR = os.path.join(BASE_DIR, &#39;media&#39;)</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+MEDIA_ROOT = MEDIA_DIR</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+MEDIA_URL = &#39;/media/&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に、この<code>MEDIA_URL</code>をアプリケーションのURLとして登録してあげる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff tango_with_django_project/urls.py
</span><span class='line'><span class="gh">diff --git a/tango_with_django_project/urls.py b/tango_with_django_project/urls.py</span>
</span><span class='line'><span class="gh">index 85abbc4..7050919 100644</span>
</span><span class='line'><span class="gd">--- a/tango_with_django_project/urls.py</span>
</span><span class='line'><span class="gi">+++ b/tango_with_django_project/urls.py</span>
</span><span class='line'><span class="gu">@@ -13,13 +13,15 @@ Including another URLconf</span>
</span><span class='line'>     1. Import the include() function: from django.conf.urls import url, include
</span><span class='line'>     2. Add a URL to urlpatterns:  url(r&#39;^blog/&#39;, include(&#39;blog.urls&#39;))
</span><span class='line'> &quot;&quot;&quot;
</span><span class='line'><span class="gi">+from django.conf import settings</span>
</span><span class='line'> from django.conf.urls import url
</span><span class='line'> from django.contrib import admin
</span><span class='line'> from django.conf.urls import include
</span><span class='line'><span class="gi">+from django.conf.urls.static import static</span>
</span><span class='line'> from rango import views
</span><span class='line'>
</span><span class='line'> urlpatterns = [
</span><span class='line'>     url(r&#39;^$&#39;, views.index, name=&#39;index&#39;),
</span><span class='line'>     url(r&#39;^rango/&#39;, include(&#39;rango.urls&#39;)),
</span><span class='line'>     url(r&#39;^admin/&#39;, admin.site.urls),
</span><span class='line'><span class="gd">-]</span>
</span><span class='line'><span class="gi">+] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、<a href="http://127.0.0.1:8000/media/user.jpg">http://127.0.0.1:8000/media/user.jpg</a> などのようにアクセスできるようになる。</p>

<p>なお、<code>django.conf.urls.static.static</code>を見ればわかるが、このURLでアクセスできるのはsettings.pyの中で<code>DEBUG = True</code>となっているときだけである。詳細は <a href="https://docs.djangoproject.com/en/1.11/howto/static-files/#serving-files-uploaded-by-a-user-during-development">https://docs.djangoproject.com/en/1.11/howto/static-files/#serving-files-uploaded-by-a-user-during-development</a> を参照すること。</p>

<p>次に、テンプレートで使用する場合はリクエストオブジェクトに<code>MEDIA_URL</code>の情報を与えるために<code>django.template.context_processors.media</code>を与える。このcontext_processorsについては <a href="https://docs.djangoproject.com/en/1.11/ref/templates/api/#django-template-context-processors-media">https://docs.djangoproject.com/en/1.11/ref/templates/api/#django-template-context-processors-media</a> を参照すること。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff tango_with_django_project/settings.py
</span><span class='line'><span class="gh">diff --git a/tango_with_django_project/settings.py b/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gh">index 7e8a909..68b8335 100644</span>
</span><span class='line'><span class="gd">--- a/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gi">+++ b/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gu">@@ -65,6 +65,7 @@ TEMPLATES = [</span>
</span><span class='line'>                 &#39;django.template.context_processors.request&#39;,
</span><span class='line'>                 &#39;django.contrib.auth.context_processors.auth&#39;,
</span><span class='line'>                 &#39;django.contrib.messages.context_processors.messages&#39;,
</span><span class='line'><span class="gi">+                &#39;django.template.context_processors.media&#39;,</span>
</span><span class='line'>             ],
</span><span class='line'>         },
</span><span class='line'>     },
</span></code></pre></td></tr></table></div></figure>


<p>テンプレートへの実際の埋め込みは以下の通り。上の設定でリクエストオブジェクトは<code>MEDIA_URL</code>が使えるようになっているので、素直にそのまま設定すれば良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>/tango_with_django_project (git)-[master][!][*]
</span><span class='line'>$ git diff templates/rango/
</span><span class='line'><span class="gh">diff --git a/templates/rango/index.html b/templates/rango/index.html</span>
</span><span class='line'><span class="gh">index 6895561..08398ef 100644</span>
</span><span class='line'><span class="gd">--- a/templates/rango/index.html</span>
</span><span class='line'><span class="gi">+++ b/templates/rango/index.html</span>
</span><span class='line'><span class="gu">@@ -19,6 +19,8 @@</span>
</span><span class='line'> &lt;div&gt;
</span><span class='line'>   &lt;img src=&quot;{% static &quot;smile.jpg&quot; %}&quot; alt=&quot;Picture of Rango&quot; /&gt;
</span><span class='line'> &lt;/div&gt;
</span><span class='line'><span class="gd">-</span>
</span><span class='line'><span class="gi">+&lt;div&gt;</span>
</span><span class='line'><span class="gi">+  &lt;img src=&quot;{{ MEDIA_URL }}user.jpg&quot; %}&quot; alt=&quot;Picture of User&quot; /&gt;</span>
</span><span class='line'><span class="gi">+&lt;/div&gt;</span>
</span><span class='line'> &lt;/body&gt;
</span><span class='line'> &lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<p>テンプレートの話はとりあえずここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoでSSL証明書の情報を取得したい]]></title>
    <link href="http://sgykfjsm.github.io/blog/2017/09/13/godesslzheng-ming-shu-falseqing-bao-woqu-de-sitai/"/>
    <updated>2017-09-13T23:49:31+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2017/09/13/godesslzheng-ming-shu-falseqing-bao-woqu-de-sitai</id>
    <content type="html"><![CDATA[<p>タイトルの通り。GoでSSL証明書の検証を行う簡単なコードを書く必要が出てきたので、それを実現するための検証の記録を残す。</p>

<p>ここでいう「検証」というのは、有効期限が現在より未来かどうかを調べるやり方を意味する。</p>

<!-- more -->


<a name="L......................................................"></a>
<h2>検証材料のため、自己発行証明書を作る</h2>

<p>自己発行証明書は以下のコマンドで簡単に発行できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>openssl req -x509 -nodes -newkey rsa:2048 -keyout server.rsa.key -out server.rsa.crt -days <span class="m">3650</span> -batch
</span></code></pre></td></tr></table></div></figure>


<p>コマンドの詳細は割愛するけど、とりあえずコレで10年間利用できる（もちろん正当な証明書としては利用できない）証明書を発行することができる。</p>

<p>これを実行しても良いけど、せっかくなのでgopherっぽくやるなら、以下のような感じになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>go run <span class="nv">$GOROOT</span>/src/crypto/tls/generate_cert.go -host <span class="k">$(</span>hostname<span class="k">)</span>
</span><span class='line'>2017/09/21 23:25:18 written cert.pem
</span><span class='line'>2017/09/21 23:25:18 written key.pem
</span></code></pre></td></tr></table></div></figure>


<p>ログの通りにファイルが生成されている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> ls
</span><span class='line'><span class="go">total 24</span>
</span><span class='line'><span class="go">drwxr-xr-x   5 sgyk  staff   170  9 21 23:48 ./</span>
</span><span class='line'><span class="go">drwxr-xr-x  13 sgyk  staff   442  9 21 23:05 ../</span>
</span><span class='line'><span class="go">-rw-r--r--   1 sgyk  staff  1099  9 21 23:25 cert.pem</span>
</span><span class='line'><span class="go">-rw-------   1 sgyk  staff  1675  9 21 23:25 key.pem</span>
</span></code></pre></td></tr></table></div></figure>


<p>念のために検証しておく。まずは鍵の確認。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> openssl rsa -in key.pem -check -noout
</span><span class='line'><span class="go">RSA key ok</span>
</span></code></pre></td></tr></table></div></figure>


<p>証明書の確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> openssl x509 -in ./cert.pem -text -noout
</span><span class='line'><span class="go">Certificate:</span>
</span><span class='line'><span class="go">    Data:</span>
</span><span class='line'><span class="go">        Version: 3 (0x2)</span>
</span><span class='line'><span class="go">        Serial Number:</span>
</span><span class='line'><span class="go">            9c:4e:90:ec:b8:f2:ac:91:91:04:19:e3:2c:d0:cf:b6</span>
</span><span class='line'><span class="go">        Signature Algorithm: sha256WithRSAEncryption</span>
</span><span class='line'><span class="go">        Issuer: O=Acme Co</span>
</span><span class='line'><span class="go">        Validity</span>
</span><span class='line'><span class="go">            Not Before: Sep 13 15:05:11 2017 GMT</span>
</span><span class='line'><span class="go">            Not After : Sep 13 15:05:11 2018 GMT</span>
</span><span class='line'><span class="go">(snip)</span>
</span></code></pre></td></tr></table></div></figure>


<p>とりあえず大丈夫そう。</p>

<a name="L......"></a>
<h2>実践</h2>

<p>こんな記事を書いといてアレなんだけど、色々試行錯誤した結果、大変泥臭いやり方になった。というのも、有効期限(notAfterの日付)をスマートに取り出すことができなかった。GoのOpenSSLバインディングだと <a href="https://github.com/spacemonkeygo/openssl">https://github.com/spacemonkeygo/openssl</a> が良さそうだけど、これだと取り出される情報に日付が含まれていなかった。</p>

<p>ということで、結局、以下のようにシェルコマンドで<code>notAfter</code>の日付を取り出して整形するというやり方になった。</p>

<p>シェルで表現するとこうなる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># $ openssl x509 -in ./cert.pem -noout -enddate</span>
</span><span class='line'><span class="c"># notAfter=Sep 21 14:25:18 2018 GMT</span>
</span><span class='line'><span class="nv">$ </span>openssl x509 -in ./cert.pem -noout -enddate <span class="p">|</span> cut -d<span class="s1">&#39;=&#39;</span> -f2
</span><span class='line'>Sep <span class="m">21</span> 14:25:18 <span class="m">2018</span> GMT
</span></code></pre></td></tr></table></div></figure>


<p>これと同じことをGoでやると、だいたいこうなる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;bytes&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/exec&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">line</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Split</span><span class="p">(</span><span class="s">&quot;openssl x509 -in ./cert.pem -noout -enddate&quot;</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">cmd</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nx">Command</span><span class="p">(</span><span class="nx">line</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">line</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">out</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nx">CombinedOutput</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">out</span> <span class="p">=</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Trim</span><span class="p">(</span><span class="nx">out</span><span class="p">,</span> <span class="s">&quot;notAfter=&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">out</span> <span class="p">=</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">TrimSpace</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">const</span> <span class="nx">layout</span> <span class="p">=</span> <span class="s">&quot;Jan 2 15:04:05 2006 MST&quot;</span>
</span><span class='line'>  <span class="nx">notAfter</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Parse</span><span class="p">(</span><span class="nx">layout</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">out</span><span class="p">))</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;notAfter is&quot;</span><span class="p">,</span> <span class="nx">notAfter</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">notAfter</span><span class="p">.</span><span class="nx">After</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Certification is valid&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Certification is invalid&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>うーん長い。果たしてコレはどうなのか…でもまぁとりあえずはコレで目的は達成できるので、まぁ良しとしよう。</p>

<a name="L......"></a>
<h1>参考</h1>

<ul>
<li><a href="https://www.sslshopper.com/article-most-common-openssl-commands.html">https://www.sslshopper.com/article-most-common-openssl-commands.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerコンテナの中でsystemdを操作したいの注意点]]></title>
    <link href="http://sgykfjsm.github.io/blog/2017/09/10/dockerkontenafalsezhong-desystemdwocao-zuo-sitaifalsezhu-yi-dian/"/>
    <updated>2017-09-10T15:27:44+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2017/09/10/dockerkontenafalsezhong-desystemdwocao-zuo-sitaifalsezhu-yi-dian</id>
    <content type="html"><![CDATA[<p>Dockerコンテナを使ってAnsibleのPlaybookをテストする際に、Playbookで<code>systemctl</code>を実行しようとして以下のようなエラーが発生した。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Failed to get D-Bus connection: Operation not permitted</span></code></pre></td></tr></table></div></figure>


<a name="TR.DL"></a>
<h1>TR;DL</h1>

<p>以下の様にコンテナを起動しておいて、それから<code>docker exec</code>で<code>systemctl</code>を実行すればよい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker run --rm --privileged -d -it --security-opt seccomp=unconfined -e "container=docker" centos:7 /sbin/init</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<a name="L......"></a>
<h1>説明</h1>

<p>今回の問題は大まかに言うとコンテナからホストへのリソースアクセスが制限されていることによるものである。よって、このリソース制限を以下の様に緩和してあげれば良い。なお、<strong>これらの設定はプロダクション環境では絶対に行ってはならない。あくまで一時的なテスト環境などでのみ利用するべきであり、プライベート環境であっても持続的に起動するコンテナには付与してはならない。</strong></p>

<a name="L1..privileged............."></a>
<h2>1. privileged をつける</h2>

<p>エラー内容から察するに、どうやら<a href="https://ja.wikipedia.org/wiki/D-Bus">D-Busデーモン</a>へのアクセスに失敗しているっぽい。また、<code>Operation not permitted</code>というよく見るエラーメッセージからは権限の不足が予測される。Dockerはホスト側に色々と依存しているので、きっとコンテナ内部で起動する<code>systemd</code>はホスト側のD-Busにも依存しているのだろうということで、起動オプションに<code>--privileged</code>をとりあえずつける。これでホスト側のリソースにほぼ無制限にアクセスできる。当然のことながら、プロダクション環境で<code>--privileged</code>をつけてはいけない。</p>

<a name="cap-add.SYS_ADMIN................"></a>
<h3>cap-add=SYS_ADMIN で十分か？</h3>

<p>今回の解決策は<a href="https://github.com/moby/moby/issues/2296#issuecomment-238530205">GitHubでのIssueコメント</a>を参考にしたけど、コメントで示された<code>--cap-add=SYS_ADMIN</code>ではダメで、<code>--privileged</code>でなければならなかった。<a href="https://linuxjm.osdn.jp/html/LDP_man-pages/man7/capabilities.7.html">https://linuxjm.osdn.jp/html/LDP_man-pages/man7/capabilities.7.html</a> によれば、今回のD-Bus Connectionの取得はできそうな気がするけど、もしかしたら<code>SYS_MODULE</code>も必要なのかもしれない。検証してないけれど。</p>

<a name="L2..security-opt.seccomp.unconfined............."></a>
<h2>2. security-opt seccomp=unconfined をつける</h2>

<p>これは必須ではないけど、Dockerはどんどんセキュリティ（ホスト側へのリソースアクセス）を厳しくしているので、これも付けておいたほうが良い。ここで設定している<code>seccomp</code>は簡単に言うと、コンテナの中での行動に制約を設けるためのプロファイル設定のこと。「行動」とはどういうものを指すのかというと、実行可能なsyscallのこと。具体的な内容は <a href="https://docs.docker.com/engine/security/seccomp/#significant-syscalls-blocked-by-the-default-profile">https://docs.docker.com/engine/security/seccomp/#significant-syscalls-blocked-by-the-default-profile</a> を参照すれば良いけど、そんなものがあるんだなぁぐらいの理解でとりあえず良いと思う。ちゃんと使う時は見ておいたほうが良いとは思うけど。</p>

<p>で、結局<code>--security-opt seccomp=unconfined</code>とは何かというと、プロファイル設定を無効にする、つまり無制限ということになる。これにより、コンテナが実行できるsysycallに制約が無くなる。当然のことながら、これもプロダクション環境で<code>--security-opt seccomp=unconfined</code>としてはいけない。</p>

<a name="L3...sbin.init................................."></a>
<h2>3. /sbin/initでコンテナを起動させる</h2>

<p><code>/sbin/init</code>については <a href="https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/6/html/Installation_Guide/s2-boot-init-shutdown-init.html">https://access.redhat.com/documentation/ja-JP/Red_Hat_Enterprise_Linux/6/html/Installation_Guide/s2-boot-init-shutdown-init.html</a> を参照すれば良い。要は環境の初期化である。これまでに述べたセキュリティレベルの変更を反映することになる。</p>

<hr />

<p>docker(そう言えば今はmodyプロジェクトと呼ばれている)は昔からコンテナからホストへのリソースアクセスについて多方面から警告されており、今回の問題もそれらの警告を受けたものなのだと思う。dockerは便利でなんでも出来るように思えるが、実際には微妙なバランスを試行錯誤しながら実現されているので、今後のアップデートでも特にリソースアクセスに関する制約を始めとするセキュリティには注目しておかなければならない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DjangoをTango with Djangoで学ぶ - 1 -]]></title>
    <link href="http://sgykfjsm.github.io/blog/2017/09/07/djangowotango-with-djangodexue-bu-1/"/>
    <updated>2017-09-07T00:12:56+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2017/09/07/djangowotango-with-djangodexue-bu-1</id>
    <content type="html"><![CDATA[<p>仕事でDjangoアプリケーションを扱うことになったのでDjangoについて勉強を始めた。参考書として<a href="http://www.tangowithdjango.com/">Tango With Django</a>を購入した。古いバージョンなら無料で入手できるっぽいけど大して高価な本というわけでもないし購入したほうが良いかなと思って買った。</p>

<p>さて、最初は環境の準備を行い、それからViewの基本とURLマッピングについての学習だ。</p>

<!-- more -->


<a name="L......"></a>
<h1>準備</h1>

<p>これはTango With Djangoに書いてあるやり方ではなくて、いつも自分がPython環境を構築するときのやり方だ。要はDjangoを指定のPythonバージョンで動かせばよいわけだから、いつものやり方で良い。</p>

<a name="L..............."></a>
<h2>必要なもの</h2>

<p><a href="https://github.com/pyenv/pyenv">pyenv</a>と<a href="https://github.com/pyenv/pyenv-virtualenv">pyenv-virtualenv</a>がinstallされていること。</p>

<a name="L......"></a>
<h2>手順</h2>

<p>pyenvにバージョン3.5.3をインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pyenv install 3.5.3
</span><span class='line'>Downloading Python-3.5.3.tar.xz...
</span><span class='line'>-&gt; https://www.python.org/ftp/python/3.5.3/Python-3.5.3.tar.xz
</span><span class='line'>Installing Python-3.5.3...
</span><span class='line'>Installed Python-3.5.3 to /Users/sgyk/.pyenv/versions/3.5.3</span></code></pre></td></tr></table></div></figure>


<p>作業用Pythonの設定をする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ eval "$(pyenv init -)"
</span><span class='line'>$ eval "$(pyenv virtualenv-init -)"
</span><span class='line'>$ pyenv virtualenv 3.5.3 tango-with-django-env
</span><span class='line'>$ pyenv activate tango-with-django-env
</span><span class='line'>$ python --version
</span><span class='line'>Python 3.5.3</span></code></pre></td></tr></table></div></figure>


<a name="Django...install................................."></a>
<h2>Djangoをinstallしてプロジェクトを作る</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install django
</span><span class='line'># Confirm django is installed as expected
</span><span class='line'>$ python
</span><span class='line'>Python 3.5.3 (default, Sep  4 2017, 22:33:15)
</span><span class='line'>[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)] on darwin
</span><span class='line'>Type "help", "copyright", "credits" or "license" for more information.
</span><span class='line'>&gt;&gt;&gt; import django
</span><span class='line'>&gt;&gt;&gt; django.get_version()
</span><span class='line'>'1.11.4'
</span><span class='line'>&gt;&gt;&gt; exit()
</span><span class='line'># $ cd ${YOUR_WORKSPACE}
</span><span class='line'>$ cd tango_with_django_project
</span><span class='line'>$ django-admin.py startproject tango_with_django_project
</span><span class='line'>$ cd tango_with_django_project/
</span><span class='line'>$ ls -l
</span><span class='line'>total 4
</span><span class='line'>drwxr-xr-x 4 sgyk 136  9  4 22:40 ./
</span><span class='line'>drwxr-xr-x 9 sgyk 306  9  4 22:40 ../
</span><span class='line'>-rwxr-xr-x 1 sgyk 823  9  4 22:40 manage.py*
</span><span class='line'>drwxr-xr-x 6 sgyk 204  9  4 22:40 tango_with_django_project/   # &lt;- project configuration directrory</span></code></pre></td></tr></table></div></figure>


<p>ここまでで準備は完了。とりあえず起動してみる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python manage.py runserver
</span><span class='line'>Performing system checks...
</span><span class='line'>
</span><span class='line'>System check identified no issues (0 silenced).
</span><span class='line'>
</span><span class='line'>You have 13 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
</span><span class='line'>Run 'python manage.py migrate' to apply them.
</span><span class='line'>
</span><span class='line'>....
</span></code></pre></td></tr></table></div></figure>


<p>warningが出ているが、これはDBを使うようになるまで放置で良い。<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> にアクセスして&#8221;It worked!&ldquo;が表示されることを確認すること。</p>

<a name="L................................."></a>
<h2>アプリケーションの準備</h2>

<p>ここまではプロジェクトの準備。ここからはアプリケーションの準備を始める。今回はテキストに則ってrangoというアプリケーションを作成する。アプリケーションの準備は以下の通りにコマンドを叩けば良い。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python manage.py startapp rango</span></code></pre></td></tr></table></div></figure>


<p><code>startapp</code>コマンドはプロジェクトディレクトリのルートに新しいディレクトリを作成する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -l
</span><span class='line'>total 16
</span><span class='line'>drwxr-xr-x 6 sgyk   204  9  4 22:58 ./
</span><span class='line'>drwxr-xr-x 9 sgyk   306  9  4 22:40 ../
</span><span class='line'>-rw-r--r-- 1 sgyk 12288  9  4 22:52 db.sqlite3
</span><span class='line'>-rwxr-xr-x 1 sgyk   823  9  4 22:40 manage.py*
</span><span class='line'>drwxr-xr-x 9 sgyk   306  9  4 22:58 rango/
</span><span class='line'>drwxr-xr-x 7 sgyk   238  9  4 22:52 tango_with_django_project/</span></code></pre></td></tr></table></div></figure>


<p><code>db.sqlite3</code>と<code>rango</code>ディレクトリが作成されたことが確認できる。<code>rango</code>ディレクトリの中身は以下の通り。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -l ./rango/
</span><span class='line'>total 20
</span><span class='line'>drwxr-xr-x 9 sgyk 306  9  4 22:58 ./
</span><span class='line'>drwxr-xr-x 6 sgyk 204  9  4 22:58 ../
</span><span class='line'>-rw-r--r-- 1 sgyk   0  9  4 22:58 __init__.py
</span><span class='line'>-rw-r--r-- 1 sgyk  63  9  4 22:58 admin.py
</span><span class='line'>-rw-r--r-- 1 sgyk  85  9  4 22:58 apps.py
</span><span class='line'>drwxr-xr-x 3 sgyk 102  9  4 22:58 migrations/
</span><span class='line'>-rw-r--r-- 1 sgyk  57  9  4 22:58 models.py
</span><span class='line'>-rw-r--r-- 1 sgyk  60  9  4 22:58 tests.py
</span><span class='line'>-rw-r--r-- 1 sgyk  63  9  4 22:58 views.py</span></code></pre></td></tr></table></div></figure>


<p>Djangoの開発では主に<code>views.py</code>と<code>models.py</code>を扱う。Djangoのmodel, viewsそしてtemplatesがどのように関連しているかは <a href="https://docs.djangoproject.com/en/1.11/intro/overview/">https://docs.djangoproject.com/en/1.11/intro/overview/</a> を参照すると良い。</p>

<p>なお、このあたりで<code>git init</code>しておくと良い。</p>

<a name="L..............."></a>
<h2>最後の準備</h2>

<p>これでアプリケーションの準備ができたので開発を始めることができると思いきや、まだしなければならないことがある。それは、Djangoにこれから開発するアプリケーションについて教えてあげないといけない。具体的には<code>tango_with_django_project/settings.py</code>にこれから追加するアプリケーションの情報を追加しなければならない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff
</span><span class='line'><span class="gh">diff --git a/tango_with_django_project/settings.py b/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gh">index 63c1c9a..8d38aa9 100644</span>
</span><span class='line'><span class="gd">--- a/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gi">+++ b/tango_with_django_project/settings.py</span>
</span><span class='line'><span class="gu">@@ -37,6 +37,7 @@ INSTALLED_APPS = [</span>
</span><span class='line'>     &#39;django.contrib.sessions&#39;,
</span><span class='line'>     &#39;django.contrib.messages&#39;,
</span><span class='line'>     &#39;django.contrib.staticfiles&#39;,
</span><span class='line'><span class="gi">+    &#39;rango&#39;,</span>
</span><span class='line'> ]
</span><span class='line'>
</span><span class='line'> MIDDLEWARE = [
</span></code></pre></td></tr></table></div></figure>


<p>上記を追加したら<code>python manage.py runserver</code>を実行し、先ほどと同じようにサーバーが起動することを確認する。</p>

<a name="View....................."></a>
<h1>Viewの開発の１歩目</h1>

<p>Viewの開発を始める。まずは既存のviews.pyを以下の様に書き換えてみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff
</span><span class='line'><span class="gh">diff --git a/rango/views.py b/rango/views.py</span>
</span><span class='line'><span class="gh">index 91ea44a..117afb3 100644</span>
</span><span class='line'><span class="gd">--- a/rango/views.py</span>
</span><span class='line'><span class="gi">+++ b/rango/views.py</span>
</span><span class='line'><span class="gu">@@ -1,3 +1,5 @@</span>
</span><span class='line'><span class="gd">-from django.shortcuts import render</span>
</span><span class='line'><span class="gi">+from django.http import HttpResponse</span>
</span><span class='line'>
</span><span class='line'><span class="gd">-# Create your views here.</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+def index(request):</span>
</span><span class='line'><span class="gi">+    return HttpResponse(&quot;Rango says hey there partner!&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここからわかることは、Viewの仕事は基本的に<code>HttpResponse</code>を返すことだ。</p>

<p><code>index</code>が受け取っている<code>request</code>とは簡単に言うとRequestオブジェクトである。この中に様々なリクエスト情報が含まれているが、ここでは使っていない。そのため、引数<code>request</code>を削除しても良いかと思うかもしれないが、これは残しておかないと次に設定するURLのマッピング処理に失敗するので、残しておくこと。</p>

<p>すでに触れたが、上記のviews.pyの修正だけでは、<code>index</code>の処理にアクセスすることはできない。なぜならば、Djangoに<code>index</code>へのアクセスするルートを教えていないからだ。このURLマッピング処理は以下の通りに行えば良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff tango_with_django_project/urls.py
</span><span class='line'><span class="gh">diff --git a/tango_with_django_project/urls.py b/tango_with_django_project/urls.py</span>
</span><span class='line'><span class="gh">index af5caa3..c385489 100644</span>
</span><span class='line'><span class="gd">--- a/tango_with_django_project/urls.py</span>
</span><span class='line'><span class="gi">+++ b/tango_with_django_project/urls.py</span>
</span><span class='line'><span class="gu">@@ -15,7 +15,9 @@ Including another URLconf</span>
</span><span class='line'> &quot;&quot;&quot;
</span><span class='line'> from django.conf.urls import url
</span><span class='line'> from django.contrib import admin
</span><span class='line'><span class="gi">+from rango import views</span>
</span><span class='line'>
</span><span class='line'> urlpatterns = [
</span><span class='line'><span class="gi">+    url(r&#39;^$&#39;, views.index, name=&#39;index&#39;),</span>
</span><span class='line'>     url(r&#39;^admin/&#39;, admin.site.urls),
</span><span class='line'> ]
</span></code></pre></td></tr></table></div></figure>


<p><code>url(r'^$', views.index, name='index')</code>が意味するのは、URLのルートにアクセスしたら(<code>r'^$'</code>), <code>views.index</code>にリクエスト情報を渡して処理をさせる、この処理の名前を<code>index</code>とする(<code>name='index'</code>)、ということだ。<code>name='index'</code>は一見すると無意味な設定に見えるかもしれないが、DjangoのWarningに使われたりするので、いざという時に重要な情報となる。また、Djangoの<a href="https://docs.djangoproject.com/en/1.11/topics/http/urls/#reverse-resolution-of-urls">Reverse URL Matching</a>にも利用される。よって、設定しておくのが良い。</p>

<a name="URL............................................."></a>
<h2>URLのマッピングに関するテクニック</h2>

<p>上述したようにURLを一つずつ設定していくことによって、URLとViewを対応付けることができる。しかし、設定したファイルは<code>tango_with_django_project</code>というプロジェクトの全体設定ファイルである。今は良いが、今後開発が進んでチームで開発するようになることを考えると、いつまでも全体設定ファイルを扱うことはあまり好ましくない。なぜならば、変更の衝突などが発生しうるからだ。これを避けるためには、以下の様にアプローチすれば良い。</p>

<ol>
<li>全体設定ファイルにはアプリケーションのURLのプレフィックスを設定する。</li>
<li>設定したプレフィックスに該当するURLが参照するURLマッピング設定ファイルをアプリケーションのディレクトリ以下に配置する。</li>
</ol>


<p>これにより、アプリケーションとURLマッピング設定ファイルを１：１対応させることができ、アプリケーション開発者は他のアプリケーション設定に関して気にしなくて良くなる。具体的には以下の様に設定すれば良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ git diff
</span><span class='line'><span class="gh">diff --git a/tango_with_django_project/urls.py b/tango_with_django_project/urls.py</span>
</span><span class='line'><span class="gh">index c385489..85abbc4 100644</span>
</span><span class='line'><span class="gd">--- a/tango_with_django_project/urls.py</span>
</span><span class='line'><span class="gi">+++ b/tango_with_django_project/urls.py</span>
</span><span class='line'><span class="gu">@@ -15,9 +15,11 @@ Including another URLconf</span>
</span><span class='line'> &quot;&quot;&quot;
</span><span class='line'> from django.conf.urls import url
</span><span class='line'> from django.contrib import admin
</span><span class='line'><span class="gi">+from django.conf.urls import include</span>
</span><span class='line'> from rango import views
</span><span class='line'>
</span><span class='line'> urlpatterns = [
</span><span class='line'>     url(r&#39;^$&#39;, views.index, name=&#39;index&#39;),
</span><span class='line'><span class="gi">+    url(r&#39;^rango/&#39;, include(&#39;rango.urls&#39;)),</span>
</span><span class='line'>     url(r&#39;^admin/&#39;, admin.site.urls),
</span><span class='line'> ]
</span></code></pre></td></tr></table></div></figure>


<p><code>url(r'^rango/', include('rango.urls'))</code>の重要な部分は<code>include('rango.urls')</code>だ。これは<code>rango/</code>から始まるURLのマッピング処理を<code>rango.urls</code>に任せる、という意味になる。<code>rango.urls</code>とは言うまでもなく、rangoアプリケーションの下にある<code>urls</code>というモジュール（あるいは<code>rango/urls.py</code>と言い換えることもできる）のことだ。この設定に従い、rangoディレクトリに<code>urls.py</code>というファイルを作成する。<code>tango_with_django_project/urls.py</code>をコピペして作ればよい。具体的には以下のようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="n">rango</span><span class="o">/</span><span class="n">urls</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">rango</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;rango_index&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>記述内容は先述したとおりなので、ここでは割愛する。重要なのは<code>r'^$'</code>だ。<code>include('rango.urls')</code>によってリクエスト情報が渡されるわけだが、<strong>マッチングするURLから<code>rango/</code>が削除される</strong>。例えば、<code>rango/my-page</code>というURLがリクエストされたとすると、<code>rango.urls</code>が処理するURLは<code>my-page/</code>となる。この点に注意すること。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GolangのSignalハンドリングを同時に複数実行したらどうなるか]]></title>
    <link href="http://sgykfjsm.github.io/blog/2017/09/05/golangfalsesignalhandoringuwotong-shi-nifu-shu-shi-xing-sitaradounaruka/"/>
    <updated>2017-09-05T22:03:39+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2017/09/05/golangfalsesignalhandoringuwotong-shi-nifu-shu-shi-xing-sitaradounaruka</id>
    <content type="html"><![CDATA[<p>めっちゃ久しぶりにブログを書く。標題の件が気になったので実際にやってみた。</p>

<!-- more -->


<p>シンプルなSignalハンドラはこんな感じになる。ほぼ<a href="https://gobyexample.com/signals">Go By Example</a>と同じ。何度も写経しているうちに暗記した。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sig</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">sig</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">sig</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\nCatch the signal at main: %v\n&quot;</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">done</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Waiting for signal at main ...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;-</span><span class="nx">done</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Exit from main&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次にほぼこれをコピペしてライブラリとしてインポートする。そうすると、以下のようになる。</p>

<p>main.go</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/sgykfjsm/sample-program-by-go/signal-handler/sub1&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/sgykfjsm/sample-program-by-go/signal-handler/sub2&quot;</span>
</span><span class='line'>  <span class="s">&quot;sync&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sig</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">go</span> <span class="nx">sub1</span><span class="p">.</span><span class="nx">Sub1</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">wg</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">sub2</span><span class="p">.</span><span class="nx">Sub2</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">wg</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">sig</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">wg</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">sig</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\nCatch the signal at main: %v\n&quot;</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">done</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Waiting for signal at main ...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">wg</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
</span><span class='line'>  <span class="o">&lt;-</span><span class="nx">done</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Exit from main&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>sub1/sub.go</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">sub1</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;sync&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Sub1</span><span class="p">(</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Don&#39;t put wg.Wait(). This should be done at caller function.</span>
</span><span class='line'>  <span class="nx">wg</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">sig</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">sig</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">sig</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\nCatch the signal at Sub1: %v\n&quot;</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">done</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Waiting for signal at Sub1 ...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;-</span><span class="nx">done</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Exit from Sub1&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>sub2/sub.goも作っているけど、sub1/sub.goとほぼ同じなので省略。先にmain.goがexitしないように<code>sync.Waitgroup</code>を使って待ち合わせをする。実行結果は以下の通り。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> go run ./main.go
</span><span class='line'><span class="go">Waiting for signal at main ...</span>
</span><span class='line'><span class="go">Waiting for signal at Sub2 ...</span>
</span><span class='line'><span class="go">Waiting for signal at Sub1 ...</span>
</span><span class='line'><span class="go">^C</span>
</span><span class='line'><span class="go">Catch the signal at Sub1: interrupt</span>
</span><span class='line'><span class="go">Exit from Sub1</span>
</span><span class='line'>
</span><span class='line'><span class="go">Catch the signal at main: interrupt</span>
</span><span class='line'>
</span><span class='line'><span class="go">Catch the signal at Sub2: interrupt</span>
</span><span class='line'><span class="go">Exit from main</span>
</span><span class='line'>
</span><span class='line'><span class="gp">$</span> go run ./main.go
</span><span class='line'><span class="go">Waiting for signal at main ...</span>
</span><span class='line'><span class="go">Waiting for signal at Sub1 ...</span>
</span><span class='line'><span class="go">Waiting for signal at Sub2 ...</span>
</span><span class='line'><span class="go">^C</span>
</span><span class='line'><span class="go">Catch the signal at main: interrupt</span>
</span><span class='line'>
</span><span class='line'><span class="go">Catch the signal at Sub1: interrupt</span>
</span><span class='line'><span class="go">Exit from Sub1</span>
</span><span class='line'>
</span><span class='line'><span class="go">Catch the signal at Sub2: interrupt</span>
</span><span class='line'><span class="go">Exit from main</span>
</span><span class='line'>
</span><span class='line'><span class="gp">$</span> go run ./main.go
</span><span class='line'><span class="go">Waiting for signal at main ...</span>
</span><span class='line'><span class="go">Waiting for signal at Sub2 ...</span>
</span><span class='line'><span class="go">Waiting for signal at Sub1 ...</span>
</span><span class='line'><span class="go">^C</span>
</span><span class='line'><span class="go">Catch the signal at main: interrupt</span>
</span><span class='line'>
</span><span class='line'><span class="go">Catch the signal at Sub2: interrupt</span>
</span><span class='line'><span class="go">Exit from Sub2</span>
</span><span class='line'>
</span><span class='line'><span class="go">Catch the signal at Sub1: interrupt</span>
</span><span class='line'><span class="go">Exit from main</span>
</span></code></pre></td></tr></table></div></figure>


<p>見ての通り、各ハンドラは同一のシグナルを同様に受け取っていることがわかる。まぁそりゃそうだという感じ。実際にコード（というかgodoc）にも以下の様に<a href="https://github.com/golang/go/blob/master/src/os/signal/signal.go#L102-L104">記述されている</a>。</p>

<blockquote><p>It is allowed to call Notify multiple times with different channels
and the same signals: each channel receives copies of incoming
signals independently.</p></blockquote>

<p>ただし、上記出力からもう１つわかることとして、ライブラリ側の<code>wg.Done()</code>以降の処理は必ずしも全うするとは限らないということだ。そのため、例えば、シグナルを受け取ったらメモリに溜まっているデータをFlushして何らかの処理などを行う必要がある場合、呼び出し側の処理を止めてライブラリ側の処理を終了させてから次に呼び出し側の処理を再開するような実装をしなければならない。</p>

<p>今回のサンプルの場合であれば、<code>wg.Done</code>を処理の一番最後に持っていけば良い。例えば、以下の様にする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Sub2</span><span class="p">(</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span> <span class="c1">// &lt;-- 処理の最初にdeferでwg.Doneを登録する。</span>
</span><span class='line'>  <span class="c1">// Don&#39;t put wg.Wait(). This should be done at caller function.</span>
</span><span class='line'>  <span class="nx">wg</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">sig</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">sig</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">sig</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\nCatch the signal at Sub2: %v\n&quot;</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">done</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Waiting for signal at Sub2 ...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;-</span><span class="nx">done</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Exit from Sub2&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし、現実として呼び出し側から<code>wg *sync.WaitGroup</code>を渡してもらうということは実装として通常はありえない。ではどうするか？</p>

<p>１つの方法としては<a href="https://golang.org/pkg/runtime/#SetFinalizer">runtime.SetFinalizer</a>を使う方法がある。これはGCが発動する際にGC処理のfinalizerとして処理を登録する方法だ。参考の実装は <a href="https://gist.github.com/deltamobile/6511901">https://gist.github.com/deltamobile/6511901</a> がある。<a href="https://play.golang.org/p/jWhRSPNvxJ">https://play.golang.org/p/jWhRSPNvxJ</a> で動作を確認することができる。一見、これは有用に見えるが、GC処理のfinalizerとするのはあまり実用的ではない。</p>

<p>自分がおもいつく限りだと<code>sync.Mutex</code>を使った排他制御かなーと思ったけど、どういう風に実装にすれば良いか思いつかない。やっぱりシンプルにチャンネルを渡して、呼び出し側が渡したチャンネルから終了の合図を受け取る方法かなぁ？</p>

<p>main.go</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/sgykfjsm/sample-program-by-go/signal-handler/sub1&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/sgykfjsm/sample-program-by-go/signal-handler/sub2&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sig</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">sub1Done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">sub2Done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">go</span> <span class="nx">sub1</span><span class="p">.</span><span class="nx">Sub1</span><span class="p">(</span><span class="nx">sub1Done</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">sub2</span><span class="p">.</span><span class="nx">Sub2</span><span class="p">(</span><span class="nx">sub2Done</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">sig</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">sig</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\nCatch the signal at main: %v\n&quot;</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">done</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Waiting for signal at main ...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;-</span><span class="nx">done</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Exit from main&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;-</span><span class="nx">sub1Done</span>
</span><span class='line'>  <span class="o">&lt;-</span><span class="nx">sub2Done</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>sub1/sub.go</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">sub1</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Sub1</span><span class="p">(</span><span class="nx">done</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sig</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">subDone</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">sig</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">s</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">sig</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\nCatch the signal at Sub1: %v\n&quot;</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">subDone</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Waiting for signal at Sub1 ...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;-</span><span class="nx">subDone</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Exit from Sub1&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">done</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果は以下の通り。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> go run ./main.go
</span><span class='line'><span class="go">Waiting for signal at main ...</span>
</span><span class='line'><span class="go">Waiting for signal at Sub2 ...</span>
</span><span class='line'><span class="go">Waiting for signal at Sub1 ...</span>
</span><span class='line'><span class="go">^C</span>
</span><span class='line'><span class="go">Catch the signal at main: interrupt</span>
</span><span class='line'><span class="go">Exit from main</span>
</span><span class='line'>
</span><span class='line'><span class="go">Catch the signal at Sub2: interrupt</span>
</span><span class='line'><span class="go">Exit from Sub2</span>
</span><span class='line'>
</span><span class='line'><span class="go">Catch the signal at Sub1: interrupt</span>
</span><span class='line'><span class="go">Exit from Sub1</span>
</span><span class='line'>
</span><span class='line'><span class="gp">$</span> go run ./main.go
</span><span class='line'><span class="go">Waiting for signal at main ...</span>
</span><span class='line'><span class="go">Waiting for signal at Sub2 ...</span>
</span><span class='line'><span class="go">Waiting for signal at Sub1 ...</span>
</span><span class='line'><span class="go">^C</span>
</span><span class='line'><span class="go">Catch the signal at Sub2: interrupt</span>
</span><span class='line'><span class="go">Exit from Sub2</span>
</span><span class='line'>
</span><span class='line'><span class="go">Catch the signal at main: interrupt</span>
</span><span class='line'><span class="go">Exit from main</span>
</span><span class='line'>
</span><span class='line'><span class="go">Catch the signal at Sub1: interrupt</span>
</span><span class='line'><span class="go">Exit from Sub1</span>
</span><span class='line'>
</span><span class='line'><span class="gp">$</span> go run ./main.go
</span><span class='line'><span class="go">Waiting for signal at main ...</span>
</span><span class='line'><span class="go">Waiting for signal at Sub1 ...</span>
</span><span class='line'><span class="go">Waiting for signal at Sub2 ...</span>
</span><span class='line'><span class="go">^C</span>
</span><span class='line'><span class="go">Catch the signal at Sub2: interrupt</span>
</span><span class='line'><span class="go">Exit from Sub2</span>
</span><span class='line'>
</span><span class='line'><span class="go">Catch the signal at main: interrupt</span>
</span><span class='line'><span class="go">Exit from main</span>
</span><span class='line'>
</span><span class='line'><span class="go">Catch the signal at Sub1: interrupt</span>
</span><span class='line'><span class="go">Exit from Sub1</span>
</span></code></pre></td></tr></table></div></figure>


<p>一応は期待通りに、ライブラリ側の処理を全うして呼び出し側が終了させることが出来た。最初の例と何が違うのかって言われるとちょっと困るけど、チャンネルを通じたコミュニケーションということで、こっちのほうがGoっぽいかな？という程度…どこかに最適解がありそうな気がするけど、まぁ今日はこのへんで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoでJSON APIを書く Part2]]></title>
    <link href="http://sgykfjsm.github.io/blog/2016/03/13/golang-json-api-tutorial-pt2/"/>
    <updated>2016-03-13T23:27:51+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2016/03/13/golang-json-api-tutorial-pt2</id>
    <content type="html"><![CDATA[<p><a href="http://sgykfjsm.github.io/blog/2016/03/13/golang-json-api-tutorial/">前回</a>の続き。全体的にちょっとアレなところが多いので、もう少しリファクタリングを行なう。今回のリファクタリングの元ネタは以下。元ネタのほうが説明が簡潔だしコードが綺麗なので、元ネタを読めばコレを読む必要は無い。</p>

<ul>
<li><a href="http://openmymind.net/Go-action-responses/">Go actions responses</a></li>
</ul>


<!-- more -->


<a name="L.........................................."></a>
<h2>主処理の結果を受け取りたい。</h2>

<p>見出しの通りなんだけど、例えば現在のロギング内容にステータスコードを出力したいと思ったら、主処理から処理結果を受け取り、HTTPステータスコードを取り出す必要がある。また、事後処理にHTTPステータスコードを設定させるようにするのも同様だ。しかし、現在のハンドラからは処理結果を受け取ることができない。なぜならば、各Middlewareは<code>httprouter.Handle</code>をハンドラとして定義しており、<code>httprouter.Handle</code>は以下のように定義されているからだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// Handle is a function that can be registered to a route to handle HTTP</span>
</span><span class='line'><span class="c1">// requests. Like http.HandlerFunc, but has a third parameter for the values of</span>
</span><span class='line'><span class="c1">// wildcards (variables).</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Handle</span> <span class="kd">func</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">Params</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>つまりハンドラには返り値が無い。というわけで、今回の目的を実現するには、まずハンドラの定義を自分で変えなければならない。また、ハンドラを自分で定義するとhttprouterを使い続けるのが難しくなるため、別の方法でroutingを実装する必要がある。これについては後述する。</p>

<a name="L.............................."></a>
<h3>アプローチを考える。</h3>

<p>考えを整理しよう。大雑把に考えると、主処理はリクエストを受け取って処理結果を返却してくれればよい。例えば以下の様な感じだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">DoSomething</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Result</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Do something</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Result</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際のところ、レスポンスを生成する処理は主処理の役割ではないため引数から<code>w http.ResponseWriter</code>を削除した。また、httprouterが使えなくなるため、<code>ps httprouter.Params</code>も削除した。</p>

<p><code>Result</code>の部分は事後処理のことを考えると、HTTP Responseと対応してるっぽく定義したほうが良さそうだ。また、現在の事後処理はレスポンスヘッダーの設定を担当しているが、いっそレスポンスに関することを全て対応して欲しい。この考えを元に<code>Result</code>を<code>Response</code>に変更し、<code>Response</code>をstructとして以下のように定義する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Response</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">status</span> <span class="kt">int</span>          <span class="c1">// HTTPステータスコードに対応する</span>
</span><span class='line'>    <span class="nx">body</span>   <span class="p">[]</span><span class="kt">byte</span>       <span class="c1">// レスポンスボディに対応する</span>
</span><span class='line'>    <span class="nx">header</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Header</span>  <span class="c1">// HTTPレスポンスヘッダーに対応する</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Response</code>をもう少し考える。今回の主処理のレスポンスは以下のように分類できる。</p>

<ul>
<li>GETメソッドの結果を<code>200 OK</code>でJSONレスポンスを返す</li>
<li>POSTメソッドの結果は<code>204 Created</code>でをJSONレスポンスを返す</li>
<li>DELETEメソッドの場合は何も返却しない</li>
<li>エラーが発生した場合はJSONでエラーメッセージを返す</li>
<li>上記に挙げた処理はそれぞれ基本的なレスポンス生成処理に基づく</li>
</ul>


<p>また、<code>Response</code>でやりたいことはレスポンス生成とロギングのためにHTTPステータスコードを取り出せるようにすることだ。この時点では具体的な実装は未定なので、やりたいことを<code>interface</code>として記述する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">Response</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Write</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">)</span> <span class="c1">// レスポンスを生成</span>
</span><span class='line'>  <span class="nx">Status</span><span class="p">()</span> <span class="kt">int</span>                 <span class="c1">// ステータスコードを取り出す</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここでinterfaceの名前が先ほど定義したstructと被ってしまった。レスポンスを定義するstructはinterfaceを実装するようにしていたほうが何かと便利なので、interfaceのほうを尊重してstructの名前を<code>NormalResponse</code>とする。主処理はこの<code>Response</code> interfaceだけを意識するようにしておけば、レスポンス側の実装に影響を受けにくくなる。</p>

<a name="response.go"></a>
<h3>response.go</h3>

<p>以上を踏まえて、<code>Response</code>を作る処理は以下のようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Response</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Write</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">Status</span><span class="p">()</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">NormalResponse</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">status</span> <span class="kt">int</span>         <span class="c1">// HTTPステータスコードに対応する</span>
</span><span class='line'>  <span class="nx">body</span>   <span class="p">[]</span><span class="kt">byte</span>      <span class="c1">// レスポンスボディに対応する</span>
</span><span class='line'>  <span class="nx">header</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Header</span> <span class="c1">// HTTPレスポンスヘッダーに対応する</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">NormalResponse</span><span class="p">)</span> <span class="nx">Write</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">header</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">r</span><span class="p">.</span><span class="nx">header</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">header</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="p">=</span> <span class="nx">v</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Write</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">NormalResponse</span><span class="p">)</span> <span class="nx">Status</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">status</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">NormalResponse</span><span class="p">)</span> <span class="nx">Header</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">NormalResponse</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">r</span><span class="p">.</span><span class="nx">header</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">r</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Empty</span><span class="p">(</span><span class="nx">status</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">NormalResponse</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Respond</span><span class="p">(</span><span class="nx">status</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Json</span><span class="p">(</span><span class="nx">status</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">body</span> <span class="kd">interface</span><span class="p">{})</span> <span class="o">*</span><span class="nx">NormalResponse</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Respond</span><span class="p">(</span><span class="nx">status</span><span class="p">,</span> <span class="nx">body</span><span class="p">).</span><span class="nx">Header</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Created</span><span class="p">(</span><span class="nx">status</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">body</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">location</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">NormalResponse</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Json</span><span class="p">(</span><span class="nx">status</span><span class="p">,</span> <span class="nx">body</span><span class="p">).</span><span class="nx">Header</span><span class="p">(</span><span class="s">&quot;Location&quot;</span><span class="p">,</span> <span class="nx">location</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Error</span><span class="p">(</span><span class="nx">status</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">message</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="o">*</span><span class="nx">NormalResponse</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%s, %s&quot;</span><span class="p">,</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Respond</span><span class="p">(</span><span class="nx">status</span><span class="p">,</span> <span class="nx">message</span><span class="p">).</span><span class="nx">Header</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Respond</span><span class="p">(</span><span class="nx">status</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">body</span> <span class="kd">interface</span><span class="p">{})</span> <span class="o">*</span><span class="nx">NormalResponse</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">b</span> <span class="p">[]</span><span class="kt">byte</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span><span class='line'>  <span class="k">switch</span> <span class="nx">t</span> <span class="o">:=</span> <span class="nx">body</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="kt">string</span><span class="p">:</span>
</span><span class='line'>      <span class="nx">b</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span>
</span><span class='line'>  <span class="k">default</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">Error</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="s">&quot;failed marshalling json&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="o">&amp;</span><span class="nx">NormalResponse</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">status</span><span class="p">:</span> <span class="nx">status</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">body</span><span class="p">:</span>   <span class="nx">b</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">header</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">Header</span><span class="p">),</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この処理で注目すべき点は各処理の<code>body</code>の型が<code>interface</code>となっていることだ。引数を<code>interface</code>で抽象化することで多くのデータ型に対応することが可能となる。</p>

<p><code>Respond</code>は各処理からレスポンスを生成するための材料を受け取る。<code>switch</code>の文を見てわかるように、<code>body.(type)</code>でデータ型を取り出し、それぞれのデータ型に合わせて処理を分岐させている。</p>

<p>また、<code>Respond</code>は<code>NormalResponse</code>を返却する際に、<code>make(http.Header)</code>を<code>NormalResponse.header</code>に割り当てている。これにより、<code>Respond</code>を利用する各処理の内部でレスポンスヘッダーを設定することが可能となっている。</p>

<a name="Middleware..............."></a>
<h2>Middlewareを修正する</h2>

<p>上記のように事後処理を実装したが、これにより、<code>decorator.go</code>に定義した<code>CommonHeaders</code>が不要となる。また、忘れてしまいそうになるが、今回の修正では独自のハンドラを定義しなければならない。先述したように主処理に必要なのは<code>r *http.Request</code>だけで<code>Response</code> interfaceを返却するだけなので、以下のように定義できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">MyHandle</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Response</span>
</span></code></pre></td></tr></table></div></figure>


<p>これに基づき、<code>decorator.go</code>と<code>logger.go</code>を以下のように修正する。</p>

<a name="decorator.go"></a>
<h3>decorator.go</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/gorilla/mux&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">MyHandle</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Response</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">IDShouldBeInt</span><span class="p">(</span><span class="nx">h</span> <span class="kd">func</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Response</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">MyHandle</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Logging</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Response</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">mux</span><span class="p">.</span><span class="nx">Vars</span><span class="p">(</span><span class="nx">r</span><span class="p">)[</span><span class="s">&quot;todoId&quot;</span><span class="p">])</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">Error</span><span class="p">(</span><span class="mi">422</span><span class="p">,</span> <span class="s">&quot;todoId should be number&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">h</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span> <span class="nx">name</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記を見てわかると思うけど、<code>github.com/gorilla/mux</code>を使っている。これはhttprouterの代わりとしているため。実際には、この時点では<code>r.URL.Query().Get("todoId")</code>でパラメータを取り出していた。</p>

<p>さて、ここでの修正は以下のとおりだ。</p>

<ul>
<li><code>CommonHeaders</code>の削除</li>
<li><code>IDShouldBeInt</code>は削除された<code>CommonHeaders</code>の代わりに<code>Logging</code>を設定</li>
<li>レスポンス生成処理を削除</li>
</ul>


<p>これだけを書いてもちょっとわかりにくいので参考までに修正前のコードを抜粋する。比較するとかなりシンプルになったことがわかる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// これは修正前のコード</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">IDShouldBeInt</span><span class="p">(</span><span class="nx">h</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Handle</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Handle</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">CommonHeaders</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">ps</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">idParam</span> <span class="o">:=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">ByName</span><span class="p">(</span><span class="s">&quot;todoId&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">idParam</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json; charset=UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">h</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">ps</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span> <span class="nx">name</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="logger.go"></a>
<h3>logger.go</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">logger</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">uri</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">status</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">start</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\&quot;method\&quot;:%q  \&quot;uri\&quot;:%q    \&quot;name\&quot;:%q   \&quot;status\&quot;:%d \&quot;time\&quot;:%q&quot;</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">uri</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Since</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Logging</span><span class="p">(</span><span class="nx">h</span> <span class="kd">func</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Response</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">MyHandle</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Response</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">result</span> <span class="o">:=</span> <span class="nx">h</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">logger</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Method</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Status</span><span class="p">(),</span> <span class="nx">start</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">result</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここでようやく主処理から結果を受け取れるようになったことが確認できると思う。</p>

<a name="L........................"></a>
<h2>主処理を修正する</h2>

<p>ここまでくればやることは自ずと決まる。つまり、以下のことをやれば良い。</p>

<ul>
<li>httprouterに関する部分を削除する。</li>
<li>各処理の返却時には<code>Response</code> interfaceのデータを返却する。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/gorilla/mux&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Index</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Response</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Respond</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="s">&quot;Welcmoe&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TodoIndex</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Response</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Json</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">todos</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TodoShow</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Response</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">id</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">mux</span><span class="p">.</span><span class="nx">Vars</span><span class="p">(</span><span class="nx">r</span><span class="p">)[</span><span class="s">&quot;todoId&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="nx">t</span> <span class="o">:=</span> <span class="nx">RepoFindTodo</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nx">ID</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Name</span> <span class="o">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Empty</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusNotFound</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Json</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TodoCreate</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Response</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">todo</span> <span class="nx">Todo</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">body</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">io</span><span class="p">.</span><span class="nx">LimitReader</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">,</span> <span class="mi">1048576</span><span class="p">))</span> <span class="c1">// 1MiB</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Error</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="s">&quot;request body is too large&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">body</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">todo</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Error</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span> <span class="s">&quot;failed marshalling json&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">t</span> <span class="o">:=</span> <span class="nx">RepoCreateTodo</span><span class="p">(</span><span class="nx">todo</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">location</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;http://%s/%s/%d&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Host</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">,</span> <span class="nx">t</span><span class="p">.</span><span class="nx">ID</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Created</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusCreated</span><span class="p">,</span> <span class="nx">t</span><span class="p">,</span> <span class="nx">location</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TodoDelete</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Response</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">id</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">mux</span><span class="p">.</span><span class="nx">Vars</span><span class="p">(</span><span class="nx">r</span><span class="p">)[</span><span class="s">&quot;todoId&quot;</span><span class="p">])</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">RepoDestroyTodo</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Empty</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusNotFound</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Empty</span><span class="p">(</span><span class="mi">204</span><span class="p">)</span> <span class="c1">// 204 No Content</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="main.go..............."></a>
<h2>main.goを修正する</h2>

<p>何度も繰り返しているようにhttprouterはもう使えない。標準の<code>mux</code>を使ってもいいけどMethodによるルーティングなどを自分で実装するのはいかにも面倒くさい。すでにネタバレしているけど、今回のような状況では<code>github.com/gorilla/mux</code>が使いやすい。</p>

<ul>
<li><a href="https://github.com/gorilla/mux">github.com/gorilla/mux</a></li>
</ul>


<p>また、今回は独自のハンドラを定義したことを思い出して欲しい。このままでは支障があるため、<code>func(http.ResponseWriter, *http.Request)</code>を返却するラッパーを用意しなければならない。実は<code>Response</code>をHTTPレスポンスとして出力する処理が記述されていないが、このラッパーに記述することで最後にHTTPレスポンスを生成することができるようになる。つまり、今後、新たなMiddlewareを実装するとしてもそれらはHTTPレスポンスへの書き出しを意識しなくて良くなるということだ。</p>

<a name="main.go"></a>
<h3>main.go</h3>

<p>以上を踏まえると、<code>main.go</code>は以下のようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/gorilla/mux&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">decorator</span><span class="p">(</span><span class="nx">h</span> <span class="kd">func</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">Response</span><span class="p">)</span> <span class="kd">func</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">result</span> <span class="o">:=</span> <span class="nx">h</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">result</span><span class="p">.</span><span class="nx">Write</span><span class="p">(</span><span class="nx">w</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">r</span> <span class="o">:=</span> <span class="nx">mux</span><span class="p">.</span><span class="nx">NewRouter</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">r</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">decorator</span><span class="p">(</span><span class="nx">Logging</span><span class="p">(</span><span class="nx">Index</span><span class="p">,</span> <span class="s">&quot;index&quot;</span><span class="p">))).</span><span class="nx">Methods</span><span class="p">(</span><span class="s">&quot;GET&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">r</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/todos&quot;</span><span class="p">,</span> <span class="nx">decorator</span><span class="p">(</span><span class="nx">Logging</span><span class="p">(</span><span class="nx">TodoIndex</span><span class="p">,</span> <span class="s">&quot;todo-index&quot;</span><span class="p">))).</span><span class="nx">Methods</span><span class="p">(</span><span class="s">&quot;GET&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">r</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/todos/{todoId}&quot;</span><span class="p">,</span> <span class="nx">decorator</span><span class="p">(</span><span class="nx">IDShouldBeInt</span><span class="p">(</span><span class="nx">TodoShow</span><span class="p">,</span> <span class="s">&quot;todo-show&quot;</span><span class="p">))).</span><span class="nx">Methods</span><span class="p">(</span><span class="s">&quot;GET&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">r</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/todos&quot;</span><span class="p">,</span> <span class="nx">decorator</span><span class="p">(</span><span class="nx">Logging</span><span class="p">(</span><span class="nx">TodoCreate</span><span class="p">,</span> <span class="s">&quot;todo-create&quot;</span><span class="p">))).</span><span class="nx">Methods</span><span class="p">(</span><span class="s">&quot;POST&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">r</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/todos/{todoId}&quot;</span><span class="p">,</span> <span class="nx">decorator</span><span class="p">(</span><span class="nx">IDShouldBeInt</span><span class="p">(</span><span class="nx">TodoDelete</span><span class="p">,</span> <span class="s">&quot;todo-delete&quot;</span><span class="p">))).</span><span class="nx">Methods</span><span class="p">(</span><span class="s">&quot;DELETE&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">Handle</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;start&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:8080&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>main.go</code>に関しては以前よりもごちゃごちゃしてしまった…。ちょっと丸括弧の数が多すぎるか。このあたりは今後の課題だなぁ。</p>

<a name="L............"></a>
<h2>おさらい</h2>

<p>以上、GoでJSON APIを作る方法を見てきた。まぁまぁ良い感じのコードになったんじゃないかなーとは思うけど、最後の<code>main.go</code>はかなりいただけない感じになってしまった。まぁこの辺は自力でちゃんとやろうとするよりも素直にWeb Frameworkを使ったほうが良いと思う。ここまでやっといてなんだけど。しかし、Goの世界ではまだデファクトスタンダードとなるような安定したWeb Frameworkが無いのもまた事実で、シンプルなAPI程度ならばまだスクラッチで実装するほうが良いと個人的には思う。その場合、パッケージの選定には注意したい。httprouterのように優れた性能であっても利用者に一定の制約（多くの場合は問題にならないし、むしろメリットのほうが大きいが）を課すことがある。そういった制約の中でどこまで何ができるのかを早々に見極めないとハマることになるし、Goは続々と色々なパッケージが作られているのでさっさと見切りをつけてパッケージを乗り換えたほうが良い。</p>

<p>今回のコードは <a href="https://gist.github.com/sgykfjsm/1dd9a8eee1f70a7068c9">https://gist.github.com/sgykfjsm/1dd9a8eee1f70a7068c9</a> にアップした。興味があれば見てみると良い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoでJSON APIを書く]]></title>
    <link href="http://sgykfjsm.github.io/blog/2016/03/13/golang-json-api-tutorial/"/>
    <updated>2016-03-13T23:21:43+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2016/03/13/golang-json-api-tutorial</id>
    <content type="html"><![CDATA[<p>JSONを返すRESTful APIを作ることになったので諸々の復習を兼ねて<a href="http://thenewstack.io/make-a-restful-json-api-go/">Making a RESTful JSON API in Go</a>を読む。そのままだとつまらないのでところどころ微妙にアレンジしながらやってみる。</p>

<!-- more -->


<a name="A.Basic.Web.Server"></a>
<h2>A Basic Web Server</h2>

<p>RESTfulなAPI Serverを作る場合、当然の事ながらWeb Serverとして提供することになる。周知の通り、Goの場合は<code>net/http</code>を使って簡単にWeb Server Applicationを作ることが出来る。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;html&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;Hello, %q&quot;</span><span class="p">,</span> <span class="nx">html</span><span class="p">.</span><span class="nx">EscapeString</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">))</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:8080&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のソースコードはGo Web Applicationのテンプレートと言っても過言ではないので、スニペットなどに登録しておくと良い。</p>

<p>さて、上記のコードは以下のコマンドでプログラムとして起動させることができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>go run main.go
</span></code></pre></td></tr></table></div></figure>


<p>起動後、もう1つターミナルを開いて以下のように<code>curl</code>でアクセスすると、レスポンスが返ってきてWeb Serverとして動作していることが確認できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -vvv localhost:8080/hello/world
</span><span class='line'>*   Trying ::1...
</span><span class='line'>* Connected to localhost <span class="o">(</span>::1<span class="o">)</span> port <span class="m">8080</span> <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET /hello/world HTTP/1.1
</span><span class='line'>&gt; Host: localhost:8080
</span><span class='line'>&gt; User-Agent: curl/7.43.0
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>&lt; Date: Sat, <span class="m">12</span> Mar <span class="m">2016</span> 10:51:45 GMT
</span><span class='line'>&lt; Content-Length: 21
</span><span class='line'>&lt; Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>&lt;
</span><span class='line'>* Connection <span class="c">#0 to host localhost left intact</span>
</span><span class='line'>Hello, <span class="s2">&quot;/hello/world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Adding.a.Router"></a>
<h2>Adding a Router</h2>

<p>通常、APIには複数の処理を実装し、各処理に応じたURLを割り当てる。このような<em>routing</em>の実装を行うためのライブラリは標準で提供されているが、一般的には<a href="https://github.com/gorilla/mux">gorilla/mux</a>か<a href="https://github.com/julienschmidt/httprouter">julienschmidt/httprouter</a>が使われていることが多い。元記事は前者のgorilla/muxを使っているが、今回はjulienschmidt/httprouterを使うことにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;html&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/julienschmidt/httprouter&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Index</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;Hello, %q&quot;</span><span class="p">,</span> <span class="nx">html</span><span class="p">.</span><span class="nx">EscapeString</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">router</span> <span class="o">:=</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">New</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/:path&quot;</span><span class="p">,</span> <span class="nx">Index</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:8080&quot;</span><span class="p">,</span> <span class="nx">router</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>httprouterのroutingは結構厳密なので、元記事とはやや異なるソースとなる。具体的には<code>router.GET("/:path", Index)</code>としているところ。こうしないと、例えば<code>localhost:8080/hello_world</code>としたときに<code>Index</code>ハンドラへ処理が流れていかない。また、<code>router.GET("/", Index)</code>とすると、<code>localhost:8080/</code>あるいは<code>localhost:8080</code>とリクエストする必要があるため。</p>

<p>さて、上記のコードでは外部パッケージを利用しているので、プログラムを起動する前に以下のようにしてパッケージをインストールする必要がある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>go get <span class="s2">&quot;github.com/julienschmidt/httprouter&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>インストール後、プログラムを起動すると、以下のようにして動作を確認することができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -vvv localhost:8080/hello_world
</span><span class='line'>*   Trying ::1...
</span><span class='line'>* Connected to localhost <span class="o">(</span>::1<span class="o">)</span> port <span class="m">8080</span> <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET /hello_world HTTP/1.1
</span><span class='line'>&gt; Host: localhost:8080
</span><span class='line'>&gt; User-Agent: curl/7.43.0
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>&lt; Date: Sat, <span class="m">12</span> Mar <span class="m">2016</span> 11:16:22 GMT
</span><span class='line'>&lt; Content-Length: 21
</span><span class='line'>&lt; Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>&lt;
</span><span class='line'>* Connection <span class="c">#0 to host localhost left intact</span>
</span><span class='line'>Hello, <span class="s2">&quot;/hello_world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Creating.Some.Basic.Routes"></a>
<h2>Creating Some Basic Routes</h2>

<p>httprouterの基本的な使い方を把握したので、それっぽくいくつかroutingを実装する。元記事に倣い、ToDoアプリケーションを作ると想定してみると、以下のようなコードになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/julienschmidt/httprouter&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Index</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;Welcmoe!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TodoIndex</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;Todo Index!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TodoShow</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">ps</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;Todo show: %s&quot;</span><span class="p">,</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">ByName</span><span class="p">(</span><span class="s">&quot;todoId&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">router</span> <span class="o">:=</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">New</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">Index</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/todos&quot;</span><span class="p">,</span> <span class="nx">TodoIndex</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/todos/:todoId&quot;</span><span class="p">,</span> <span class="nx">TodoShow</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:8080&quot;</span><span class="p">,</span> <span class="nx">router</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>見ての通り、2つのエンドポイント(あるいはルート)が追加されている。</p>

<ul>
<li>localhost:8080/todos

<ul>
<li>Todoの一覧を表示するルート</li>
</ul>
</li>
<li>localhost:8080/todos/:todoId

<ul>
<li><code>:todoId</code>で指定したTodoの項目を表示するルート</li>
</ul>
</li>
</ul>


<p>すでに触れているが、ここでは<code>:todoId</code>をURL指定の中に追加している。こうすることによって、例えば<code>localhost:8080/todos/123</code>とリクエストしたときに<code>123</code>という文字列が<code>todoId</code>に割り当てられることになる。割り当てられた<code>todoId</code>は<code>ps.ByName()</code>という関数を使って取り出すことができる。</p>

<p>今回はcurlでの実行例を省略する。</p>

<a name="A.Basic.Model"></a>
<h2>A Basic Model</h2>

<p>次にこのプログラムで取り扱うデータのモデルを定義する。Goの場合は<code>struct</code>を使って定義するのが一般的だ。他の言語であれば<code>class</code>で定義することが一般的かもしれない。ちなみに、<code>map</code>を使うことで定義の宣言を（ある程度）省略することが可能だが、Goでは<code>map</code>はスレッドセーフではなく、goroutineなどを使ってconcurrentに処理を行うことが多い処理では慎重に使う必要があるため、個人的には<code>map</code>を使うのはオススメしない(参考: <a href="https://golang.org/doc/faq#atomic_maps">Why are map operations not defined to be atomic?</a>)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/julienschmidt/httprouter&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Todo</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Name</span>      <span class="kt">string</span>    <span class="s">`json:&quot;name&quot;`</span>
</span><span class='line'>  <span class="nx">Completed</span> <span class="kt">bool</span>      <span class="s">`json:&quot;completed&quot;`</span>
</span><span class='line'>  <span class="nx">Due</span>       <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&quot;due&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Todos</span> <span class="p">[]</span><span class="nx">Todo</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 以降は上掲のコードと同じなので省略する</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>type Todos []Todo</code>では<code>struct</code>を使って宣言していないが、直観的に<code>Todo</code>のスライスだとわかるはず。また、今回はJSON形式でレスポンスを返すと予めわかっているのでstructのプロパティにjsonタグをつけている。</p>

<a name="Send.Back.Some.JSON"></a>
<h2>Send Back Some JSON</h2>

<p>データモデルを定義したので、このデータモデルの使い方を確認する。使い方の部分だけを抜粋すると、以下のようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">TodoIndex</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">todos</span> <span class="o">:=</span> <span class="nx">Todos</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Todo</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&quot;Write presentation&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Todo</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&quot;Host meetup&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">todos</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記を追加して（もちろん<code>import "encoding/json"</code>も忘れずに）、プログラムを起動してレスポンスを確認してみる。ここでは出力を整形するために<a href="https://stedolan.github.io/jq/">jq</a>を使っている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl --silent localhost:8080/todos <span class="p">|</span> jq
</span><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;Write presentation&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;completed&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;due&quot;</span>: <span class="s2">&quot;0001-01-01T00:00:00Z&quot;</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;Host meetup&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;completed&quot;</span>: <span class="nb">false</span>,
</span><span class='line'>    <span class="s2">&quot;due&quot;</span>: <span class="s2">&quot;0001-01-01T00:00:00Z&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記では、<code>Completed</code>と<code>Due</code>にそれぞれ値を割り当てていないので、初期値が出力されている。また、元記事とは微妙に室力がプロパティのキー値が異なっている。これは先述したJSONタグでの定義によるもの。</p>

<a name="A.Better.Model"></a>
<h2>A Better Model</h2>

<p>すでに上記で触れているので省略。</p>

<a name="OK..We.Need.to.Split.This.Up."></a>
<h2>OK, We Need to Split This Up!</h2>

<p>この時点ではソースコードは50行弱だが、若干のリファクタリングを行う。具体的には以下のファイル群に処理を分ける。元記事とは異なり、<code>routes.go</code>は無い。なんかあんまり実用性があるように思えなかったので。httprouterだと同じような実装ができないからっていうのもあるけど。なお、このようにファイルを分割した場合は<code>go get</code>で起動するよりも一度<code>go build</code>して実行バイナリを生成してから動作確認をしたほうがハマりにくい。</p>

<ul>
<li>main.go</li>
<li>handlers.go</li>
<li>todo.go</li>
</ul>


<a name="main.go"></a>
<h3>main.go</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/julienschmidt/httprouter&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">router</span> <span class="o">:=</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">New</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">Index</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/todos&quot;</span><span class="p">,</span> <span class="nx">TodoIndex</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/todos/:todoId&quot;</span><span class="p">,</span> <span class="nx">TodoShow</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:8080&quot;</span><span class="p">,</span> <span class="nx">router</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="handlers.go"></a>
<h3>handlers.go</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/julienschmidt/httprouter&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Index</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;Welcmoe!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TodoIndex</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">todos</span> <span class="o">:=</span> <span class="nx">Todos</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Todo</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&quot;Write presentation&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Todo</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&quot;Host meetup&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">todos</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TodoShow</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">ps</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;Todo show: %s&quot;</span><span class="p">,</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">ByName</span><span class="p">(</span><span class="s">&quot;todoId&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="todo.go"></a>
<h3>todo.go</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Todo</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Name</span>      <span class="kt">string</span>    <span class="s">`json:&quot;name&quot;`</span>
</span><span class='line'>  <span class="nx">Completed</span> <span class="kt">bool</span>      <span class="s">`json:&quot;completed&quot;`</span>
</span><span class='line'>  <span class="nx">Due</span>       <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&quot;due&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Todos</span> <span class="p">[]</span><span class="nx">Todo</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Even.Better.Routing"></a>
<h2>Even Better Routing</h2>

<p>元記事ではroutingの設定をstructとしてデータモデル化することでより良いルーティングができるよ！っと言っている（と理解した）。今回はスキップ。</p>

<a name="Outputting.a.Web.Log"></a>
<h2>Outputting a Web Log</h2>

<p>Web Applicationのロギングについて。元記事では独自にロガーを実装している。httprouterではこのような共通関数の仕組みを<em>Middleware</em>として実装できる仕組みを提供している。元記事と同じような実装を以下のようにした。</p>

<a name="logger.go"></a>
<h3>logger.go</h3>

<p>基本的な考え方として、Middlewareは各URLへのリクエストに対して行う処理をハンドラとして受け取り、受け取ったハンドラを実行する前または後に処理を記述すればよい。よって、MiddlewareはハンドラとMiddlewareが必要とする情報を引数として受け取るだけで良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/julienschmidt/httprouter&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">logger</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">uri</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">start</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;\&quot;method\&quot;:%q  \&quot;uri\&quot;:%q    \&quot;name\&quot;:%q   \&quot;time\&quot;:%q&quot;</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">uri</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Since</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Logging</span><span class="p">(</span><span class="nx">h</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Handle</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Handle</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">ps</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">h</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">ps</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">logger</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Method</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">Path</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">start</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Middlewareの実装例としては以下を参考にすること。</p>

<ul>
<li><a href="https://github.com/julienschmidt/httprouter#multi-domain--sub-domains">Multi-domain / Sub-domains</a></li>
<li><a href="https://github.com/julienschmidt/httprouter#multi-domain--sub-domains">Basic Authentication</a></li>
<li><a href="https://justinas.org/writing-http-middleware-in-go/">Writing HTTP Middleware in Go</a></li>
</ul>


<a name="Applying.the.Logger.Decorator"></a>
<h2>Applying the Logger Decorator</h2>

<p>上掲の<code>logger.go</code>を組み込むには単純に以下のようにすれば良い。</p>

<a name="main.go"></a>
<h3>main.go</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">Logging</span><span class="p">(</span><span class="nx">Index</span><span class="p">,</span> <span class="s">&quot;index&quot;</span><span class="p">))</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/todos&quot;</span><span class="p">,</span> <span class="nx">Logging</span><span class="p">(</span><span class="nx">TodoIndex</span><span class="p">,</span> <span class="s">&quot;todo-index&quot;</span><span class="p">))</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/todos/:todoId&quot;</span><span class="p">,</span> <span class="nx">Logging</span><span class="p">(</span><span class="nx">TodoShow</span><span class="p">,</span> <span class="s">&quot;todo-show&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<a name="This.Routes.File.is.Crazy.....Let...s.Refactor"></a>
<h2>This Routes File is Crazy … Let’s Refactor</h2>

<p>スキップ。</p>

<a name="Taking.Some.Responsibility"></a>
<h2>Taking Some Responsibility</h2>

<p>これでようやく今回のアプリケーションのボイラーテンプレートが出来たので、各ハンドラをWeb Applicationっぽくしていく。まずは<code>TodoIndex</code>のレスポンスを改善する。現在の状態でレスポンスを詳細に見てみる(curlのオプションに<code>-vvv</code>または<code>-D -</code>というオブションをつけて実行する)と、以下のように出力されているはず。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl --silent localhost:8080/todos -vvv
</span><span class='line'>*   Trying ::1...
</span><span class='line'>* Connected to localhost <span class="o">(</span>::1<span class="o">)</span> port <span class="m">8080</span> <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET /todos HTTP/1.1
</span><span class='line'>&gt; Host: localhost:8080
</span><span class='line'>&gt; User-Agent: curl/7.43.0
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>&lt; Date: Sat, <span class="m">12</span> Mar <span class="m">2016</span> 13:44:09 GMT
</span><span class='line'>&lt; Content-Length: 149
</span><span class='line'>&lt; Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8  <span class="c">## &lt;- コレに注目</span>
</span><span class='line'>&lt;
</span><span class='line'><span class="o">[{</span><span class="s2">&quot;name&quot;</span>:<span class="s2">&quot;Write presentation&quot;</span>,<span class="s2">&quot;completed&quot;</span>:false,<span class="s2">&quot;due&quot;</span>:<span class="s2">&quot;0001-01-01T00:00:00Z&quot;</span><span class="o">}</span>,<span class="o">{</span><span class="s2">&quot;name&quot;</span>:<span class="s2">&quot;Host meetup&quot;</span>,<span class="s2">&quot;completed&quot;</span>:false,<span class="s2">&quot;due&quot;</span>:<span class="s2">&quot;0001-01-01T00:00:00Z&quot;</span><span class="o">}]</span>
</span><span class='line'>* Connection <span class="c">#0 to host localhost left intact</span>
</span></code></pre></td></tr></table></div></figure>


<p>レスポンスのContent-Typeが<code>text/plain; charset=utf-8</code>となっているのが確認できる。今回はJSON APIを作るのが目的なので、<code>application/json; charset=UTF-8</code>としてレスポンスを返したい。なので、以下のようにコードを少し追加する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">TodoIndex</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">todos</span> <span class="o">:=</span> <span class="nx">Todos</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Todo</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&quot;Write presentation&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">Todo</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&quot;Host meetup&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json; charset=UTF-8&quot;</span><span class="p">)</span> <span class="c1">// &lt;- Added</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">)</span> <span class="c1">// &lt;- Added</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">todos</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>// &lt;- Added</code>とコメントしている行が追加されている。直観的にわかると思うけど、レスポンスヘッダにContent-Typeとステータスコードを設定しているだけ。buildしなおしてからcurlでアクセスしてみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>*   Trying ::1...
</span><span class='line'>* Connected to localhost <span class="o">(</span>::1<span class="o">)</span> port <span class="m">8080</span> <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET /todos HTTP/1.1
</span><span class='line'>&gt; Host: localhost:8080
</span><span class='line'>&gt; User-Agent: curl/7.43.0
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>&lt; Content-Type: application/json<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8  <span class="c">## &lt;- コレに注目</span>
</span><span class='line'>&lt; Date: Sat, <span class="m">12</span> Mar <span class="m">2016</span> 13:52:46 GMT
</span><span class='line'>&lt; Content-Length: 149
</span><span class='line'>&lt;
</span><span class='line'><span class="o">[{</span><span class="s2">&quot;name&quot;</span>:<span class="s2">&quot;Write presentation&quot;</span>,<span class="s2">&quot;completed&quot;</span>:false,<span class="s2">&quot;due&quot;</span>:<span class="s2">&quot;0001-01-01T00:00:00Z&quot;</span><span class="o">}</span>,<span class="o">{</span><span class="s2">&quot;name&quot;</span>:<span class="s2">&quot;Host meetup&quot;</span>,<span class="s2">&quot;completed&quot;</span>:false,<span class="s2">&quot;due&quot;</span>:<span class="s2">&quot;0001-01-01T00:00:00Z&quot;</span><span class="o">}]</span>
</span><span class='line'>* Connection <span class="c">#0 to host localhost left intact</span>
</span></code></pre></td></tr></table></div></figure>


<p>レスポンスヘッダが意図したものになっていることが確認できる。</p>

<a name="Wait..Where.is.my.Database."></a>
<h2>Wait, Where is my Database?</h2>

<p>Web Applicationにデータベースはつきもの。ここでは簡易なモックデータベースを使ってデータベースを使った処理を仮実装してみる。</p>

<a name="repo.go"></a>
<h3>repo.go</h3>

<p>モックデータベースの処理は<code>repo.go</code>に記述することにする。ここでは擬似的なCreate/Read/Delete処理を実装している。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">todos</span>     <span class="nx">Todos</span>
</span><span class='line'>  <span class="nx">currentID</span> <span class="kt">int</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">RepoCreateTodo</span><span class="p">(</span><span class="nx">Todo</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&quot;Write presentation&quot;</span><span class="p">})</span>
</span><span class='line'>  <span class="nx">RepoCreateTodo</span><span class="p">(</span><span class="nx">Todo</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&quot;Host meetup&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">RepoFindTodo</span><span class="p">(</span><span class="nx">id</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">Todo</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">t</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">todos</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nx">ID</span> <span class="o">==</span> <span class="nx">id</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">t</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Todo</span><span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">RepoCreateTodo</span><span class="p">(</span><span class="nx">t</span> <span class="nx">Todo</span><span class="p">)</span> <span class="nx">Todo</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">currentID</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">ID</span> <span class="p">=</span> <span class="nx">currentID</span>
</span><span class='line'>  <span class="nx">todos</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">todos</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">t</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">RepoDestroyTodo</span><span class="p">(</span><span class="nx">id</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">t</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">todos</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nx">ID</span> <span class="o">==</span> <span class="nx">id</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">todos</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">todos</span><span class="p">[:</span><span class="nx">i</span><span class="p">],</span> <span class="nx">todos</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Errorf</span><span class="p">(</span><span class="s">&quot;Could not find Todo with id of %d to delete&quot;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Add.ID.to.Todo"></a>
<h2>Add ID to Todo</h2>

<p><code>repo.go</code>ではTodoの項目を探すために<code>ID</code>という概念を利用しているので、データモデルに<code>ID</code>を追加しておく。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Todo</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ID</span>        <span class="kt">int</span>       <span class="s">`json:&quot;id&quot;`</span>
</span><span class='line'>  <span class="nx">Name</span>      <span class="kt">string</span>    <span class="s">`json:&quot;name&quot;`</span>
</span><span class='line'>  <span class="nx">Completed</span> <span class="kt">bool</span>      <span class="s">`json:&quot;completed&quot;`</span>
</span><span class='line'>  <span class="nx">Due</span>       <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&quot;due&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Todos</span> <span class="p">[]</span><span class="nx">Todo</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Update.our.TodoIndex"></a>
<h2>Update our TodoIndex</h2>

<p><code>repo.go</code>の<code>init.go</code>にて初期値を与えるようにし、また、<code>todos</code>はグローバル変数として利用できるようになった（本当は良くない）ので<code>handlers.go</code>の<code>TodoIndex</code>を以下のように修正する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">TodoIndex</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json; charset=UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">todos</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Posting.JSON"></a>
<h2>Posting JSON</h2>

<p>スキップ</p>

<a name="The.Create.endpoint"></a>
<h2>The Create endpoint</h2>

<p>モックデータベースの処理を実装したので、それを利用するエンドポイントを追加する。なお、元記事では<code>RepoCreateTodo</code>を使ったエンドポイントのみを実装しているが、せっかくなので<code>RepoFindTodo</code>と<code>RepoDestroyTodo</code>を使ったエンドポイントも実装する。</p>

<a name="TodoShow"></a>
<h3>TodoShow</h3>

<p>まずは<code>TodoShow</code>から。<code>ps.ByName</code>で対象のIDを受け取りバリデーションを兼ねて<code>strconv.Atoi</code>で変換する。変換したIDが数字でなければ422を返す。知らなかったけど、このようなリクエストの形式としては正しいが意味的に間違っている場合（今回の場合だと数字であるべき箇所に数値(int)に変換できない文字列を含む場合）は<code>422 Unprocessable Entity</code>を返すのが一般的らしい。変換したIDを<code>RepoFindTodo</code>に渡して結果をもらう。空っぽだったら404、何か入っていれば200を返す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">TodoShow</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">ps</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">idParam</span> <span class="o">:=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">ByName</span><span class="p">(</span><span class="s">&quot;todoId&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">idParam</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json; charset=UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="mi">422</span><span class="p">)</span> <span class="c1">// unprocessable entity</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">t</span> <span class="o">:=</span> <span class="nx">RepoFindTodo</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nx">ID</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Name</span> <span class="o">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json; charset=UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusNotFound</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json; charset=UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="TodoCreate"></a>
<h3>TodoCreate</h3>

<p><code>TodoCreate</code>は元記事とほとんど同じだけど、RESTful APIっぽくするために<code>Location</code>をヘッダーに追加している。元記事でも触れているが、<code>io.LimitReader(r.Body, 1048576)</code>は巨大なリクエストを受け取らないようにするため。<code>1048576</code>は1MiB(<a href="https://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%93%E3%83%90%E3%82%A4%E3%83%88">メビバイト</a>)。これもまた知らなかったけど、最近はこっちのほうがモダンなのかな。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">TodoCreate</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">ps</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">todo</span> <span class="nx">Todo</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">body</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">io</span><span class="p">.</span><span class="nx">LimitReader</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">,</span> <span class="mi">1048576</span><span class="p">))</span> <span class="c1">// 1MiB</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">body</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">todo</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json; charset=UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">t</span> <span class="o">:=</span> <span class="nx">RepoCreateTodo</span><span class="p">(</span><span class="nx">todo</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">location</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;http://%s/%d&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Host</span><span class="p">,</span> <span class="nx">t</span><span class="p">.</span><span class="nx">ID</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json; charset=UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Location&quot;</span><span class="p">,</span> <span class="nx">location</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusCreated</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="TodoDelete"></a>
<h3>TodoDelete</h3>

<p>実は<code>DELETE</code>メソッドの処理を作ったことがなかった。というか、Web Applicationを作る機会自体があんまり無いんだけど。削除の場合、特に返却すべき内容は無いので、<code>204 Not Content</code>を返している。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">TodoDelete</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">ps</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">idParam</span> <span class="o">:=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">ByName</span><span class="p">(</span><span class="s">&quot;todoId&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">id</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">idParam</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json; charset=UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">RepoDestroyTodo</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json; charset=UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusNotFound</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="mi">204</span><span class="p">)</span> <span class="c1">// 204 No Content</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Things.We.Didn...t.Do"></a>
<h2>Things We Didn’t Do</h2>

<ul>
<li>Version Control

<ul>
<li>gitとかの話ではなくAPIとしてのバージョンのこと。例えば互換性を破壊するような変更を行うことが予想される場合は、<code>/api/v1/prefix</code>のようなエンドポイントで設定したほうが良いかもしれない。</li>
</ul>
</li>
<li>Authentication

<ul>
<li>パブリックあるいはオープンなAPIで無いのならば、認証は設けたほうが良い。元記事では<a href="http://jwt.io/">JSON web tokens</a>の利用を推奨している。</li>
</ul>
</li>
</ul>


<p>また、元記事では<a href="https://ja.wikipedia.org/wiki/HTTP_ETag">eTags</a>を使ってキャッシュの仕組みを盛り込み、スケーリング可能なアプリケーションの実装を提案している。具体的な実装については以下が参考になりそう（ちゃんと読んでない）。</p>

<ul>
<li><a href="http://www.sanarias.com/blog/115LearningHTTPcachinginGo">Learning HTTP caching in Go</a>

<ul>
<li><a href="https://www.reddit.com/r/golang/comments/2sxlwp/learning_http_caching_in_go/">Redditのスレ</a></li>
</ul>
</li>
<li><a href="http://stackoverflow.com/q/23014106">HTTP ETags and HTTP Redirects</a></li>
</ul>


<a name="What.Else.is.Left."></a>
<h2>What Else is Left?</h2>

<p>他にやるべきこととしては以下が挙げられる。</p>

<ul>
<li>リファクタリング</li>
<li>各々の処理をファイルをパッケージに分割する</li>
<li>テスト</li>
<li>適切なエラーメッセージ

<ul>
<li>これは独自に追加した項目なんだけど、例えば今は<code>strconv.Atoi</code>でエラーが発生した場合にエラーをそのままクライアントにかえしているので、これはやはり適切なエラーメッセージに変えたほうが良い。</li>
</ul>
</li>
</ul>


<a name="L.............-....................................."></a>
<h2>おまけ１ - 同じような処理をまとめる</h2>

<p>ハンドラの処理を実装している<code>handlers.go</code>を眺めていると気づくが、ハンドラの処理の構成は主に以下のようになっている。</p>

<ul>
<li>事前処理: 引数のバリデーションチェック</li>
<li>主処理: モックデータベースを使った処理</li>
<li>事後処理: レスポンスヘッダーと返却するHTTPステータスコードの設定</li>
</ul>


<p>主処理は事前処理にてチェックされた値を受け取るという若干の依存はあるものの、それぞれの関心事は以下のように分けることが出来て、それぞれ分離させて共通化出来そうなことに気づく。</p>

<ul>
<li>事前処理: クライアントからのリクエストの中身に興味がある</li>
<li>主処理: 指定されたTodoのIDを使ったデータベースの操作に興味がある</li>
<li>事後処理: クライアントに返却するレスポンスに興味がある</li>
</ul>


<p>ここでロギング処理をMiddlewareとして実装したことを思い出す。今回の事前処理と事後処理もロギングと同様にMiddlewareとして実装することでコードの重複を減らし、ハンドラの関心事を主処理に専念させることができそうだ。</p>

<a name="decorator.go"></a>
<h3>decorator.go</h3>

<p>事前処理と事後処理を記述する<code>decorator.go</code>というファイルを用意する。やるべきことは<code>handlers.go</code>に記述していた処理をコピペするだけ。多少修正しているが、以下のようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/julienschmidt/httprouter&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">IDShouldBeInt</span><span class="p">(</span><span class="nx">h</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Handle</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Handle</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">CommonHeaders</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">ps</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">idParam</span> <span class="o">:=</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">ByName</span><span class="p">(</span><span class="s">&quot;todoId&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">idParam</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json; charset=UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">h</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">ps</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span> <span class="nx">name</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">CommonHeaders</span><span class="p">(</span><span class="nx">h</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Handle</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Handle</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Logging</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">ps</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;application/json; charset=UTF-8&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">h</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">ps</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span> <span class="nx">name</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>_, err := strconv.Atoi(idParam)</code>では変換された値を捨てている。これは事前処理では変換された値を使わないから。また、見ての通り、ソースのシグネチャというか、基本的な構造は<code>logger.go</code>で実装したものと何も変わらないことに気づくはず。非常にシンプルにコードが書けているし、関数の処理内容もわかりやすくなったと思う。</p>

<p>ただ、これで良いかと言われると、やや苦しいところがある。それは事前処理の中でレスポンスを返却しているところだ。処理の内容からしてここではパラメータが不正であることだけを呼び出し元に通知して良い感じに事後処理に結果を渡すことができればよいのだけど、今の時点では妥協しておく（というか良いやり方を思いつかなかった）。</p>

<a name="handlers.go"></a>
<h3>handlers.go</h3>

<p>上記の通り、事前処理と事後処理をハンドラから取り除いたので<code>handlers.go</code>は以下のようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;io&quot;</span>
</span><span class='line'>  <span class="s">&quot;io/ioutil&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;strconv&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/julienschmidt/httprouter&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Index</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;Welcmoe!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TodoIndex</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">todos</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TodoShow</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">ps</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">id</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">ps</span><span class="p">.</span><span class="nx">ByName</span><span class="p">(</span><span class="s">&quot;todoId&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">t</span> <span class="o">:=</span> <span class="nx">RepoFindTodo</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nx">ID</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Name</span> <span class="o">==</span> <span class="s">&quot;&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusNotFound</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TodoCreate</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">ps</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">todo</span> <span class="nx">Todo</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">body</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nx">ReadAll</span><span class="p">(</span><span class="nx">io</span><span class="p">.</span><span class="nx">LimitReader</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">,</span> <span class="mi">1048576</span><span class="p">))</span> <span class="c1">// 1MiB</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">(</span><span class="nx">body</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">todo</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">t</span> <span class="o">:=</span> <span class="nx">RepoCreateTodo</span><span class="p">(</span><span class="nx">todo</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">location</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;http://%s/%d&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Host</span><span class="p">,</span> <span class="nx">t</span><span class="p">.</span><span class="nx">ID</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;Location&quot;</span><span class="p">,</span> <span class="nx">location</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusCreated</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">TodoDelete</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">ps</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">Params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">id</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">Atoi</span><span class="p">(</span><span class="nx">ps</span><span class="p">.</span><span class="nx">ByName</span><span class="p">(</span><span class="s">&quot;todoId&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">RepoDestroyTodo</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusNotFound</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">).</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">Header</span><span class="p">().</span><span class="nx">Del</span><span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">w</span><span class="p">.</span><span class="nx">WriteHeader</span><span class="p">(</span><span class="mi">204</span><span class="p">)</span> <span class="c1">// 204 No Content</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちょっとすっきりしたけど、処理結果に応じてHTTPステータスコードが変わるため今の時点では主処理から取り除くことが出来ないので、ちょっと中途半端になっている。</p>

<a name="main.go"></a>
<h3>main.go</h3>

<p>それぞれの主処理に応じて用意したMiddlewareを割り当てる。多少は可読性が上がったかも？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/julienschmidt/httprouter&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">router</span> <span class="o">:=</span> <span class="nx">httprouter</span><span class="p">.</span><span class="nx">New</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="nx">Logging</span><span class="p">(</span><span class="nx">Index</span><span class="p">,</span> <span class="s">&quot;index&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/todos&quot;</span><span class="p">,</span> <span class="nx">CommonHeaders</span><span class="p">(</span><span class="nx">TodoIndex</span><span class="p">,</span> <span class="s">&quot;todo-index&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">GET</span><span class="p">(</span><span class="s">&quot;/todos/:todoId&quot;</span><span class="p">,</span> <span class="nx">IDShouldBeInt</span><span class="p">(</span><span class="nx">TodoShow</span><span class="p">,</span> <span class="s">&quot;todo-show&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">POST</span><span class="p">(</span><span class="s">&quot;/todos&quot;</span><span class="p">,</span> <span class="nx">CommonHeaders</span><span class="p">(</span><span class="nx">TodoCreate</span><span class="p">,</span> <span class="s">&quot;todo-create&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">router</span><span class="p">.</span><span class="nx">DELETE</span><span class="p">(</span><span class="s">&quot;/todos/:todoId&quot;</span><span class="p">,</span> <span class="nx">IDShouldBeInt</span><span class="p">(</span><span class="nx">TodoDelete</span><span class="p">,</span> <span class="s">&quot;todo-delete&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:8080&quot;</span><span class="p">,</span> <span class="nx">router</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L........................"></a>
<h2>ここまでのまとめ</h2>

<p>ある程度はそれらしくなったけど、主処理の中でレスポンスヘッダ―を設定していたりするため現状ではやや不満が残る内容になった。これは主処理と事後処理が完全に分断されているためであり次回はその辺りを考慮に入れてリファクタリングを行なう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自分で定義したprimitiveな型を扱う際の注意点]]></title>
    <link href="http://sgykfjsm.github.io/blog/2016/01/25/working-with-userdefined-type/"/>
    <updated>2016-01-25T01:11:59+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2016/01/25/working-with-userdefined-type</id>
    <content type="html"><![CDATA[<p>Goではよく知られているように自分で型(type)を宣言して、任意のfunctionを実装することができる。今回、あるプログラムを実装している時に少しハマったので、経緯と対応策を記録しておく。</p>

<!-- more -->


<a name="L........................"></a>
<h2>ありがち？な失敗</h2>

<p>先述したようにGoでは任意の型を定義して、任意のfunctionを実装できる。タイトルにある<em>自分で定義したprimitiveな型</em>とは以下の様な宣言のこと。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">MyInt</span> <span class="kt">int</span>
</span></code></pre></td></tr></table></div></figure>


<p>例えばこの<code>MyInt</code>に、<em>10より大きければ<code>true</code>を返す</em><code>Over10()</code>を実装し、以下の様に使いたいとする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span> <span class="nx">MyInt</span> <span class="p">=</span> <span class="mi">11</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nx">i</span><span class="p">.</span><span class="nx">Over10</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="s">&quot; is over 10&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="s">&quot; is less than or equal 10&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで、何も考えずに実装してしまうと、以下の様なコードを書いてしまう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="nx">MyInt</span><span class="p">)</span><span class="nx">Over10</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">m</span> <span class="p">&gt;</span> <span class="mi">10</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このfunctionをコンパイルすると、以下の様なエラーが発生する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">prog</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">6</span><span class="p">:</span> <span class="nx">invalid</span> <span class="nx">operation</span><span class="p">:</span> <span class="nx">i</span> <span class="p">&gt;</span> <span class="mi">10</span> <span class="p">(</span><span class="nx">mismatched</span> <span class="nx">types</span> <span class="o">*</span><span class="nx">MyInt</span> <span class="nx">and</span> <span class="kt">int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://play.golang.org/p/uwaedTOJZ1">https://play.golang.org/p/uwaedTOJZ1</a></li>
</ul>


<a name="L......"></a>
<h2>対策</h2>

<p>type <code>MyInt</code>はint型を基礎に持っているから普通に比較できるはずではと思ってしまうが、エラー文言にあるように、int型を基礎にしていても、intではなく<code>MyInt</code>型なのでintとして使うことはできない。ちょっと考えればわかることだ。</p>

<p>ではどうするか？今回の場合だと、対策としては2通りある。</p>

<ol>
<li>比較相手である<code>10</code>を<code>MyInt</code>型として利用する。</li>
<li>1.の逆で、<code>i MyInt</code>から値を取り出し、int型として扱う。</li>
</ol>


<a name="L.....................10...MyInt........................"></a>
<h3>比較相手である10をMyInt型として利用する</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">i</span> <span class="nx">MyInt</span><span class="p">)</span> <span class="nx">Over10</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ten</span> <span class="nx">MyInt</span> <span class="p">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">i</span> <span class="p">&gt;</span> <span class="nx">ten</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>実行例: <a href="https://play.golang.org/p/b17c7k4dxU">https://play.golang.org/p/b17c7k4dxU</a></li>
</ul>


<a name="i.MyInt...........................int.................."></a>
<h3>i MyIntから値を取り出し、int型として扱う</h3>

<p>この場合はちょっと面倒になる。というのも、<code>reflect</code>パッケージを使って、変数の型の情報を取得する必要があるからだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">i</span> <span class="nx">MyInt</span><span class="p">)</span> <span class="nx">Over10</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">ValueOf</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">num</span> <span class="kt">int</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">v</span><span class="p">.</span><span class="nx">IsValid</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">num</span> <span class="p">=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">Int</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">num</span> <span class="p">&gt;</span> <span class="mi">10</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>実行例: <a href="https://play.golang.org/p/6F3zU6Q4-g">https://play.golang.org/p/6F3zU6Q4-g</a></li>
</ul>


<p>まず、与えられた変数に値が入っているかどうかを確認し、入っていれば<code>Int()</code>で取り出す。<code>Int()</code>で取り出した値は<code>int64</code>なので、<code>int</code>に変換しなければならない。</p>

<p>毎回この処理を実装するfunctionに書くのは面倒なので、以下の様なfunctionを用意しておくと良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">i</span> <span class="nx">MyInt</span><span class="p">)</span><span class="nx">ValueInt</span><span class="p">()</span> <span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">ValueOf</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">v</span><span class="p">.</span><span class="nx">IsValid</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">num</span> <span class="p">=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">Int</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>実行例: <a href="https://play.golang.org/p/cMsyxf97aL">https://play.golang.org/p/cMsyxf97aL</a></li>
</ul>


<hr />

<p>primitiveな型を利用した型を定義するときには、少々面倒だが、上記の<code>ValueInt</code>を実装することを忘れないようにしたい。</p>

<p>しかし、実際、みんなこんな風に実装しているのだろうか。さすがに面倒すぎる気がするなぁ。本当はもっと良い方法があるんだろうか？本音としては、このくらい、compileとか<code>go generate</code>的な何かでで良い感じに対応していただきたいのだけど、そういうわけにはいかないのだろうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goでfunctionが実行された順番を追いかける]]></title>
    <link href="http://sgykfjsm.github.io/blog/2016/01/20/golang-function-tracing/"/>
    <updated>2016-01-20T00:33:25+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2016/01/20/golang-function-tracing</id>
    <content type="html"><![CDATA[<p>Goはgo routineを使って並行処理を容易に書くことができるが、下手に書くと色々なfunctionが相互に入り乱れて処理が追いづらいときがある。ここではGoでfunctionをトレースする方法をメモしておく。</p>

<!-- more -->


<p>結論から言えば、<code>runtime.Caller</code>を使えば良い。なお、<code>debug.PrintStack</code>でstack traceを出力することができるが、標準エラー出力となるのでちょっと使いづらい。しかし、ただコンソールで出力したいだけなら、<code>debug.PrintStack</code>のほうが簡単であるし、これ以降を読む必要は無い。</p>

<ul>
<li><a href="https://golang.org/pkg/runtime/#Caller">func Caller</a></li>
<li><a href="https://golang.org/pkg/runtime/debug/#PrintStack">func PrintStack</a></li>
</ul>


<a name="L.................."></a>
<h2>簡単な使い方</h2>

<p><code>runtime.Caller</code>とは何なのかはマニュアルを参照すべきだけど、簡単に言うと、引数の数値に応じて<code>Caller</code>が呼び出された時点での呼び出し元の情報を提供してくれるfunctionと言える。例えば、以下のような処理を想定してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;runtime&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">doCaller</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">programCounter</span><span class="p">,</span> <span class="nx">sourceFileName</span><span class="p">,</span> <span class="nx">sourceFileLineNum</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Caller</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;programCounter: %v\n&quot;</span><span class="p">,</span> <span class="nx">programCounter</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;souruntime: %s\n&quot;</span><span class="p">,</span> <span class="nx">sourceFileName</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;sourceFileLineNum: %d\n&quot;</span><span class="p">,</span> <span class="nx">sourceFileLineNum</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;ok: %t\n&quot;</span><span class="p">,</span> <span class="nx">ok</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">callCaller</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doCaller</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">callCaller</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://play.golang.org/p/X_tDUvfR7s">https://play.golang.org/p/X_tDUvfR7s</a></p>

<p>上記の場合、処理は<code>main</code> -> <code>callCaller</code> -> <code>doCaller</code>の順で実行され、この順番で<em>goroutineのstack</em>にfunctionが積み上がる（正確には<code>main</code>の前に<code>runtime.main</code>と<code>runtime.goexit</code>が呼び出されているがここでは省略する）。<code>runtime.Caller</code>の引数は<code>skip int</code>と定義されているが、イメージとしては配列のインデックスみたいな感じで、stackの上から何番目の情報を取得するか、を指定することができる。上記の場合、<code>1</code>を指定しているので、<code>callCaller</code>の情報を取得することができる。結果は以下の通り。なんかタイムスタンプがおかしい気がするが、気にしない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">programCounter</span><span class="p">:</span> <span class="mi">132352</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">souruntime</span><span class="p">:</span> <span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox627002569</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">sourceFileLineNum</span><span class="p">:</span> <span class="mi">17</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">ok</span><span class="p">:</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>変数名から何となく推測できると思うけど、<code>runtime.Caller</code>の返り値の１つ目はプログラムカウンター、2つ目がビルドされたソースファイル名（実行ファイル名では無いことに注意）、3つ目はソースファイル内での呼びだされた位置、4つ目は情報が取得できたか否かを示すbooleanとなっている。</p>

<p>これだけだと、どの関数から呼ばれたか？がわからないので、もう少し処理を追加してみる。使うfunctionは<code>FuncForPC</code>だ。</p>

<ul>
<li><a href="https://golang.org/pkg/runtime/#FuncForPC">FuncForPC</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;runtime&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">doCaller</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">programCounter</span><span class="p">,</span> <span class="nx">sourceFileName</span><span class="p">,</span> <span class="nx">sourceFileLineNum</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Caller</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;programCounter: %v\n&quot;</span><span class="p">,</span> <span class="nx">programCounter</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;souruntime: %s\n&quot;</span><span class="p">,</span> <span class="nx">sourceFileName</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;sourceFileLineNum: %d\n&quot;</span><span class="p">,</span> <span class="nx">sourceFileLineNum</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;ok: %t\n&quot;</span><span class="p">,</span> <span class="nx">ok</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">println</span><span class="p">(</span><span class="s">&quot;-----&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fn</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">FuncForPC</span><span class="p">(</span><span class="nx">programCounter</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Function Name: %s\n&quot;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">Name</span><span class="p">())</span>
</span><span class='line'>  <span class="nx">fileName</span><span class="p">,</span> <span class="nx">fileLine</span> <span class="o">:=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">FileLine</span><span class="p">(</span><span class="nx">programCounter</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;FileName:%s, FileLine: %d\n&quot;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">,</span> <span class="nx">fileLine</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">splitedFnName</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Split</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">Name</span><span class="p">(),</span> <span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">packageName</span> <span class="o">:=</span> <span class="nx">splitedFnName</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">callerFuncName</span> <span class="o">:=</span> <span class="nx">splitedFnName</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;packageName: %s\n&quot;</span><span class="p">,</span> <span class="nx">packageName</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;functionName: %s\n&quot;</span><span class="p">,</span> <span class="nx">callerFuncName</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">callCaller</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doCaller</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">callCaller</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://play.golang.org/p/sFMnwYTHYF">https://play.golang.org/p/sFMnwYTHYF</a></p>

<p>結果は以下の通り。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">programCounter</span><span class="p">:</span> <span class="mi">134432</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">souruntime</span><span class="p">:</span> <span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox246241909</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">sourceFileLineNum</span><span class="p">:</span> <span class="mi">32</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">ok</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'><span class="o">-----</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">Function</span> <span class="nx">Name</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">callCaller</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">FileName</span><span class="p">:</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox246241909</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">,</span> <span class="nx">FileLine</span><span class="p">:</span> <span class="mi">33</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">packageName</span><span class="p">:</span> <span class="nx">main</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">functionName</span><span class="p">:</span> <span class="nx">callCaller</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>FuncForPC</code>は引数で受け取ったプログラムカウンターの詳細な情報を返してくれる。見ての通り、<code>Caller</code>で取得したプログラムカンターから呼び出し元のfunction名、ファイル情報諸々を取得することができる。</p>

<p>このように、<code>Caller</code>と<code>FuncForPC</code>を使うことで、ある関数がどこから呼び出されたのかを知ることができる。</p>

<a name="L......1........................"></a>
<h2>もう1歩踏み込んでみる</h2>

<p>実際にデバッグする際には、最初のエントリーポイントからエラーが発生したfunctionまでを順に辿りたいことある。上記の<code>doCaller</code>を全ての関数に<code>defer</code>で登録しておけば出来なくはないが、そんなことはしたくないはず。通常は<code>log.Fatal</code>などでプログラムを終了させる直前とかに呼び出し情報を取得できるようにしておきたいはず。要は呼び出し情報をまとめて取得して、良い感じに扱いたいのだ。</p>

<p>とても安直な発想だが、<code>Caller</code>の引数を1つずつインクリメントしてたどる方法をここでは試してみる。例えば以下の様な感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;regexp&quot;</span>
</span><span class='line'>  <span class="s">&quot;runtime&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">re</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nx">MustCompile</span><span class="p">(</span><span class="s">`^(\S.+)\.(\S.+)$`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">CallerInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">PackageName</span>  <span class="kt">string</span>
</span><span class='line'>  <span class="nx">FunctionName</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">FileName</span>     <span class="kt">string</span>
</span><span class='line'>  <span class="nx">FileLine</span>     <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Dump</span><span class="p">()</span> <span class="p">(</span><span class="nx">callerInfo</span> <span class="p">[]</span><span class="o">*</span><span class="nx">CallerInfo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">pc</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Caller</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// https://golang.org/pkg/runtime/#Caller</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">fn</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">FuncForPC</span><span class="p">(</span><span class="nx">pc</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fileName</span><span class="p">,</span> <span class="nx">fileLine</span> <span class="o">:=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">FileLine</span><span class="p">(</span><span class="nx">pc</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">_fn</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nx">FindStringSubmatch</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">Name</span><span class="p">())</span>
</span><span class='line'>      <span class="nx">callerInfo</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">callerInfo</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">CallerInfo</span><span class="p">{</span>
</span><span class='line'>          <span class="nx">PackageName</span><span class="p">:</span>  <span class="nx">_fn</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>          <span class="nx">FunctionName</span><span class="p">:</span> <span class="nx">_fn</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class='line'>          <span class="nx">FileName</span><span class="p">:</span>     <span class="nx">fileName</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">FileLine</span><span class="p">:</span>     <span class="nx">fileLine</span><span class="p">,</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">info</span> <span class="o">:=</span> <span class="nx">Dump</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">info</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">v</span> <span class="o">:=</span> <span class="nx">info</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%02d: %s.%s@%s:%d\n&quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span><span class="p">.</span><span class="nx">PackageName</span><span class="p">,</span> <span class="nx">v</span><span class="p">.</span><span class="nx">FunctionName</span><span class="p">,</span> <span class="nx">v</span><span class="p">.</span><span class="nx">FileName</span><span class="p">,</span> <span class="nx">v</span><span class="p">.</span><span class="nx">FileLine</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">bar</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://play.golang.org/p/iED00tQ9EW">https://play.golang.org/p/iED00tQ9EW</a></p>

<p>上記を実行すると、以下の様にスタックの下から、つまりfunctionが実行された順番に表示される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="mo">04</span><span class="p">:</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">goexit</span><span class="err">@</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="k">go</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">runtime</span><span class="o">/</span><span class="nx">asm_amd64p32</span><span class="p">.</span><span class="nx">s</span><span class="p">:</span><span class="mi">1133</span>
</span><span class='line'><span class="mo">03</span><span class="p">:</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">main</span><span class="err">@</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="k">go</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">runtime</span><span class="o">/</span><span class="nx">proc</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">120</span>
</span><span class='line'><span class="mo">02</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">main</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox266928852</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">55</span>
</span><span class='line'><span class="mo">01</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">bar</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox266928852</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">51</span>
</span><span class='line'><span class="mo">00</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">foo</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox266928852</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L......"></a>
<h2>余談</h2>

<p><code>Caller</code>は<em>goroutineのstackに積み上げられた情報</em>を出力するため、対象の処理に<code>go xxx()</code>や<code>go func</code>が含まれていると、上記のように必ずしも<code>runtime.goexit</code>-><code>runtime.main</code>の順番で始まるとは限らないことに注意すること。例えば、以下の様な感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span><span class='line'>  <span class="nx">wg</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">bar</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">wg</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>  <span class="nx">wg</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://play.golang.org/p/WZE3lItf8h">https://play.golang.org/p/WZE3lItf8h</a></p>

<p>上記の結果は以下の通りで、<code>runtime.main</code>が無いことがわかる。これは<code>go func</code>が<code>func main</code>とは異なるgoroutineで処理されていることを示している（と思う）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="mo">03</span><span class="p">:</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">goexit</span><span class="err">@</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="k">go</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">runtime</span><span class="o">/</span><span class="nx">asm_amd64p32</span><span class="p">.</span><span class="nx">s</span><span class="p">:</span><span class="mi">1133</span>
</span><span class='line'><span class="mo">02</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">func1</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox306261972</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">59</span>
</span><span class='line'><span class="mo">01</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">bar</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox306261972</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">52</span>
</span><span class='line'><span class="mo">00</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">foo</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox306261972</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">43</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、次の場合は同じ関数をclosureでラップせずにgoroutineとして起動した場合。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">bar</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://play.golang.org/p/CcNp-Do9mb">https://play.golang.org/p/CcNp-Do9mb</a></p>

<p>結果は以下の様になる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="mo">02</span><span class="p">:</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">goexit</span><span class="err">@</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="k">go</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">runtime</span><span class="o">/</span><span class="nx">asm_amd64p32</span><span class="p">.</span><span class="nx">s</span><span class="p">:</span><span class="mi">1133</span>
</span><span class='line'><span class="mo">01</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">bar</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox385327178</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">52</span>
</span><span class='line'><span class="mo">00</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">foo</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox385327178</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">43</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>go func</code>の場合と違って、closureを経由せずに、<code>bar</code>以降の処理を別のgoroutineとして起動させていることがわかる。</p>

<p>ちゃんとわかっている人からすれば当然のことに思われるだろうが、自分のようなGo初心者だと出力内容を見て、アレ？と思うかもしれないので、goroutineを使う処理のstack情報を取得する場合は注意すること。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ベンダリングのためのgomvpkgとgbについて考えてみる]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/11/03/compare-gomvpkg-with-gb/"/>
    <updated>2015-11-03T20:02:45+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/11/03/compare-gomvpkg-with-gb</id>
    <content type="html"><![CDATA[<p>GO言語には多言語にあるようなパッケージマネジメントの仕組みが(公式には)サポートされていない。<a href="https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit">GOv1.5では実験的に導入されている</a>が、例えばJavaで言うmaven、Pythonで言うpipなどのような共通として用いられているツールなどは無く、基本的には以下の3つのやり方が主流だと思われる。</p>

<ul>
<li>依存するパッケージを自分のリポジトリに取り込むVendoring</li>
<li>3rd partyツールによるRevison指定などといった擬似的なパッケージマネジメント</li>
<li>そもそもパッケージマネジメントをしない</li>
</ul>


<p>自分の開発では、業務も含めて、あまり外部パッケージに依存するようなことはあまり無いが、もしやるなら1つ目のVendoringになると思う。で、今回はVendoringを行なう際に便利だと思われる2つのツール、<code>gomvpkg</code>と<code>gb</code>を試してみる。</p>

<!-- more -->


<a name="gomvpkg........."></a>
<h2>gomvpkgの概要</h2>

<p><code>gomvpkg</code>は公式に提供されているツールであり、その名称から想像できるように、パッケージを移動させるツールだ。<code>gomvpkg</code>の実体は<code>golang.org/x/tools/refactor/rename</code>によるリファクタリングである。</p>

<ul>
<li><a href="https://godoc.org/golang.org/x/tools/refactor/rename">golang.org/x/tools/refactor/rename</a></li>
</ul>


<p>使い方はシンプルで以下の様に実行すれば良い。詳細は<code>gomvpkg -help</code>で確認されたし。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gomvpkg -from ${original_package_name} -to ${post_moved_package_name}</span></code></pre></td></tr></table></div></figure>


<p>このコマンドを実行する場合、注意することは以下の通り。</p>

<ul>
<li><code>-from</code>と<code>-to</code>の引数は物理的なディレクトリパスではなく、ソースコードファイルに記述する<code>import</code>につづくパッケージ名であること</li>
<li>移動後のパッケージが配置されるディレクトリは事前に存在してはいけない</li>
<li>移動後のパッケージが配置されるディレクトリの親ディレクトリが存在していること</li>
</ul>


<p>普通の<code>mv</code>コマンドと同じように使うとエラーが頻発して困るので注意されたし。</p>

<a name="gomvpkg........."></a>
<h3>gomvpkgの難点</h3>

<p><code>gomvpkg</code>は<code>$GOPATH</code>以下をスキャンし、移動対象のパッケージの依存関係を解決し、指定の位置にパッケージを移動する(コピーではない)。また、移動対象のパッケージをimportしているファイルがあれば、import pathを書き換えてくれる。</p>

<p>これだけを述べるとなんか便利そうだが、実際は意外とクセモノだったりする。まず、&#8221;依存性を解決する&#8221;という点について。実際に<code>gomvpkg</code>を実行すると、以下のようなエラーが出る場合がある。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Users/sgyk/local/script/golang/src/github.com/Sirupsen/logrus/examples/hook/hook.go:5:2: could not import gopkg.in/gemnasium/logrus-airbrake-hook.v2 (cannot find package "gopkg.in/gemnasium/logrus-airbrake-hook.v2" in any of:
</span><span class='line'>        /usr/local/opt/go/libexec/src/gopkg.in/gemnasium/logrus-airbrake-hook.v2 (from $GOROOT)
</span><span class='line'>        /Users/sgyk/local/script/golang/src/gopkg.in/gemnasium/logrus-airbrake-hook.v2 (from $GOPATH))
</span><span class='line'>/Users/sgyk/local/script/golang/src/github.com/Sirupsen/logrus/examples/hook/hook.go:12:16: undeclared name: airbrake
</span><span class='line'>gomvpkg: couldn't load packages due to errors: github.com/Sirupsen/logrus/examples/hook.</span></code></pre></td></tr></table></div></figure>


<p>上記は簡単に言うと、移動対象のパッケージにおいて<code>gopkg.in/gemnasium/logrus-airbrake-hook.v2</code>が参照できないから<code>gomvpkg</code>に失敗したということ。なので、これを解決するには<code>go get</code>で対象のパッケージを取得してこなければならない。</p>

<p>次に&#8221;<code>$GOPATH</code>以下をスキャン&#8221;という点と&#8221;import pathを書き換える&#8221;という点について。おそらく、<code>gomvpkg</code>を実行する場合、対象プロジェクト(言い換えると移動先のプロジェクト)内のファイルの<code>import</code>だけを書き換えることを期待しているんじゃないかと思う。少なくとも自分はそうだった。しかし、実際には<code>$GOPATH</code>内すべてをスキャンするため、対象となるimport pathはすべて書き換えられてしまう。実際に<code>gomvpkg</code>を実行すると、以下の様な出力をみるはず。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Renamed 6 occurrences in 1 file in 1 package.
</span><span class='line'>Renamed 11 occurrences in 1 file in 1 package.
</span><span class='line'>Renamed 16 occurrences in 1 file in 1 package.
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>これは実際のところ、かなり怖い。なぜならどのプロジェクトのファイルが書き換えられてしまったのか、詳細が把握できないからだ。そのため、意図しないファイル改変を行ってしまう可能性が高い。ちなみに運が悪い（？）と、上記の出力がなされず、別の出力がなされてしまう場合がある。</p>

<p>まぁ冷静に考えていると、どのプロジェクトのファイルだけを改変するかという指定はできないので、この挙動は仕方ないのかもしれないが、危ういことには変わりない。</p>

<p><code>gomvpkg</code>はGOの公式ドキュメントでベンダリングにおける有用なツールとして<a href="https://golang.org/doc/faq#get_version">紹介されている</a>が、実際はかなり危険なので使う際は注意が必要だと思う。</p>

<a name="gb............"></a>
<h2>gbについて</h2>

<p><code>gomvpkg</code>がリファクタリングのためのツールであるのに対し、<code>gb</code>はベンダリングのためのツールであり、公式には&#8221;A project based build tool for the Go programming language.&ldquo;と紹介されている。</p>

<p><code>gb</code>について簡単にいうと、既存のGOプロジェクトとは隔離された世界でベンダリングを行なうためのツールと言える。言い換えると、<code>gb</code>はプロジェクトベースで依存パッケージをベンダリングする。また、<code>gb</code>は既存のgo toolsを置き換えるものではない。</p>

<p>特徴的な点としては、<code>$GOPATH</code>配下にプロジェクトを作ってはいけないというルールがあり、関連パッケージは<code>go get</code>ではなく<code>git clone</code>で取得しなければならない点だ。この特徴については捉えようによっては良い点がある。たとえば、GO初心者が参画する場合、<code>$GOPATH</code>にハマることもないし、<code>go get</code>について知る必要がないため、学習コストを一定度下げることができる（といっても大したコストではないが）。しかし、逆に言えば、gbのお作法を学ぶ必要がある。</p>

<a name="gb............"></a>
<h2>gbのお作法</h2>

<p><code>gb</code>はプロジェクトベースツールなので、プロジェクトごとにディレクトリを設けなければならない。また、<code>src</code>ディレクトリや<code>bin</code>ディレクトリはプロジェクトのルートディレクトリの直下に設けなければならない。依存するパッケージはプロジェクトのルートディレクトリ直下に<code>vender/src</code>以下に格納しなければならない。</p>

<p>基本的には上記のディレクトリ配置のお作法を守っていれば、通常のGO開発と同じようにすすめることが出来るはず。</p>

<a name="gb........."></a>
<h2>gbの難点</h2>

<p><code>gb</code>は<code>$GOPATH</code>とは違う世界で開発しなければならないが、そのためにエディタの支援を受けられない場合がある。</p>

<p>例えば、vimではソースコード中で<code>import</code>されているパッケージからコマンド補完をすることがプラグインによって可能だが、プロジェクトルートに格納されているが<code>$GOPATH</code>以下にはないパッケージの場合、エディタがエラーとする場合がある。その場合は問題となっているパッケージを<code>go get</code>すれば解決するが、<code>gb</code>での<code>git clone</code>と<code>go get</code>での二度手間が発生してしまう。</p>

<hr />

<p>以上、ベンダリングのためのツールとして<code>gomvpkg</code>と<code>gb</code>の両方を見たが、どちらもそれなりに難点があり、どちらも他人に進めることはできないなーと個人的には思う。とはいえ、ある程度の大規模な開発を行なうのであれば、<code>gb</code>が良いかな―とは思う。ただ、なんとなくGの世界では外部パッケージに頼らないようにすべきみたいな印象を持っているので、GO開発者はパッケージ管理にあんまり興味ないのかなーと思ったり。一応、v1.5からは実験的に<code>go tool</code>でのベンダリングサポートが導入されているようだけど、パッケージ管理という面から考えると(例えばバージョンのアップデートとダウングレードの容易さなど)、まだまだ貧弱だな―とおもうので、なるべく外部パッケージに頼らないほうが良いのかなと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ginkgo 基本的な使い方編]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/09/24/ginkgo-getting-start/"/>
    <updated>2015-09-24T22:51:20+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/09/24/ginkgo-getting-start</id>
    <content type="html"><![CDATA[<p>最近、golangでプログラムを書く機会が増えてきた。golangでTDDをする場合、標準の<a href="https://golang.org/pkg/testing/">testingパッケージ</a>を使うのが一般的なようだ。ただし、標準パッケージだけだとちょっとテストが書きづらいので、<a href="https://github.com/stretchr/testify">stretchr/testify</a>を使っている人も多いと思う。</p>

<p>関数のテストをしたいときは標準パッケージなりtestifyを使うなりで良いのだけど、振る舞いをテストしたい、つまりBDDをしたいなーと思った時にちょっと調べらたら<a href="http://onsi.github.io/ginkgo/">Ginkgo</a>というのが良さ気だったので、ちょっと試してみる。</p>

<!-- more -->


<a name="Ginkgo......"></a>
<h2>Ginkgoとは</h2>

<p>表現力があって包括的なテストを効率良く書くためのBDDスタイルのテストフレームワーク。<a href="http://github.com/onsi/gomega">Gomega</a>というMatcherライブラリと併用すると良い感じらしいけど、単体でも充分使えるらしい。</p>

<p>今回はドキュメントに従い、GinkgoだけでなくGomegaもインストールした。</p>

<a name="L.................."></a>
<h2>インストール</h2>

<p><code>go get</code>するだけ。ginkgoの実行バイナリが<code>${GOPATH}/bin</code>に、ソースコードはgomegaとともに<code>$GOPATH/src/github.com/onsi</code>にインストールされていることが確認できる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go get github.com/onsi/ginkgo/ginkgo
</span><span class='line'>$ go get github.com/onsi/gomega
</span><span class='line'>$ ls -l $GOPATH/bin
</span><span class='line'>...
</span><span class='line'>-rwxr-xr-x   1 sgyk  staff  11747788  9 24 23:00 ginkgo*
</span><span class='line'>$ ls -l $GOPATH/src/github.com/onsi
</span><span class='line'>...
</span><span class='line'>drwxr-xr-x  16 sgyk  staff  544  9 24 23:00 ginkgo/
</span><span class='line'>drwxr-xr-x  17 sgyk  staff  578  9 24 23:01 gomega/</span></code></pre></td></tr></table></div></figure>


<a name="L........."></a>
<h2>始め方</h2>

<p>こんなかんじで<code>ginkgo bootstrap</code>をすると、テストスイートを生成してくれる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir ginkgo-study
</span><span class='line'>$ cd $_
</span><span class='line'>$ ginkgo bootstrap
</span><span class='line'>Generating ginkgo test suite bootstrap for ginkgo_study in:
</span><span class='line'>        ginkgo_study_suite_test.go
</span><span class='line'>$ cat ginkgo_study_suite_test.go
</span><span class='line'>package ginkgo_study_test
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>        . "github.com/onsi/ginkgo"
</span><span class='line'>        . "github.com/onsi/gomega"
</span><span class='line'>
</span><span class='line'>        "testing"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>func TestGinkgoStudy(t *testing.T) {
</span><span class='line'>        RegisterFailHandler(Fail)
</span><span class='line'>        RunSpecs(t, "GinkgoStudy Suite")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>自動生成されたファイルは<code>ginkgo</code>でテストを走らせることができるし、Ginkgoは標準パッケージであるtestingにフックしているので、<code>go test</code>で実行させることも出来る。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ginkgo
</span><span class='line'>Running Suite: GinkgoStudy Suite
</span><span class='line'>================================
</span><span class='line'>Random Seed: 1443106503
</span><span class='line'>Will run 0 of 0 specs
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Ran 0 of 0 Specs in 0.000 seconds
</span><span class='line'>SUCCESS! -- 0 Passed | 0 Failed | 0 Pending | 0 Skipped PASS
</span><span class='line'>
</span><span class='line'>Ginkgo ran 1 suite in 3.234616229s
</span><span class='line'>Test Suite Passed</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go test
</span><span class='line'>Running Suite: GinkgoStudy Suite
</span><span class='line'>================================
</span><span class='line'>Random Seed: 1443106514
</span><span class='line'>Will run 0 of 0 specs
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Ran 0 of 0 Specs in 0.000 seconds
</span><span class='line'>SUCCESS! -- 0 Passed | 0 Failed | 0 Pending | 0 Skipped PASS
</span><span class='line'>ok      github.com/sgykfjsm/ginkgo-study        0.077s</span></code></pre></td></tr></table></div></figure>


<a name="L..................................................."></a>
<h3>自動生成されたテストスイートの確認</h3>

<p>まずは１行目。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package ginkgo_study_test</span></code></pre></td></tr></table></div></figure>


<p>このパッケージ名は<code>ginkgo bootstrap</code>が実行されたディレクトリ名を元に設定されている。今回は<code>ginkgo-study</code>というディレクトリの中で実行したので、<code>ginkgo_study_test</code>となっている。もちろん敢えて<code>ginkgo_study</code>など、別名に修正することは可能だが、テストコードと実コードとの切り分けの観点からすると、このままで良いだろう。</p>

<p>続いて3行目から8行目について。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import (
</span><span class='line'>        . "github.com/onsi/ginkgo"
</span><span class='line'>        . "github.com/onsi/gomega"
</span><span class='line'>
</span><span class='line'>        "testing"
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>ドットインポートを使うことでginkgoとgomegaをtop levelでインポート、つまり修飾子なしで各パッケージの関数を使えるようにしている。詳しくはSOの<a href="http://stackoverflow.com/a/6478990">What does the &lsquo;.&rsquo; (dot or period) in a go import statement do?の回答</a>と公式ドキュメントの<a href="https://golang.org/ref/spec#Import_declarations">Import declarations</a>を参照のこと。</p>

<p>ドットインポートをしたくない場合は、bootstrap実行時にオプション<code>--nodot</code>をつけることで回避できる。</p>

<p>では最後に自動生成されたテスト関数を確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func TestGinkgoStudy(t *testing.T) {
</span><span class='line'>        RegisterFailHandler(Fail)
</span><span class='line'>        RunSpecs(t, "GinkgoStudy Suite")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>TestGinkgoStudy</code>はもちろんただの関数名。引数に<code>t *testing.T</code>があることからわかるように<code>go test</code>でこの関数を実行することが出来る。</p>

<p>11行目の<code>RegisterFailHandler</code>は、Ginkgoの<code>Fail</code>関数を引数にすることで、テストが失敗した際にGomegaへGinkgoの<code>Fail</code>関数を渡している。この<code>RegisterFailHandler</code>はGinkgoとGomegaの間の唯一の接点となっている。</p>

<p>12行目の<code>RunSpec</code>でテストのスペック、つまりテストの内容を設定する。</p>

<p>ドキュメントに沿って細かく見ていったけど、全体的に難しいことはあまり無いように見える。Ginkgo(に限らずBDD全般がそうだと思うけど)ではテストをどう実装するか、よりもどのようにテストを設計するかに注力しやすくなっている。</p>

<a name="L.............................."></a>
<h2>テストスペックを作る</h2>

<p>テストスペックはテストスイートと同様にコマンドで自動生成出来る。と言っても、雛形だけど。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ginkgo generate ginkgo_study
</span><span class='line'>Generating ginkgo test for GinkgoStudy in:
</span><span class='line'>  ginkgo_study_test.go
</span><span class='line'>
</span><span class='line'>$ cat ginkgo_study_test.go
</span><span class='line'>package ginkgo_study_test
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>        . "github.com/sgykfjsm/ginkgo-study"
</span><span class='line'>
</span><span class='line'>        . "github.com/onsi/ginkgo"
</span><span class='line'>        . "github.com/onsi/gomega"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>var _ = Describe("GinkgoStudy", func() {
</span><span class='line'>
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p><code>ginkgo generate</code>にパッケージ名を渡せば良い。</p>

<a name="L..................................................."></a>
<h3>自動生成されたテストスペックの確認</h3>

<p>１行目については特に言うことはないと思うけど、<code>ginkgo generate</code>の引数が設定される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package ginkgo_study_test</span></code></pre></td></tr></table></div></figure>


<p>3行目から7行目にかけてはテストスイートと違いがある。1つはテスト対象のパッケージが設定されていること、もう1つはtestingパッケージがimportされていないこと。前者については特に疑問はないと思うけど、後者についてはちょっと違和感があるかもしれない。というのも、一般的にgolangを使ったプログラム開発では、テストコードは<code>xxx_test.go</code>というネーミングが推奨されており、そのファイル内ではtestingパッケージをimportすることがほとんどだが、これはそういった慣習と異なっている。まぁ慣れの問題かもしれないが、ginkgoを使ったテストコードだということを知らないと違和感があると思う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import (
</span><span class='line'>        . "github.com/sgykfjsm/ginkgo-study"
</span><span class='line'>
</span><span class='line'>        . "github.com/onsi/ginkgo"
</span><span class='line'>        . "github.com/onsi/gomega"
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>以降のコードは&#8221;コンテナ&#8221;と捉えることができ、スペックを記述(=格納)するクロージャとなる。開発者はこのコンテナの中にスペックを記述することになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var _ = Describe("GinkgoStudy", func() {
</span><span class='line'>
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>ところで、<code>var _ = ...</code>という記述は今回初めて見かけた。ドキュメントによると、<code>var _ = ...</code>と書くことで、<code>func init(){}</code>無しにトップレベルで(つまりは初期処理として)<code>Describe</code>が評価されることができるらしい。</p>

<a name="L.............................."></a>
<h2>テストスペックを書く</h2>

<p>では実際にテストスペックを書いてみる。今回は以下の様なモデルと、その振る舞いを書いた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package ginkgo_study
</span><span class='line'>
</span><span class='line'>type Grade struct {
</span><span class='line'>  Subject   string
</span><span class='line'>  Score     int
</span><span class='line'>  Mandatory bool
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func (g *Grade) IsPass() bool {
</span><span class='line'>  if g.Score &gt; 60 {
</span><span class='line'>      return true
</span><span class='line'>  }
</span><span class='line'>  return false
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>…まぁこれについては特にいうことは無いと思う。つぎに、対応するスペックを以下のようにした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package ginkgo_study_test
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>  . "github.com/sgykfjsm/ginkgo-study"
</span><span class='line'>
</span><span class='line'>  . "github.com/onsi/ginkgo"
</span><span class='line'>  . "github.com/onsi/gomega"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>var _ = Describe("GinkgoStudy", func() {
</span><span class='line'>
</span><span class='line'>  var (
</span><span class='line'>      goodGrade Grade
</span><span class='line'>      badGrade  Grade
</span><span class='line'>  )
</span><span class='line'>
</span><span class='line'>  BeforeEach(func() {
</span><span class='line'>      goodGrade = Grade{
</span><span class='line'>          Subject:   "Math",
</span><span class='line'>          Score:     61,
</span><span class='line'>          Mandatory: true,
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      badGrade = Grade{
</span><span class='line'>          Subject:   "History",
</span><span class='line'>          Score:     60,
</span><span class='line'>          Mandatory: false,
</span><span class='line'>      }
</span><span class='line'>  })
</span><span class='line'>
</span><span class='line'>  Describe("Criteria of pass or not", func() {
</span><span class='line'>      Context("With more than 60", func() {
</span><span class='line'>          It("should be passed", func() {
</span><span class='line'>              Expect(goodGrade.IsPass()).To(Equal(true))
</span><span class='line'>          })
</span><span class='line'>      })
</span><span class='line'>
</span><span class='line'>      Context("With less than 60", func() {
</span><span class='line'>          It("should be failed", func() {
</span><span class='line'>              Expect(badGrade.IsPass()).To(Equal(false))
</span><span class='line'>          })
</span><span class='line'>      })
</span><span class='line'>  })
</span><span class='line'>
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<a name="L.............................."></a>
<h3>テストスペックの解説</h3>

<p>先にも説明したように、開発者は<code>Describe</code>のクロージャで表現されたコンテナの中にスペックを書けば良い。</p>

<p><code>BeforeEach</code>はいわゆる<code>setup</code>にあたる処理。スペックが実行される度に、<code>BeforeEach</code>で定義した&#8221;状態&#8221;が作られる。また、ここで定義した&#8221;状態&#8221;は後述する<code>It</code>の中で使うことが出来る。</p>

<p><code>Describe</code>と<code>Context</code>を使って、スペックの内容を表現豊かに記述することができ、<code>It</code>でスペックを指定する。<code>BeforeEach</code>と<code>It</code>で&#8221;状態&#8221;を共有するためには、コンテナの中のトップレベルで変数を定義すれば良い。</p>

<p><code>It</code>の中で使っている<code>Expect</code>はGomega由来のもの。これを使って評価したい内容を記述すれば良い。</p>

<a name="L......................................."></a>
<h2>テストスペックを実行する。</h2>

<p>このテストスペックを実行してみる。実行方法は先述の通り、普通に<code>go test</code>すれば良い。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go test -v -cover
</span><span class='line'>=== RUN TestGinkgoStudy
</span><span class='line'>Running Suite: GinkgoStudy Suite
</span><span class='line'>================================
</span><span class='line'>Random Seed: 1443114232
</span><span class='line'>Will run 2 of 2 specs
</span><span class='line'>
</span><span class='line'>••
</span><span class='line'>Ran 2 of 2 Specs in 0.000 seconds
</span><span class='line'>SUCCESS! -- 2 Passed | 0 Failed | 0 Pending | 0 Skipped --- PASS: TestGinkgoStudy (0.00 seconds)
</span><span class='line'>PASS
</span><span class='line'>coverage: 100.0% of statements
</span><span class='line'>ok      github.com/sgykfjsm/ginkgo-study        0.073s</span></code></pre></td></tr></table></div></figure>


<p>見ての通り、<code>-cover</code>で同時にカバレッジを出すことができる。また、テストに失敗すると、以下の様になる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go test -v -cover
</span><span class='line'>=== RUN TestGinkgoStudy
</span><span class='line'>Running Suite: GinkgoStudy Suite
</span><span class='line'>================================
</span><span class='line'>Random Seed: 1443114347
</span><span class='line'>Will run 2 of 2 specs
</span><span class='line'>
</span><span class='line'>• Failure [0.004 seconds]
</span><span class='line'>GinkgoStudy
</span><span class='line'>/Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:45
</span><span class='line'>  Criteria of pass or not
</span><span class='line'>  /Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:43
</span><span class='line'>    With more than 60
</span><span class='line'>    /Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:36
</span><span class='line'>      should be passed [It]
</span><span class='line'>      /Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:35
</span><span class='line'>
</span><span class='line'>      Expected
</span><span class='line'>          &lt;bool&gt;: false
</span><span class='line'>      to equal
</span><span class='line'>          &lt;bool&gt;: true
</span><span class='line'>
</span><span class='line'>      /Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:34
</span><span class='line'>------------------------------
</span><span class='line'>•
</span><span class='line'>
</span><span class='line'>Summarizing 1 Failure:
</span><span class='line'>
</span><span class='line'>[Fail] GinkgoStudy Criteria of pass or not With more than 60 [It] should be passed
</span><span class='line'>/Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:34
</span><span class='line'>
</span><span class='line'>Ran 2 of 2 Specs in 0.004 seconds
</span><span class='line'>FAIL! -- 1 Passed | 1 Failed | 0 Pending | 0 Skipped --- FAIL: TestGinkgoStudy (0.00 seconds)
</span><span class='line'>FAIL
</span><span class='line'>exit status 1
</span><span class='line'>FAIL    github.com/sgykfjsm/ginkgo-study        0.071s</span></code></pre></td></tr></table></div></figure>


<p>見ての通り、かなり丁寧に失敗箇所を教えてくれる。ちなみに、Ginkgoの出力は色付きであり、一部はグレーで表示されるので、ここで見るほど冗長には感じないものと思われる。</p>

<a name="L........."></a>
<h2>まとめ</h2>

<p>以上、ごくごく簡単にGinkgoの使い方を示した。といっても、内容的には公式ドキュメントの冒頭をなぞっただけだが…。</p>

<p>ただ、見ての通り、かなり使いやすいことがわかると思う。コマンドによるボイラープレートや雛形の生成により、開発者は集中すべきことだけに集中できるし、他のBDDフレームワークと同様に自然言語に近い感覚でテストを書くことができる。</p>

<p>また、テスト失敗時に細かい出力をしてくれるのも地味に嬉しい。標準のtestingパッケージやtestifyなどはシンプルな出力しかしてくれないのでデバッグコードが必要になる時があるが、Ginkgoだとその必要はだいぶ減らすことができるだろう。とはいえ、やや丁寧すぎる気がしないでもないが。</p>

<p>個人的な感覚としてはGinkgoはとても開発者フレンドリーだし、比較的活発に開発されているので、注目すべきライブラリだと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[svnのデータ移行手順を確認する]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/09/13/svn-tutorial-for-me/"/>
    <updated>2015-09-13T03:47:12+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/09/13/svn-tutorial-for-me</id>
    <content type="html"><![CDATA[<p>色々あってsvnを触ることになった。今回はその過程で知ったことをメモする。</p>

<!-- more -->


<p>なぜsvnを触ることになったのかというと、現在使っているsvnサーバを移行する必要が出てきたから。
今回は作業手順の検証のために、移行元のsvnと同じバージョンのsvnをソースからコンパイルし、移行先のsvnを最新バージョンでコンパイルした。最新バージョンのsvnのコンパイルをするにあたって、<code>svnsync</code>をhttp経由で行なうために<a href="http://serf.apache.org/">Apache Serf</a>の導入手順も確認した。</p>

<p>ソースコード中に出てくるsvnのコマンドについては、<a href="http://svnbook.red-bean.com/en/1.7/index.html">svnbook</a>を参照すれば良いと思う。コマンド名でなんとなくはわかると思うけど、一応ポインタとしてリンクを記載しておく。</p>

<a name="Subversion1.7.9.................."></a>
<h2>Subversion1.7.9をコンパイル</h2>

<p>特にコレに関してはいうことは無いのだけれど、ポイントとしては、</p>

<ul>
<li><code>--without-berkeley-db</code>としてBerkeley DBを使わないようにしている</li>
<li><code>--without-serf</code>となっていて、http経由でのsvn操作ができなくなっている</li>
<li>SQLiteのバージョンは<em>最新版だとコンパイルできない</em>という点に注意する</li>
</ul>


<p>ということぐらい。あとは以下のソースコードの通り。</p>

<script src="https://gist.github.com/sgykfjsm/9e06eda66014177a883d.js"></script>


<a name="Subversion1.9.1.................."></a>
<h2>Subversion1.9.1をコンパイル</h2>

<p>コレを書いている時点では1.9.1が最新となっている。1.7.9との違いとしては、http経由でリポジトリにアクセスできるように（より厳密には、svnの各種コマンドがhttp形式のURLを解釈できるようにするために）Apache Serfのインストールを行っていること。そして、Apache Serfをインストールするために<a href="http://www.scons.org/">SCons</a>をインストールしている。</p>

<p>Serfとは<a href="http://apr.apache.org/">Apache Portable Runtime</a>(APR)ライブラリ上で動くハイパフォーマンスなC言語ベースのHTTPクライアント。かつては<a href="http://code.google.com/p/serf/">Google Codeでホスティングされていた</a>が、今はApachプロジェクトとして運営されている。</p>

<p>SerfはApache SubversionとApache OpenOfficeのデフォルトクライアントとして利用されている。</p>

<p>Serfがちょっと面倒なのは、ビルドにSConsというものが必要になることだ。SCons自体はpythonで書かれているが、pipなどでインストールするのではなく、ソースコードを<a href="http://www.scons.org/download.php">http://www.scons.org/download.php</a>からダウンロードしてsetup.pyを実行すれば良い。よって、Serfのインストールは以下の様になる。</p>

<p>SConsは<code>make</code>に代わる次世代のビルドツールを目指しているらしい。けど、あんまり耳にすることは無いですね…</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /path/to/scons
</span><span class='line'>sudo python setup.py install
</span><span class='line'>
</span><span class='line'>cd /path/to/serf
</span><span class='line'>sudo scons PREFIX=/home/vagrant/apps/serf
</span><span class='line'>sudo scons install
</span><span class='line'>sudo scons -c</span></code></pre></td></tr></table></div></figure>


<p>あとはv1.7.9とほぼ同様にすれば良いが、違いとしては、</p>

<ul>
<li>yumでopenssl-develをインストールしている</li>
<li><code>--with-serf</code>でserfがインストールされているディレクトリを指定している</li>
<li>subversionディレクトリに配置するSQLiteのディレクトリ名にバージョン名(ディレクトリ末尾の数字)を含めてはいけない</li>
</ul>


<p>ということぐらい。以下のソースコードを移行先となるサーバで実行し、svnクライアントを準備する。</p>

<script src="https://gist.github.com/sgykfjsm/1dc5378d0258ae370fca.js"></script>


<a name="svnsync.................."></a>
<h2>svnsyncを試してみる</h2>

<p>準備ができたら、<code>svnsync</code>を試してみる。移行元となるほうにはすでにダミーのソースコードをおいているので、それが移行先のサーバへコピーされれば成功となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># これは一度だけ実行すればOK
</span><span class='line'>$ svnsync init file:///opt/svn/repository http://192.168.56.202/svn/
</span><span class='line'># `svnsync init`した後に定期的に以下を実行すればOK
</span><span class='line'>$ svnsync sync file:///opt/svn/repository</span></code></pre></td></tr></table></div></figure>


<p>ちゃんとsyncできていれば以下の様な標準出力が確認できるはず。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Transmitting file data ........................................
</span><span class='line'>Committed revision 1.
</span><span class='line'>Copied properties for revision 1.</span></code></pre></td></tr></table></div></figure>


<p>また、<code>svnlook info /opt/svn/repository</code>でリポジトリの情報を確認できることができるので、移行元と移行先それぞれの出力を見比べて、同期ができているかを確認することができる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins上でgolangのプロジェクトをCIするときに気をつけなければならないこと]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/09/06/ci-with-golng-on-jenkins/"/>
    <updated>2015-09-06T20:03:54+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/09/06/ci-with-golng-on-jenkins</id>
    <content type="html"><![CDATA[<p>JenkinsでgolangプロジェクトをCIするときに少しハマったので、同じミスをしないで済むようにここにメモする。</p>

<!-- more -->


<a name="Jenkins...golang.............................."></a>
<h2>Jenkinsでgolangを使えるようにする。</h2>

<p>何はともあれ、これをしないことには始まらない。特に理由が無ければ、Jenkinsのプラグインを使うのが良い。</p>

<p>&ldquo;Jenkinsの管理&rdquo; > &ldquo;プラグインの管理&rdquo; > &ldquo;利用可能&#8221;タブ へ進み、フィルターで&#8221;golang&#8221;と入力すれば、<a href="https://wiki.jenkins-ci.org/display/JENKINS/Go+Plugin">Go plugin</a>が見つかる。チェックを入れた後、&#8221;ダウンロードして再起動後にインストール&#8221;を押下する。</p>

<p>再起動後、&#8221;Jenkinsの管理&#8221; > &ldquo;システムの設定&#8221;へ進むと、&#8221;Go&#8221;のセクションが追加されていることが確認できるはず。</p>

<ul>
<li>もしシステムの管理で&#8221;ロード中&#8221;から復帰しない場合、&#8221;Jenkinsの管理&#8221; > &ldquo;プラグインの管理&rdquo; > &ldquo;高度な設定&#8221;タブ へ進み、画面右下の&#8221;更新&#8221;ボタンを押すと回復する場合がある。</li>
<li>それでもダメならいくつかプラグインをアップデートしてから、再度&#8221;更新&#8221;ボタンを押すと回復することがある。</li>
<li>FYI: <a href="https://issues.jenkins-ci.org/browse/JENKINS-27499">Global config page is broken when loaded before the tool installer data has been fetched</a></li>
</ul>


<p>その後、使いたいバージョンを設定して&#8221;適用&#8221;ボタンを押下後に&#8221;保存&#8221;ボタンを押下すれば良い。</p>

<a name="Job...golang..........................."></a>
<h2>Jobでgolangを使うようにする。</h2>

<p>Jenkinsのプラグインを入れたあと、ジョブの設定画面の&#8221;ビルド環境&#8221;に&#8221;Set up Go programming language tools&#8221;が表示されていることを確認する。ここで使いたいバージョンを選択すれば、あとはPluginが指定したところからバイナリをダウンロードしてして、<code>${JENKINS_HOME}/tools/org.jenkinsci.plugins.golang.GolangInstallation/</code>以下にバイナリを設置する。</p>

<p>Go Pluginを使うと、環境変数に<code>GOROOT</code>が設定されて、<code>PATH</code>にgolangのバイナリが追加されていることが確認できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Jenkinsのジョブで`env`を実行した出力結果の一部</span>
</span><span class='line'><span class="nv">BUILD_DISPLAY_NAME</span><span class="o">=</span><span class="c">#1</span>
</span><span class='line'><span class="nv">BUILD_ID</span><span class="o">=</span>1
</span><span class='line'>...
</span><span class='line'><span class="nv">EXECUTOR_NUMBER</span><span class="o">=</span>1
</span><span class='line'><span class="nv">GOROOT</span><span class="o">=</span>/var/lib/jenkins/tools/org.jenkinsci.plugins.golang.GolangInstallation/v1.5
</span><span class='line'><span class="nv">HOME</span><span class="o">=</span>/var/lib/jenkins
</span><span class='line'>...
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/var/lib/jenkins/tools/org.jenkinsci.plugins.golang.GolangInstallation/v1.5/bin:/sbin:/usr/sbin:/bin:/usr/bin
</span><span class='line'>...
</span><span class='line'>Finished: SUCCESS
</span></code></pre></td></tr></table></div></figure>


<p>しかし、<code>GOPATH</code>が設定されていない。これに気をつけなければハマることになる。</p>

<a name="L................................................"></a>
<h2>カスタムワークスペースを設定する</h2>

<p>おそらく、通常のgolang開発では、GOPATH以下にソースを置いて開発しているのではないかと思う(少なくとも自分の場合はそうしている)。</p>

<p>例えば、<code>github.com/sgykfjsm/hello-golang</code>というプロジェクトの開発をしている場合、コーディングしている端末でのパスは<code>${GOPATH}/src/github.com/sgykfjsm/hello-golang</code>というパスになっているはず。</p>

<p>よって、Jenkinsのジョブ実行時にもこのパスを再現しなければならない。そうしないと、Git Pluginなどでソースを取得すると、普通に<code>${JENKINS_HOME}/workspace/${JOB_NAME}</code>直下にソースが配置されてしまい、<code>go get</code>や<code>go install</code>などに失敗するからだ。</p>

<p>というわけで、Jenkins上でも同じパス構成を再現するためにはカスタムワークスペースを使って、ワークスペースの設定を修正しなければならない。</p>

<p>カスタムワークスペースの設定箇所は、非常にわかりづらいが、ジョブの設定画面の&#8221;プロジェクトの高度なオプション&#8221;に隠れており、&#8221;高度な設定&hellip;&ldquo;を押下して表示しなければならない。押下後、&#8221;カスタムワークスペースを使用&#8221;にチェックを入れて、&#8221;ディレクトリ&#8221;のテキストボックスを表示させる。このテキストボックスに入力すべき設定値は<code>${JENKINS_HOME}</code>から下のパスにすれば良い。例えば、<code>workspace/${JOB_NAME}/src/github.com/sgykfjsm/hello-golang</code>のようにすれば良い。</p>

<a name="GOPATH..............."></a>
<h2>GOPATHを設定する</h2>

<p>その後、ビルドで&#8221;シェルの実行&#8221;を選択し、<code>export GOPATH=${JENKINS_HOME}/workspace/${JOB_NAME}</code>を実行してから諸々の処理を行うようにしてあげれば良い。また、<code>export PATH=${PATH}:${GOPATH}/bin</code>も追加しておくと良い。</p>

<a name="L........."></a>
<h2>まとめ</h2>

<p>要は<code>GOPATH</code>をちゃんと設定しようねっていうだけ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sonatype Nexusの始め方]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/04/26/start-sonatype-nexus/"/>
    <updated>2015-04-26T22:00:40+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/04/26/start-sonatype-nexus</id>
    <content type="html"><![CDATA[<p>自前でmavenリポジトリを運用する場合に、リポジトリ運用を楽にしてくれるソフトウェアがいくつかある。
今回はおそらく良く使われているであろう<a href="http://www.sonatype.org/nexus/">Sonatype Nexus</a>のOSS版でmavenリポジトリを始める方法をメモする。</p>

<!-- more -->


<a name="L......................................."></a>
<h2>ソフトウェアのダウンロード</h2>

<p><a href="http://www.sonatype.org/nexus/go/">http://www.sonatype.org/nexus/go/</a>からtarかzipをダウンロードする。</p>

<p>wgetなどではダウンロードできないので、事前にダウンロードしておく必要がある。ダウンロードしたら、展開する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tar zxf ./nexus-2.11.2-06-bundle.tar.gz
</span><span class='line'>$ sudo mv ./nexus-2.11.2-06 /usr/local/
</span><span class='line'>$ sudo ln -sv /usr/local/nexus-2.11.2-06 /usr/local/nexus
</span><span class='line'>`/usr/local/nexus' -&gt; `/usr/local/nexus-2.11.2-06'</span></code></pre></td></tr></table></div></figure>


<a name="L......"></a>
<h2>設定</h2>

<p>nexusを始める前に<a href="https://books.sonatype.com/nexus-book/reference/install-sect-service.html">3.7. Configuring Nexus as a Service</a>に書かれている設定を行う。なぜなら、配置した場所でnexusを起動するにはroot権限が必要だが、rootでサービスを起動させるのは推奨されていないから。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo useradd nexus -s /bin/false
</span><span class='line'>$ id nexus
</span><span class='line'>uid=501(nexus) gid=501(nexus) groups=501(nexus)
</span><span class='line'>$ sudo cp /usr/local/nexus/bin/nexus /etc/init.d/nexus
</span><span class='line'>$ sudo chmod 755 /etc/init.d/nexus
</span><span class='line'>$ sudo chown root /etc/init.d/nexus
</span><span class='line'>$ ls -l /etc/init.d/nexus
</span><span class='line'>-rwxr-xr-x 1 root root 14601 2015-04-21 00:56 /etc/init.d/nexus```</span></code></pre></td></tr></table></div></figure>


<p>PIDファイルとlockファイルの配置場所の準備と、nexus関連のディレクトリの所有者をnexusユーザに変える。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mkdir -pv -m 755 nexus
</span><span class='line'>mkdir: created directory `nexus’
</span><span class='line'>$ sudo chown -R nexus:nexus /usr/local/nexus-2.11.2-06
</span><span class='line'>$ sudo mkdir -pv /var/lock/nexus
</span><span class='line'>mkdir: created directory `/var/lock/nexus'
</span><span class='line'>$ sudo chown nexus:nexus /var/lock/nexus</span></code></pre></td></tr></table></div></figure>


<p>設定ファイルを修正する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo cp -p /usr/local/nexus/conf/nexus.properties /usr/local/nexus/conf/nexus.properties.org
</span><span class='line'>$ sudo vim /usr/local/nexus/conf/nexus.properties
</span><span class='line'>$ diff /usr/local/nexus/conf/nexus.properties.org /usr/local/nexus/conf/nexus.properties
</span><span class='line'>18a19
</span><span class='line'>&gt; bundleBasedir="/usr/local/nexus”
</span><span class='line'>25c26
</span><span class='line'>&lt; nexus-work=${bundleBasedir}/../sonatype-work/nexus
</span><span class='line'>---
</span><span class='line'>&gt; nexus-work=${bundleBasedir}/sonatype-work/nexus</span></code></pre></td></tr></table></div></figure>


<p>起動スクリプトを修正する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo vim /etc/init.d/nexus
</span><span class='line'>
</span><span class='line'>$ diff /usr/local/nexus/bin/nexus /etc/init.d/nexus
</span><span class='line'>11a12,15
</span><span class='line'>&gt; JAVA_HOME=/usr/lib/jvm/java-1.8.0
</span><span class='line'>&gt; PATH="${JAVA_HOME}/bin:${PATH}"
</span><span class='line'>&gt; export JAVA_HOME
</span><span class='line'>&gt; export PATH
</span><span class='line'>14c18
</span><span class='line'>&lt; NEXUS_HOME=".."
</span><span class='line'>---
</span><span class='line'>&gt; NEXUS_HOME="/usr/local/nexus"
</span><span class='line'>23c27
</span><span class='line'>&lt; #RUN_AS_USER=
</span><span class='line'>---
</span><span class='line'>&gt; RUN_AS_USER="nexus"
</span><span class='line'>34c38
</span><span class='line'>&lt; #PIDDIR="."
</span><span class='line'>---
</span><span class='line'>&gt; PIDDIR="/var/run/nexus"
</span><span class='line'>212c216
</span><span class='line'>&lt; LOCKDIR="/var/lock/subsys"
</span><span class='line'>---
</span><span class='line'>&gt; LOCKDIR="/var/lock/nexus"
</span><span class='line'>552c556
</span><span class='line'>&lt; exit 0
</span><span class='line'>\ No newline at end of file
</span><span class='line'>---
</span><span class='line'>&gt; exit 0</span></code></pre></td></tr></table></div></figure>


<p>serviceに登録する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /etc/init.d/
</span><span class='line'>$ sudo chkconfig --add nexus
</span><span class='line'>$ sudo chkconfig --levels 345 nexus on
</span><span class='line'>$ sudo chkconfig --list nexus
</span><span class='line'>nexus 0:off 1:off 2:on 3:on 4:on 5:on 6:off</span></code></pre></td></tr></table></div></figure>


<p>起動する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo service nexus start
</span><span class='line'>Starting Nexus OSS...
</span><span class='line'>Started Nexus OSS.
</span></code></pre></td></tr></table></div></figure>


<p>起動が正常にできることを確認できたら、ログインを試す。インストール直後に管理者権限でログインするには<code>admin/admin123</code>でログインすれば良い。ログイン後は以下の点を確認し、必要に応じて変更する。</p>

<ul>
<li>AdministratorのパスワードやE-mail Addressを変更する。</li>
<li>SMTPの設定を変更する。</li>
<li>デフォルトのProxyの設定を変更する。</li>
<li>Maven CentralやApache Snapshot、Codehause Snapshotなどの大手リポジトリが保持するカタログINDEXをローカルにダウンロード出来るようにする。</li>
<li>deployユーザ</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonでコーディングするときの小ネタ]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/04/21/coding-by-python-with-little-tips/"/>
    <updated>2015-04-21T22:49:59+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/04/21/coding-by-python-with-little-tips</id>
    <content type="html"><![CDATA[<p><a href="https://julien.danjou.info/books/the-hacker-guide-to-python">The Hacker&rsquo;s Guide to Python</a>という本を読んでいるんだけれども、その中でちょっと感動したテクニックをメモしておく。</p>

<!-- more -->


<p>まずはコレ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_fruits</span><span class="p">(</span><span class="n">basket</span><span class="p">,</span> <span class="n">fruit</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;A variation is to use &#39;if fruit in basket:&#39;&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">basket</span><span class="p">[</span><span class="n">fruit</span><span class="p">]</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">set</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>dictの中から指定した要素の値を取得する。ただし、指定した要素が無ければ空のsetオブジェクトを返す。っていう、よくあるパターン。これは以下の様に書き換えることができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_fruits</span><span class="p">(</span><span class="n">basket</span><span class="p">,</span> <span class="n">fruit</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># dict.get(key[, default])はkeyが辞書にあればkeyに対する値を返し、</span>
</span><span class='line'>    <span class="c"># そうでなければdefaultを返す。</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">basket</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">fruit</span><span class="p">,</span> <span class="nb">set</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>(コメントを除けば)たった1行になった。しかもこれは<a href="http://docs.python.jp/2/library/stdtypes.html#dict.get">dictの組み込み関数</a>なので、ごく自然に使うことができる。</p>

<p>次の例も意外とありがちだと思う。不正な値が検査対象のオブジェクトに含まれていないかを検める例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">has_invalid_fields</span><span class="p">(</span><span class="n">fields</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">fields</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">field</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">]:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは以下の様に書き換えることができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">has_invalid_fields</span><span class="p">(</span><span class="n">fields</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">bool</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">fields</span><span class="p">)</span> <span class="o">-</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>単純にそれぞれの集合の差で判定しているだけ。極めて自然だし、わかりやすい。なんでこうゆう簡潔なコードを思いつけないんだ、おれは…。先ほどの例もそうだけど、データ構造の特性やデータ構造に組み込まれた関数をうまく使うことでコードをより自然に、かつ簡潔にすることができる。</p>

<p>次の例はデータ特性を活かして、パフォーマンスを改善させる例。まずは改善前のコード。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">add_animal_in_family</span><span class="p">(</span><span class="n">species</span><span class="p">,</span> <span class="n">animal</span><span class="p">,</span> <span class="n">family</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">family</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">species</span><span class="p">:</span>
</span><span class='line'>        <span class="n">species</span><span class="p">[</span><span class="n">family</span><span class="p">]</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>    <span class="n">species</span><span class="p">[</span><span class="n">family</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">animal</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">species</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">add_animal_in_family</span><span class="p">(</span><span class="n">species</span><span class="p">,</span> <span class="s">&#39;cat&#39;</span><span class="p">,</span> <span class="s">&#39;felidea&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>speciesという辞書に新たな要素を追加する場合に、追加する種別(ここでは<code>add_animal_in_family</code>の3つ目の引数)がキーにあるかどうかを確認して、なければ空の集合を入れておく。そののちに指定された値を辞書に追加している。コレ自体は極めて真っ当なコードなんだけど、もし、この<code>add_animal_in_family</code>が100回、1000回と実行されるとしたらどうだろうか？おそらく実行回数が増えるにつれて、if文の条件判定が無駄になることが多くなってくるはずだ。</p>

<p>この問題を改善するのが<code>collections.defalutdict</code>というデータ構造。こいつをうまいこと使ってあげると、エレガントに対応できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">collections</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">add_animal_in_family</span><span class="p">(</span><span class="n">species</span><span class="p">,</span> <span class="n">animal</span><span class="p">,</span> <span class="n">family</span><span class="p">):</span>
</span><span class='line'>    <span class="n">species</span><span class="p">[</span><span class="n">family</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">animal</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">species</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defalutdict</span><span class="p">(</span><span class="nb">set</span><span class="p">)</span>
</span><span class='line'><span class="n">add_animal_in_family</span><span class="p">(</span><span class="n">species</span><span class="p">,</span> <span class="s">&#39;cat&#39;</span><span class="p">,</span> <span class="s">&#39;felidea&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>見ての通り、<code>collections</code>パッケージをimportして、データの初期化に<code>collections.defaultdict</code>を使うだけで、<code>add_animal_in_family</code>のif文が不要になってしまった。詳しくは<a href="http://docs.python.jp/2/library/collections.html#collections.defaultdict">ドキュメント</a>を参照するのが一番確実なんだけど、簡単に説明すると、<code>collections.defalutdict</code>に対して存在しない要素へアクセスをしようとすると、<code>defaultdict</code>はKeyErrorを送出する代わりに初期化時に渡されたオブジェクトを使って新たな値を構築して自身である辞書に登録して値を返してくれる。ただし、初期化時に渡す値が<code>None</code>の場合はKeyErrorが送出されるので、注意すること。また、<a href="http://docs.python.jp/2/library/collections.html#id2">ドキュメントに記載されている使用例</a>には初期化時に渡すオブジェクトとしてintを指定しているユニークな例があって、有用。</p>

<p>こんな感じでは、pythonではデータの特性をうまく使うことで小賢しいロジックやアルゴリズムの実装を不要にしてくれて、かつパフォーマンス的にも嬉しい実装をすることができる。もちろん、これはpythonに限った話では無いので、どんな言語であっても扱うデータの特性や組み込み関数についてちゃんと把握しておくことは重要っすな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker-weekly: April 16th, 2015]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/04/20/docker-weekly/"/>
    <updated>2015-04-20T23:28:28+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/04/20/docker-weekly</id>
    <content type="html"><![CDATA[<p>最近、あんまりDockerの話題についていけていないのでDocker weeklyについて、ざっと内容をまとめるようにしてみる。いつまで続くかはわからないけど…。今回は<a href="http://go.docker.com/webmail/44082/349477677/9bcd04c8938431b7e6ac4d9c2a270e1b">Docker Weekly: April 16th, 2015</a>について。</p>

<!-- more -->


<p>主な話題は以下の通り。誤訳もありえるので気になる部分はリンク先や原文にあたること。</p>

<ul>
<li>Docker Engineのv1.6のリリースと関連オーケストレーションツールのアップデート, Registry 2.0とWindows Client Preview

<ul>
<li><a href="https://blog.docker.com/2015/04/docker-release-1-6/">原文はここ</a></li>
<li>コンテナやイメージにユーザが定義したメタデータを付与できるようになった

<ul>
<li>PRは<a href="https://github.com/docker/docker/pull/9882">https://github.com/docker/docker/pull/9882</a></li>
<li>RancharOSでの使い方は<a href="http://rancher.com/docker-labels/">http://rancher.com/docker-labels/</a>を参照のこと。</li>
</ul>
</li>
<li>Windows ClientのPreview版がリリースされた

<ul>
<li>MacのClient(boot2dockerのこと？)と同様の操作感らしい</li>
<li>PRは<a href="https://github.com/docker/docker/pulls?q=is%3Apr+author%3Aahmetalpbalkan+is%3Aclosed">https://github.com/docker/docker/pulls?q=is%3Apr+author%3Aahmetalpbalkan+is%3Aclosed</a>を参照。</li>
<li>詳細は<a href="http://azure.microsoft.com/blog/2015/04/16/docker-client-for-windows-is-now-available">Microsoftのブログ</a>にある。</li>
</ul>
</li>
<li>Logging Driversの提供

<ul>
<li><code>docker run --log-driver</code>に続けて、<code>jdon-file</code>, <code>syslog</code>, <code>none</code>を選択できる。</li>
<li>docker daemonのログ出力を止めてパフォーマンスの向上を図る<code>none</code>っていうのがアツいらしい。PRは<a href="https://github.com/docker/docker/pull/10568">こちら</a>と<a href="https://github.com/docker/docker/issues/7195">こちら</a>が関連してそう。</li>
<li><code>syslog</code>のパッチは70行ぐらいで、将来的に他の実装を追加することがどれだけ簡単かを示す試金石になっている。PRは<a href="https://github.com/docker/docker/pull/11458">こちら</a>。</li>
<li>ちなみに、さっそく<a href="https://github.com/docker/docker/pull/12540">Logger Driversにfluentdを入れようぜ！っていうProposal</a>がされている。</li>
</ul>
</li>
<li>イメージの特定に<code>@digest</code>をつけることができるようになった

<ul>
<li>今まではpullしたイメージはImage IDが付与されていたが、これはimmutableじゃなかった。つまり、pullする度に変わってしまってて、イメージにパッチをあてたりアップデートを行なうときにはちょっと面倒だった。なぜなら、イメージに付与するtagではイメージの同一性を担保できないから。今回追加された<code>@digest</code>はimmutableであることが保障されるので、指定したDigestに指定したパッチを当てるなどの対応が可能になった。っていう理解であってるのだろうか…</li>
<li>PRは<a href="https://github.com/docker/docker/pull/11109">https://github.com/docker/docker/pull/11109</a>。</li>
<li>ドキュメントは[pull][<a href="http://docs.docker.com/reference/commandline/cli/#pull">http://docs.docker.com/reference/commandline/cli/#pull</a>]に記述がある。</li>
<li>Digestをサポートしているのはv2 registryだけらしくて、DockerHubはサポートしているものの、一般的に使われるようになるにはまだ時間がかかりそう。</li>
<li>ところでこのDigestはどうやって知ることができるのだろうか…</li>
</ul>
</li>
<li><code>--cgroup-parent</code>オプションの提供

<ul>
<li>すでにカスタムnamespaceのサポートを行っていたが、v1.6からは任意のcgroupを親に指定することができるようになった。</li>
<li>イマイチ有用性がわからない…。コンテナに使わせたいリソースを自分で調整したい時とか？</li>
<li>PRは<a href="https://github.com/docker/docker/pull/11428">https://github.com/docker/docker/pull/11428</a>を参照。</li>
</ul>
</li>
<li>ulimitsオプションの提供

<ul>
<li>runするコンテナに対してulimitを指定できるようになった。これは個人的には結構アツい。</li>
<li>というのも、コンテナに対してulimitの上限をあげようとするにはホスト側を上げて、なおかつイメージにも同様の設定をしないとうまいこと調整出来なくて、けっこう苦労した思い出があるので。</li>
<li>PRは<a href="https://github.com/docker/docker/pull/9437">https://github.com/docker/docker/pull/9437</a>。</li>
</ul>
</li>
<li><code>commit --change</code>と<code>import --change</code>の提供

<ul>
<li>commitやimportのときにDockerfileに対してコマンドラインから変更を加えながら行なうことができる。</li>
<li>イマイチうまく説明できないので、<a href="http://docs.docker.com/reference/commandline/cli/#commit">ドキュメント</a>を見たほうが良い。</li>
<li>まだ試していないけど、&ndash;changeした内容はDockerfileに反映されるのかな？</li>
<li>PRは<a href="https://github.com/docker/docker/pull/9123">こちら</a>。</li>
</ul>
</li>
</ul>
</li>
<li>Series D Roundで$95M調達

<ul>
<li>Series Dっていうのが謎だったけど、4回目の投資をうけたってことなんかな？</li>
<li>Docker的にはお金をGETできたんで、これからどんどんecosystemの充実とPlatformの推進をがんばりまっせーってことらしい。</li>
</ul>
</li>
<li>DockerConがもうすぐ(News letter配信時点で67日後)

<ul>
<li>サンフランシスコで2015-06-22から2015-06-23にかけて行われるとのこと。</li>
</ul>
</li>
<li>4/23でDockerが2周年

<ul>
<li>おめでとうございます。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS BeanstalkでDockerをカスタムAMIで使う。]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/03/14/custom-docker-ami-on-beanstalk/"/>
    <updated>2015-03-14T23:11:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/03/14/custom-docker-ami-on-beanstalk</id>
    <content type="html"><![CDATA[<p>既知の通り、BeanstalkでDockerを使うことができるが、通常の使い方だとインスタンスが配備される度にDocker ImageをPull、BuildしてからRunする。初期配備時は問題ないが、スケールアウトの観点で見た場合、非常にもたつくことがある。また、Docker Imageが大きい(800MB以上ぐらい？)と、devicemapper errorでBuildに失敗することが多い（ような気がする）。単にBuildに失敗しただけであれば切り離せば良いが、複数台のうちいくつかがBuildに失敗しただけでは検知が難しく、そのまま生き残ってしまうとムダなコストが発生する。</p>

<p>上記のような認識でいたため、これまではBeanstalkでDockerを運用することにはあまり乗り気ではなかった。しかし、同僚からの意見で予めデプロイしておいたカスタムAMIを使うのはどうか、という意見があり、検証することにした。</p>

<p>なお、結論から言うと、ここで記した方法では実運用に耐えないと思う。アレコレがんばらないで、素直に<a href="http://aws.amazon.com/jp/ecs/">Amazon EC2 Container Service</a>がGAになるのを待ったほうが良い。</p>

<!-- more -->


<a name="L1..............AMI........."></a>
<h2>1. カスタムAMIの作成</h2>

<p>まず、カスタムAMIを作成する。作成の方法はAWSのドキュメントに記載されている。</p>

<ul>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.customenv.html">Using Custom AMIs</a></li>
</ul>


<p>上記手順は非常に単純だが、注意点は以下の通り。</p>

<ul>
<li>Beanstalk Dockerで利用可能なAMIでインスタンスを起動する。</li>
<li>インスタンスを起動するリージョンはBeanstalkと同じリージョンでなければならない。</li>
<li>Beanstalkで使われているカスタムAMI IDを事前に調べておくこと。</li>
<li>インスタンス起動時にUser dataに以下を埋め込むこと。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#cloud-config
</span><span class='line'>repo_releasever: &lt;repository version number&gt;
</span><span class='line'>repo_upgrade: none</span></code></pre></td></tr></table></div></figure>


<p>User dataに埋め込むコードについての詳細は割愛するが、<code>repository version number</code>は<a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html">Supported Platforms</a>に記載されている各Solution StackのAMI列を記載すること。この設定により、lock-on-launch 機能が設定され、セキュリティ更新の自動インストールの無効化がなされる。上記設定はBeanstalkでカスタムAMIを使うために必須である。また、VPC環境下でインスタンスを起動する場合はAuto-assign Public IPをenabledにすることを忘れないこと。</p>

<p>上記を踏まえてCloudFormation用テンプレートを作成した。</p>

<ul>
<li><a href="https://gist.github.com/sgykfjsm/c250891a3f2ec5b65eee">sgykfjsm/custom-ami-mold.template</a></li>
</ul>


<p>こいつを流し込んでやれば、まずはベースとなるAMIを持つインスタンスができる。</p>

<a name="L2..AMI..............."></a>
<h2>2. AMIの初期設定</h2>

<p>実際の運用次第だと思うが、最低限必要であろう設定をここで行っておく。個別アプリケーションの設定を一部含んでいるが、不要な場合は設定しなくて良い。</p>

<ul>
<li><a href="https://gist.github.com/sgykfjsm/8d6d3cf5a822dbb33e45#file-initial_setup_for_custom_ami-sh">sgykfjsm/initial_setup_for_custom_ami.sh</a></li>
</ul>


<p>あとはtd-agentのインストールや設定も行っておきたいが、設定のことを考えると長くなりそうなので、今回は割愛する。
ちょっと長いけど、この辺りをやっておくと後々の運用が楽になるんじゃないかと思う。</p>

<p>上記設定後、一旦インスタンスを再起動する。再起動後は以下の様にして、これまでの設定が反映されていることを確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ulimit -n
</span><span class='line'>65536
</span><span class='line'># pgrepの対象はmonitでなくても良い。
</span><span class='line'>$ cat /proc/$(pgrep monit)/limits | grep "Max open files"
</span><span class='line'>Max open files            65536                65536                files
</span><span class='line'>$ sudo monit status</span></code></pre></td></tr></table></div></figure>


<a name="L3..Docker................................................"></a>
<h2>3. Dockerイメージのビルドとコンテナの起動</h2>

<p>次に、Dockerコンテナのデプロイを行なう。これは単純にDeckerfileを用意すれば良いが、どのようなファイルを用意すべきかはデプロイ内容による。<br>
今回はすでに必要な設定は済んでおり、アプリケーションを取り込み済みのDockerイメージを用いるので、以下の様な内容になる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM sgykfjsm/play-scala-intro:latest</span></code></pre></td></tr></table></div></figure>


<p>これを元にコンテナの起動を行う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo docker run -i -t -d -p 12812:2812 -p 80:9000 --name play-scala-intro -v /etc/localtime:/etc/localtime:ro sgykfjsm/play-scala-intro
</span><span class='line'>Unable to find image 'sgykfjsm/play-scala-intro' locally
</span><span class='line'>Pulling repository sgykfjsm/play-scala-intro</span></code></pre></td></tr></table></div></figure>


<p>実際の運用では起動後に受け入れテストのようなもので簡単な動作確認を行なうべきだろう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl --silent localhost:80 -o - | grep "&lt;title&gt;Welcome to Play&lt;/title&gt;"
</span><span class='line'>        &lt;title&gt;Welcome to Play&lt;/title&gt;</span></code></pre></td></tr></table></div></figure>


<a name="L4.............................................................."></a>
<h2>4. 起動スクリプトの用意と再起動処理の上書き</h2>

<p>インスタンス起動時にカスタムAMIでビルドしたDockerコンテナが起動するようにupstartスクリプトを用意する。これは後述するダミー用のデプロイアプリケーションで配布するため、<code>.ebextensions</code>の書式に従って以下の様なものを用意する。</p>

<p>インスタンス初期配備時のための設定。</p>

<figure class='code'><figcaption><span>03-run-dummy-app.config / Docker用のカスタムAMIを使うためにダミーのアプリケーションに仕込んでおく.ebextensions</span><a target='_blank' href='https://gist.github.com/c6b9a73f0cfb7b3c6df0'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>---
</span><span class='line'>commands:
</span><span class='line'>
</span><span class='line'>    01-run-dummy-app:
</span><span class='line'>        command: |
</span><span class='line'>            /usr/bin/docker ps -a | grep -q &#39;play-scala-intro&#39; || \
</span><span class='line'>            /usr/bin/docker run -d \
</span><span class='line'>                -p 22812:2812 \
</span><span class='line'>                --name play-scala-intro \
</span><span class='line'>                -v /etc/localtime:/etc/localtime:ro \
</span><span class='line'>                sgykfjsm/play-scala-intro
</span><span class='line'>        cwd: /home/ec2-user
</span><span class='line'>        ignoreErrors: false
</span></code></pre></td></tr></table></div></figure>


<p>initctlに登録するための起動スクリプトの設定。</p>

<figure class='code'><figcaption><span>01-make-upstart.config / Docker用のカスタムAMIを使うためにダミーのアプリケーションに仕込んでおく.ebextensions</span><a target='_blank' href='https://gist.github.com/c6b9a73f0cfb7b3c6df0'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>---
</span><span class='line'>files:
</span><span class='line'>
</span><span class='line'>    &quot;/etc/init/sample-docker-app.conf&quot; :
</span><span class='line'>        mode: 755
</span><span class='line'>        owner: root
</span><span class='line'>        group: root
</span><span class='line'>        content: |
</span><span class='line'>            description &quot;Elastic Beanstalk Docker Container sample-docker-app&quot;
</span><span class='line'>
</span><span class='line'>            start on started docker
</span><span class='line'>            stop on stopping docker
</span><span class='line'>
</span><span class='line'>            respawn
</span><span class='line'>
</span><span class='line'>            script
</span><span class='line'>                # &quot;play-scala-intro&quot; is *exmaple*. This must be replaced with real container name.
</span><span class='line'>                CONTAINER_NAME=&quot;play-scala-intro&quot;
</span><span class='line'>
</span><span class='line'>                # Wait for docker to finish starting up first.
</span><span class='line'>                FILE=/var/run/docker.sock
</span><span class='line'>                while [ ! -e ${FILE} ]; do
</span><span class='line'>                    sleep 2
</span><span class='line'>                done
</span><span class='line'>
</span><span class='line'>                DOCKER_APP_FILE=/etc/elasticbeanstalk/.aws_beanstalk.current-container-id
</span><span class='line'>                CONTAINER_ID=$(docker ps --no-trunc -a| grep ${CONTAINER_NAME} | cut -d&quot; &quot; -f1)
</span><span class='line'>                if ! docker ps | grep -q ${CONTAINER_ID} ; then
</span><span class='line'>                    docker start ${CONTAINER_ID} &gt; ${DOCKER_APP_FILE}
</span><span class='line'>                fi
</span><span class='line'>
</span><span class='line'>                NGINX_UPSTREAM_IP=$(docker inspect ${CONTAINER_ID} | jq &quot;.[0].NetworkSettings.IPAddress&quot; --raw-output)
</span><span class='line'>                # &quot;9000&quot; is *example*. This must be replaced with real application settings.
</span><span class='line'>                NGINX_UPSTREAM_PORT=9000
</span><span class='line'>
</span><span class='line'>                DOCKER_PORT_FILE=/etc/elasticbeanstalk/.aws_beanstalk.container-port
</span><span class='line'>                if ! cat /etc/nginx/conf.d/elasticbeanstalk-nginx-docker-upstream.conf | grep -q $NGINX_UPSTREAM_IP; then
</span><span class='line'>                    sed -i.$(date &#39;+%Y%m%d%H%M%S.%Z&#39;)  \
</span><span class='line'>                        &quot;s/server.*;/server ${NGINX_UPSTREAM_IP}:${NGINX_UPSTREAM_PORT};/&quot; \
</span><span class='line'>                        /etc/nginx/conf.d/elasticbeanstalk-nginx-docker-upstream.conf
</span><span class='line'>                    service nginx restart
</span><span class='line'>                fi
</span><span class='line'>                echo ${NGINX_UPSTREAM_PORT} &gt; ${DOCKER_PORT_FILE}
</span><span class='line'>
</span><span class='line'>                mkdir -p /var/log/eb-docker/containers/eb-current-app
</span><span class='line'>                docker logs -f ${CONTAINER_ID} &gt; /var/log/eb-docker/containers/eb-current-app/${CONTAINER_ID:0:12}-stdouterr.log 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'>                exec docker wait ${CONTAINER_ID}
</span><span class='line'>            end script
</span><span class='line'>
</span><span class='line'>            post-stop script
</span><span class='line'>                CONTAINER_ID=$(docker ps --no-trunc | grep &#39;play-scala-intro&#39; | cut -f1 -d&#39; &#39;)
</span><span class='line'>
</span><span class='line'>                if [ -n &quot;${CONTAINER_ID}&quot; ] ; then
</span><span class='line'>                    docker stop ${CONTAINER_ID}
</span><span class='line'>                fi
</span><span class='line'>            end script
</span></code></pre></td></tr></table></div></figure>


<p>Beanstalkではインスタンスの起動やアプリケーションのデプロイなどをフックにして様々なスクリプトが起動する。それらのうち、今回はAWSの管理コンソールからアプリケーションの再起動ができるように、再起動処理のスクリプトを上書きをする。これも<code>.ebextensions</code>に仕込んでおく。</p>

<p>その他の.ebextensionsについては<a href="https://gist.github.com/sgykfjsm/c6b9a73f0cfb7b3c6df0">gist</a>を参照すること。</p>

<a name="L5..Beanstalk..........................................................................."></a>
<h2>5. Beanstalkインスタンス用のダミーアプリケーションを用意する。</h2>

<p>Beanstalkのインスタンス配備時にはデプロイアプリケーションが必要だ。上記で設定した.ebextensionsたちも同梱してデプロイしたいので、適当なアプリケーションを用意する。</p>

<ul>
<li><a href="https://gist.github.com/sgykfjsm/914bbe7292f51b530bc8">dummy-apps</a></li>
</ul>


<figure class='code'><figcaption><span>Dockerfile / BeanstalkのDockerプラットフォーム向けのダミーアプリケーション</span><a target='_blank' href='https://gist.github.com/914bbe7292f51b530bc8'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='dockerfile'><span class='line'><span class="k">FROM</span> dockerfile/python
</span><span class='line'>
</span><span class='line'><span class="k">ADD</span> application.py /usr/local/share/application.py
</span><span class='line'>
</span><span class='line'><span class="k">EXPOSE</span> <span class="m">8000</span>
</span><span class='line'>
</span><span class='line'><span class="k">ENTRYPOINT</span> <span class="o">[</span><span class="s2">&quot;python&quot;</span>, <span class="s2">&quot;/usr/local/share/application.py&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Dockerrun.aws.json / BeanstalkのDockerプラットフォーム向けのダミーアプリケーション</span><a target='_blank' href='https://gist.github.com/914bbe7292f51b530bc8'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;AWSEBDockerrunVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Logging&quot;</span><span class="p">:</span> <span class="s2">&quot;/var/log/dummy-application&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Image&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Update&quot;</span><span class="p">:</span> <span class="s2">&quot;false&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>application.py / BeanstalkのDockerプラットフォーム向けのダミーアプリケーション</span><a target='_blank' href='https://gist.github.com/914bbe7292f51b530bc8'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># vim:fenc=utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">wsgiref.simple_server</span> <span class="kn">import</span> <span class="n">make_server</span><span class="p">,</span> <span class="n">WSGIServer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">SocketServer</span> <span class="kn">import</span> <span class="n">ThreadingMixIn</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">environ</span><span class="p">,</span> <span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">start_response</span><span class="p">(</span><span class="s">&#39;200 OK&#39;</span><span class="p">,</span> <span class="p">[(</span><span class="s">&#39;Content-type&#39;</span><span class="p">,</span> <span class="s">&#39;text/html&#39;</span><span class="p">)])</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="s">&#39;ok&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ThreadingWSGIServer</span><span class="p">(</span><span class="n">ThreadingMixIn</span><span class="p">,</span> <span class="n">WSGIServer</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">httpd</span> <span class="o">=</span> <span class="n">make_server</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="n">application</span><span class="p">,</span> <span class="n">ThreadingWSGIServer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">httpd</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L6..............AMI............Beanstalk........................"></a>
<h2>6. カスタムAMIを使ったBeanstalk環境を構築する。</h2>

<p>管理コンソールからBeanstalk環境を構築すると、カスタムAMIを指定することができないため、環境を構築した後にConfigurationからカスタムAMIを変更する必要がある。これだと１時間分のムダな課金が発生するし、自動化が面倒である。なので、ここでもCloudFormationを使ってBeanstalk環境を構築する。</p>

<ul>
<li><a href="https://gist.github.com/sgykfjsm/33bb85bc03110e973dea">sample-docker-with-custom-ami.template</a></li>
</ul>


<figure class='code'><figcaption><span>sample-docker-with-custom-ami.template / BeanstalkでカスタムAMIを使ったDocker環境を構築するCloudFormationテンプレート</span><a target='_blank' href='https://gist.github.com/33bb85bc03110e973dea'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>{
</span><span class='line'>    &quot;AWSTemplateFormatVersion&quot;: &quot;2010-09-09&quot;,
</span><span class='line'>    &quot;Description&quot;: &quot;ApparelCloud MediaAPI Template on elastic beanstalk for Non-VPC&quot;,
</span><span class='line'>    &quot;Parameters&quot;: {
</span><span class='line'>        &quot;ApplicationName&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Beanstalk Application Name&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;BeanstalkInstanceType&quot;: {
</span><span class='line'>            &quot;AllowedValues&quot;: [
</span><span class='line'>                &quot;t2.micro&quot;,
</span><span class='line'>                &quot;t2.small&quot;,
</span><span class='line'>                &quot;t2.medium&quot;,
</span><span class='line'>                &quot;m3.medium&quot;,
</span><span class='line'>                &quot;m3.large&quot;,
</span><span class='line'>                &quot;m3.xlarge&quot;,
</span><span class='line'>                &quot;m3.2xlarge&quot;,
</span><span class='line'>                &quot;c3.large&quot;,
</span><span class='line'>                &quot;c3.xlarge&quot;,
</span><span class='line'>                &quot;c3.2xlarge&quot;,
</span><span class='line'>                &quot;c3.4xlarge&quot;,
</span><span class='line'>                &quot;c3.8xlarge&quot;,
</span><span class='line'>                &quot;r3.large&quot;,
</span><span class='line'>                &quot;r3.xlarge&quot;,
</span><span class='line'>                &quot;r3.2xlarge&quot;,
</span><span class='line'>                &quot;r3.4xlarge&quot;,
</span><span class='line'>                &quot;r3.8xlarge&quot;
</span><span class='line'>            ],
</span><span class='line'>            &quot;ConstraintDescription&quot;: &quot;must be a valid EC2 instance type.&quot;,
</span><span class='line'>            &quot;Description&quot;: &quot;Bastion Host EC2 instance type&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;BeanstalkSecurityGroup&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Security Group Id for BeanstalkInstace&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;CustomAmiId&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;You can override the default Amazon Machine Image (AMI) by specifying your own custom AMI ID.&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;CNAMEPrefix&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Endpoint prefix for environment&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;EnvironmentName&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Environment Name on This Application&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;HostName&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;The URL name for bastion instance&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;HostedZone&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;The DNS name of an existing Amazon Route 53 hosted zone&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;KeyName&quot;: {
</span><span class='line'>            &quot;AllowedPattern&quot;: &quot;[\\x20-\\x7E]*&quot;,
</span><span class='line'>            &quot;ConstraintDescription&quot;: &quot;can contain only ASCII characters.&quot;,
</span><span class='line'>            &quot;Description&quot;: &quot;Name of an existing EC2 KeyPair to enable SSH access to the Elastic Beanstalk hosts&quot;,
</span><span class='line'>            &quot;MaxLength&quot;: &quot;255&quot;,
</span><span class='line'>            &quot;MinLength&quot;: &quot;1&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;PrivateSubnet&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;logical private subnet id existing vpc&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;SSHSecurityGroup&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Bastion Security Group Id&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;SolutionStackName&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Application Platform(http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html)&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;VPC&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;logical VPC id&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;VPCDefaultSecurityGroup&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;VPC Default Security Group Id&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        }
</span><span class='line'>    },
</span><span class='line'>    &quot;Resources&quot;: {
</span><span class='line'>        &quot;SampleDocker2Environment&quot;: {
</span><span class='line'>            &quot;Properties&quot;: {
</span><span class='line'>                &quot;ApplicationName&quot;: {
</span><span class='line'>                    &quot;Ref&quot;: &quot;ApplicationName&quot;
</span><span class='line'>                },
</span><span class='line'>                &quot;CNAMEPrefix&quot;: {
</span><span class='line'>                    &quot;Ref&quot;: &quot;CNAMEPrefix&quot;
</span><span class='line'>                },
</span><span class='line'>                &quot;Description&quot;: &quot;&quot;,
</span><span class='line'>                &quot;EnvironmentName&quot;: {
</span><span class='line'>                    &quot;Ref&quot;: &quot;EnvironmentName&quot;
</span><span class='line'>                },
</span><span class='line'>                &quot;OptionSettings&quot;: [
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:ec2:vpc&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;AssociatePublicIpAddress&quot;,
</span><span class='line'>                        &quot;Value&quot;: &quot;true&quot;
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;ImageId&quot;,
</span><span class='line'>                        &quot;Value&quot;: {&quot;Ref&quot;: &quot;CustomAmiId&quot;}
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:elasticbeanstalk:environment&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;EnvironmentType&quot;,
</span><span class='line'>                        &quot;Value&quot;: &quot;SingleInstance&quot;
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;SSHSourceRestriction&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Fn::Join&quot;: [
</span><span class='line'>                                &quot;&quot;,
</span><span class='line'>                                [
</span><span class='line'>                                    &quot;tcp,22,22,&quot;,
</span><span class='line'>                                    {
</span><span class='line'>                                        &quot;Ref&quot;: &quot;SSHSecurityGroup&quot;
</span><span class='line'>                                    }
</span><span class='line'>                                ]
</span><span class='line'>                            ]
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;IamInstanceProfile&quot;,
</span><span class='line'>                        &quot;Value&quot;: &quot;aws-elasticbeanstalk-ec2-role&quot;
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;SecurityGroups&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;BeanstalkSecurityGroup&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;SecurityGroups&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;VPCDefaultSecurityGroup&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;EC2KeyName&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;KeyName&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;InstanceType&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;BeanstalkInstanceType&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:ec2:vpc&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;VPCId&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;VPC&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:ec2:vpc&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;Subnets&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;PrivateSubnet&quot;
</span><span class='line'>                        }
</span><span class='line'>                    }
</span><span class='line'>                ],
</span><span class='line'>                &quot;SolutionStackName&quot;: {
</span><span class='line'>                    &quot;Ref&quot;: &quot;SolutionStackName&quot;
</span><span class='line'>                },
</span><span class='line'>                &quot;Tier&quot;: {
</span><span class='line'>                    &quot;Name&quot;: &quot;WebServer&quot;,
</span><span class='line'>                    &quot;Type&quot;: &quot;Standard&quot;,
</span><span class='line'>                    &quot;Version&quot;: &quot;1.0&quot;
</span><span class='line'>                }
</span><span class='line'>            },
</span><span class='line'>            &quot;Type&quot;: &quot;AWS::ElasticBeanstalk::Environment&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;SampleDocker2InstanceDNSRecord&quot;: {
</span><span class='line'>            &quot;Properties&quot;: {
</span><span class='line'>                &quot;Comment&quot;: &quot;A record for ac-media instance.&quot;,
</span><span class='line'>                &quot;HostedZoneName&quot;: {
</span><span class='line'>                    &quot;Fn::Join&quot;: [
</span><span class='line'>                        &quot;&quot;,
</span><span class='line'>                        [
</span><span class='line'>                            {
</span><span class='line'>                                &quot;Ref&quot;: &quot;HostedZone&quot;
</span><span class='line'>                            },
</span><span class='line'>                            &quot;.&quot;
</span><span class='line'>                        ]
</span><span class='line'>                    ]
</span><span class='line'>                },
</span><span class='line'>                &quot;Name&quot;: {
</span><span class='line'>                    &quot;Fn::Join&quot;: [
</span><span class='line'>                        &quot;&quot;,
</span><span class='line'>                        [
</span><span class='line'>                            {
</span><span class='line'>                                &quot;Ref&quot;: &quot;HostName&quot;
</span><span class='line'>                            },
</span><span class='line'>                            &quot;.&quot;,
</span><span class='line'>                            {
</span><span class='line'>                                &quot;Ref&quot;: &quot;HostedZone&quot;
</span><span class='line'>                            },
</span><span class='line'>                            &quot;.&quot;
</span><span class='line'>                        ]
</span><span class='line'>                    ]
</span><span class='line'>                },
</span><span class='line'>                &quot;ResourceRecords&quot;: [
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Fn::Join&quot;: [
</span><span class='line'>                            &quot;&quot;,
</span><span class='line'>                            [
</span><span class='line'>                                {
</span><span class='line'>                                    &quot;Ref&quot;: &quot;CNAMEPrefix&quot;
</span><span class='line'>                                },
</span><span class='line'>                                &quot;.&quot;,
</span><span class='line'>                                &quot;elasticbeanstalk.com&quot;,
</span><span class='line'>                                &quot;.&quot;
</span><span class='line'>                            ]
</span><span class='line'>                        ]
</span><span class='line'>                    }
</span><span class='line'>                ],
</span><span class='line'>                &quot;TTL&quot;: &quot;300&quot;,
</span><span class='line'>                &quot;Type&quot;: &quot;CNAME&quot;
</span><span class='line'>            },
</span><span class='line'>            &quot;Type&quot;: &quot;AWS::Route53::RecordSet&quot;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<a name="L........."></a>
<h2>まとめ</h2>

<p>ここまで長々と書いたが、見ての通り、それなりに独自スクリプトを用意したり既存のhooksスクリプトを上書きするなどの対応が必要である。また、上記ではConfig Deployへの対応をしていないし、スケールアウトの安定性の検証は未確認である(ちょっと試した感じだと早いが、実業務で使うような巨大イメージではまだ試していない)。管理コンソールのEventsに表示されるコンテナIDはeb-dockerのままなので、書き換えたスクリプトやnginxの設定ファイルの監視も追加したほうが良いだろう。</p>

<p>結局のところ、既存の設定書き換えやコンテナの停止は割とリスキーである。なぜならAMI（Platform）のバージョン間で同じ設定ないしは同じスクリプトが使われているとは限らないし、以前のバージョンには無かったスクリプトの追加、あるいはスクリプトの仕様変更があるかもしれないからだ。そのため、AMIのバージョンを変える時は<code>/opt/elasticbeanstalk</code>配下のスクリプトを充分に把握しておく必要がある。</p>

<p>敢えてポジティブなことを言えば、カスタムAMIを作りこむことでDocker Wayに則ったシングルインスタンス・マルチサービスが可能になるし、かつ運用に堪えるような設定を施すことができれば、Beanstalkの便利機能（柔軟なスケールアウトやRolling Update、メトリクス管理）を使えるので、かなり嬉しいと思う。とは言え、やはりリスキーには変わりないので、今のところだと、このようなやり方では実運用に耐えないと思う。</p>

<hr />

<p>色々試行錯誤した割に、こう言う結果になって残念…</p>
]]></content>
  </entry>
  
</feed>
