<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sgykfjsm.github.com]]></title>
  <link href="http://sgykfjsm.github.io/atom.xml" rel="self"/>
  <link href="http://sgykfjsm.github.io/"/>
  <updated>2015-03-16T03:40:50+09:00</updated>
  <id>http://sgykfjsm.github.io/</id>
  <author>
    <name><![CDATA[sgykfjsm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AWS BeanstalkでDockerをカスタムAMIで使う。]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/03/14/custom-docker-ami-on-beanstalk/"/>
    <updated>2015-03-14T23:11:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/03/14/custom-docker-ami-on-beanstalk</id>
    <content type="html"><![CDATA[<p>既知の通り、BeanstalkでDockerを使うことができるが、通常の使い方だとインスタンスが配備される度にDocker ImageをPull、BuildしてからRunする。初期配備時は問題ないが、スケールアウトの観点で見た場合、非常にもたつくことがある。また、Docker Imageが大きい(800MB以上ぐらい？)と、devicemapper errorでBuildに失敗することが多い（ような気がする）。単にBuildに失敗しただけであれば切り離せば良いが、複数台のうちいくつかがBuildに失敗しただけでは検知が難しく、そのまま生き残ってしまうとムダなコストが発生する。</p>

<p>上記のような認識でいたため、これまではBeanstalkでDockerを運用することにはあまり乗り気ではなかった。しかし、同僚からの意見で予めデプロイしておいたカスタムAMIを使うのはどうか、という意見があり、検証することにした。</p>

<p>なお、結論から言うと、ここで記した方法では実運用に耐えないと思う。アレコレがんばらないで、素直に<a href="http://aws.amazon.com/jp/ecs/">Amazon EC2 Container Service</a>がGAになるのを待ったほうが良い。</p>

<!-- more -->


<a name="L1..............AMI........."></a>
<h2>1. カスタムAMIの作成</h2>

<p>まず、カスタムAMIを作成する。作成の方法はAWSのドキュメントに記載されている。</p>

<ul>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.customenv.html">Using Custom AMIs</a></li>
</ul>


<p>上記手順は非常に単純だが、注意点は以下の通り。</p>

<ul>
<li>Beanstalk Dockerで利用可能なAMIでインスタンスを起動する。</li>
<li>インスタンスを起動するリージョンはBeanstalkと同じリージョンでなければならない。</li>
<li>Beanstalkで使われているカスタムAMI IDを事前に調べておくこと。</li>
<li>インスタンス起動時にUser dataに以下を埋め込むこと。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#cloud-config
</span><span class='line'>repo_releasever: &lt;repository version number&gt;
</span><span class='line'>repo_upgrade: none</span></code></pre></td></tr></table></div></figure>


<p>User dataに埋め込むコードについての詳細は割愛するが、<code>repository version number</code>は<a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html">Supported Platforms</a>に記載されている各Solution StackのAMI列を記載すること。この設定により、lock-on-launch 機能が設定され、セキュリティ更新の自動インストールの無効化がなされる。上記設定はBeanstalkでカスタムAMIを使うために必須である。また、VPC環境下でインスタンスを起動する場合はAuto-assign Public IPをenabledにすることを忘れないこと。</p>

<p>上記を踏まえてCloudFormation用テンプレートを作成した。</p>

<ul>
<li><a href="https://gist.github.com/sgykfjsm/c250891a3f2ec5b65eee">sgykfjsm/custom-ami-mold.template</a></li>
</ul>


<p>こいつを流し込んでやれば、まずはベースとなるAMIを持つインスタンスができる。</p>

<a name="L2..AMI..............."></a>
<h2>2. AMIの初期設定</h2>

<p>実際の運用次第だと思うが、最低限必要であろう設定をここで行っておく。個別アプリケーションの設定を一部含んでいるが、不要な場合は設定しなくて良い。</p>

<ul>
<li><a href="https://gist.github.com/sgykfjsm/8d6d3cf5a822dbb33e45#file-initial_setup_for_custom_ami-sh">sgykfjsm/initial_setup_for_custom_ami.sh</a></li>
</ul>


<p>あとはtd-agentのインストールや設定も行っておきたいが、設定のことを考えると長くなりそうなので、今回は割愛する。
ちょっと長いけど、この辺りをやっておくと後々の運用が楽になるんじゃないかと思う。</p>

<p>上記設定後、一旦インスタンスを再起動する。再起動後は以下の様にして、これまでの設定が反映されていることを確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ulimit -n
</span><span class='line'>65536
</span><span class='line'># pgrepの対象はmonitでなくても良い。
</span><span class='line'>$ cat /proc/$(pgrep monit)/limits | grep "Max open files"
</span><span class='line'>Max open files            65536                65536                files
</span><span class='line'>$ sudo monit status</span></code></pre></td></tr></table></div></figure>


<a name="L3..Docker................................................"></a>
<h2>3. Dockerイメージのビルドとコンテナの起動</h2>

<p>次に、Dockerコンテナのデプロイを行なう。これは単純にDeckerfileを用意すれば良いが、どのようなファイルを用意すべきかはデプロイ内容による。<br>
今回はすでに必要な設定は済んでおり、アプリケーションを取り込み済みのDockerイメージを用いるので、以下の様な内容になる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM sgykfjsm/play-scala-intro:latest</span></code></pre></td></tr></table></div></figure>


<p>これを元にコンテナの起動を行う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo docker run -i -t -d -p 12812:2812 -p 80:9000 --name play-scala-intro -v /etc/localtime:/etc/localtime:ro sgykfjsm/play-scala-intro
</span><span class='line'>Unable to find image 'sgykfjsm/play-scala-intro' locally
</span><span class='line'>Pulling repository sgykfjsm/play-scala-intro</span></code></pre></td></tr></table></div></figure>


<p>実際の運用では起動後に受け入れテストのようなもので簡単な動作確認を行なうべきだろう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl --silent localhost:80 -o - | grep "&lt;title&gt;Welcome to Play&lt;/title&gt;"
</span><span class='line'>        &lt;title&gt;Welcome to Play&lt;/title&gt;</span></code></pre></td></tr></table></div></figure>


<a name="L4.............................................................."></a>
<h2>4. 起動スクリプトの用意と再起動処理の上書き</h2>

<p>インスタンス起動時にカスタムAMIでビルドしたDockerコンテナが起動するようにupstartスクリプトを用意する。これは後述するダミー用のデプロイアプリケーションで配布するため、<code>.ebextensions</code>の書式に従って以下の様なものを用意する。</p>

<p>インスタンス初期配備時のための設定。</p>

<figure class='code'><figcaption><span>03-run-dummy-app.config / Docker用のカスタムAMIを使うためにダミーのアプリケーションに仕込んでおく.ebextensions</span><a target='_blank' href='https://gist.github.com/c6b9a73f0cfb7b3c6df0'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>---
</span><span class='line'>commands:
</span><span class='line'>
</span><span class='line'>    01-run-dummy-app:
</span><span class='line'>        command: |
</span><span class='line'>            /usr/bin/docker ps -a | grep -q &#39;play-scala-intro&#39; || \
</span><span class='line'>            /usr/bin/docker run -d \
</span><span class='line'>                -p 22812:2812 \
</span><span class='line'>                --name play-scala-intro \
</span><span class='line'>                -v /etc/localtime:/etc/localtime:ro \
</span><span class='line'>                sgykfjsm/play-scala-intro
</span><span class='line'>        cwd: /home/ec2-user
</span><span class='line'>        ignoreErrors: false
</span></code></pre></td></tr></table></div></figure>


<p>initctlに登録するための起動スクリプトの設定。</p>

<figure class='code'><figcaption><span>01-make-upstart.config / Docker用のカスタムAMIを使うためにダミーのアプリケーションに仕込んでおく.ebextensions</span><a target='_blank' href='https://gist.github.com/c6b9a73f0cfb7b3c6df0'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>---
</span><span class='line'>files:
</span><span class='line'>
</span><span class='line'>    &quot;/etc/init/sample-docker-app.conf&quot; :
</span><span class='line'>        mode: 755
</span><span class='line'>        owner: root
</span><span class='line'>        group: root
</span><span class='line'>        content: |
</span><span class='line'>            description &quot;Elastic Beanstalk Docker Container sample-docker-app&quot;
</span><span class='line'>
</span><span class='line'>            start on started docker
</span><span class='line'>            stop on stopping docker
</span><span class='line'>
</span><span class='line'>            respawn
</span><span class='line'>
</span><span class='line'>            script
</span><span class='line'>                # &quot;play-scala-intro&quot; is *exmaple*. This must be replaced with real container name.
</span><span class='line'>                CONTAINER_NAME=&quot;play-scala-intro&quot;
</span><span class='line'>
</span><span class='line'>                # Wait for docker to finish starting up first.
</span><span class='line'>                FILE=/var/run/docker.sock
</span><span class='line'>                while [ ! -e ${FILE} ]; do
</span><span class='line'>                    sleep 2
</span><span class='line'>                done
</span><span class='line'>
</span><span class='line'>                DOCKER_APP_FILE=/etc/elasticbeanstalk/.aws_beanstalk.current-container-id
</span><span class='line'>                CONTAINER_ID=$(docker ps --no-trunc -a| grep ${CONTAINER_NAME} | cut -d&quot; &quot; -f1)
</span><span class='line'>                if ! docker ps | grep -q ${CONTAINER_ID} ; then
</span><span class='line'>                    docker start ${CONTAINER_ID} &gt; ${DOCKER_APP_FILE}
</span><span class='line'>                fi
</span><span class='line'>
</span><span class='line'>                NGINX_UPSTREAM_IP=$(docker inspect ${CONTAINER_ID} | jq &quot;.[0].NetworkSettings.IPAddress&quot; --raw-output)
</span><span class='line'>                # &quot;9000&quot; is *example*. This must be replaced with real application settings.
</span><span class='line'>                NGINX_UPSTREAM_PORT=9000
</span><span class='line'>
</span><span class='line'>                DOCKER_PORT_FILE=/etc/elasticbeanstalk/.aws_beanstalk.container-port
</span><span class='line'>                if ! cat /etc/nginx/conf.d/elasticbeanstalk-nginx-docker-upstream.conf | grep -q $NGINX_UPSTREAM_IP; then
</span><span class='line'>                    sed -i.$(date &#39;+%Y%m%d%H%M%S.%Z&#39;)  \
</span><span class='line'>                        &quot;s/server.*;/server ${NGINX_UPSTREAM_IP}:${NGINX_UPSTREAM_PORT};/&quot; \
</span><span class='line'>                        /etc/nginx/conf.d/elasticbeanstalk-nginx-docker-upstream.conf
</span><span class='line'>                    service nginx restart
</span><span class='line'>                fi
</span><span class='line'>                echo ${NGINX_UPSTREAM_PORT} &gt; ${DOCKER_PORT_FILE}
</span><span class='line'>
</span><span class='line'>                mkdir -p /var/log/eb-docker/containers/eb-current-app
</span><span class='line'>                docker logs -f ${CONTAINER_ID} &gt; /var/log/eb-docker/containers/eb-current-app/${CONTAINER_ID:0:12}-stdouterr.log 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'>                exec docker wait ${CONTAINER_ID}
</span><span class='line'>            end script
</span><span class='line'>
</span><span class='line'>            post-stop script
</span><span class='line'>                CONTAINER_ID=$(docker ps --no-trunc | grep &#39;play-scala-intro&#39; | cut -f1 -d&#39; &#39;)
</span><span class='line'>
</span><span class='line'>                if [ -n &quot;${CONTAINER_ID}&quot; ] ; then
</span><span class='line'>                    docker stop ${CONTAINER_ID}
</span><span class='line'>                fi
</span><span class='line'>            end script
</span></code></pre></td></tr></table></div></figure>


<p>Beanstalkではインスタンスの起動やアプリケーションのデプロイなどをフックにして様々なスクリプトが起動する。それらのうち、今回はAWSの管理コンソールからアプリケーションの再起動ができるように、再起動処理のスクリプトを上書きをする。これも<code>.ebextensions</code>に仕込んでおく。</p>

<p>その他の.ebextensionsについては<a href="https://gist.github.com/sgykfjsm/c6b9a73f0cfb7b3c6df0">gist</a>を参照すること。</p>

<a name="L5..Beanstalk..........................................................................."></a>
<h2>5. Beanstalkインスタンス用のダミーアプリケーションを用意する。</h2>

<p>Beanstalkのインスタンス配備時にはデプロイアプリケーションが必要だ。上記で設定した.ebextensionsたちも同梱してデプロイしたいので、適当なアプリケーションを用意する。</p>

<ul>
<li><a href="https://gist.github.com/sgykfjsm/914bbe7292f51b530bc8">dummy-apps</a></li>
</ul>


<figure class='code'><figcaption><span>Dockerfile / BeanstalkのDockerプラットフォーム向けのダミーアプリケーション</span><a target='_blank' href='https://gist.github.com/914bbe7292f51b530bc8'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='dockerfile'><span class='line'><span class="k">FROM</span> dockerfile/python
</span><span class='line'>
</span><span class='line'><span class="k">ADD</span> application.py /usr/local/share/application.py
</span><span class='line'>
</span><span class='line'><span class="k">EXPOSE</span> <span class="m">8000</span>
</span><span class='line'>
</span><span class='line'><span class="k">ENTRYPOINT</span> <span class="o">[</span><span class="s2">&quot;python&quot;</span>, <span class="s2">&quot;/usr/local/share/application.py&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Dockerrun.aws.json / BeanstalkのDockerプラットフォーム向けのダミーアプリケーション</span><a target='_blank' href='https://gist.github.com/914bbe7292f51b530bc8'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;AWSEBDockerrunVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Logging&quot;</span><span class="p">:</span> <span class="s2">&quot;/var/log/dummy-application&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Image&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Update&quot;</span><span class="p">:</span> <span class="s2">&quot;false&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>application.py / BeanstalkのDockerプラットフォーム向けのダミーアプリケーション</span><a target='_blank' href='https://gist.github.com/914bbe7292f51b530bc8'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># vim:fenc=utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">wsgiref.simple_server</span> <span class="kn">import</span> <span class="n">make_server</span><span class="p">,</span> <span class="n">WSGIServer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">SocketServer</span> <span class="kn">import</span> <span class="n">ThreadingMixIn</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">environ</span><span class="p">,</span> <span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">start_response</span><span class="p">(</span><span class="s">&#39;200 OK&#39;</span><span class="p">,</span> <span class="p">[(</span><span class="s">&#39;Content-type&#39;</span><span class="p">,</span> <span class="s">&#39;text/html&#39;</span><span class="p">)])</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="s">&#39;ok&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ThreadingWSGIServer</span><span class="p">(</span><span class="n">ThreadingMixIn</span><span class="p">,</span> <span class="n">WSGIServer</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">httpd</span> <span class="o">=</span> <span class="n">make_server</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="n">application</span><span class="p">,</span> <span class="n">ThreadingWSGIServer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">httpd</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L6..............AMI............Beanstalk........................"></a>
<h2>6. カスタムAMIを使ったBeanstalk環境を構築する。</h2>

<p>管理コンソールからBeanstalk環境を構築すると、カスタムAMIを指定することができないため、環境を構築した後にConfigurationからカスタムAMIを変更する必要がある。これだと１時間分のムダな課金が発生するし、自動化が面倒である。なので、ここでもCloudFormationを使ってBeanstalk環境を構築する。</p>

<ul>
<li><a href="https://gist.github.com/sgykfjsm/33bb85bc03110e973dea">sample-docker-with-custom-ami.template</a></li>
</ul>


<figure class='code'><figcaption><span>sample-docker-with-custom-ami.template / BeanstalkでカスタムAMIを使ったDocker環境を構築するCloudFormationテンプレート</span><a target='_blank' href='https://gist.github.com/33bb85bc03110e973dea'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>{
</span><span class='line'>    &quot;AWSTemplateFormatVersion&quot;: &quot;2010-09-09&quot;,
</span><span class='line'>    &quot;Description&quot;: &quot;ApparelCloud MediaAPI Template on elastic beanstalk for Non-VPC&quot;,
</span><span class='line'>    &quot;Parameters&quot;: {
</span><span class='line'>        &quot;ApplicationName&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Beanstalk Application Name&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;BeanstalkInstanceType&quot;: {
</span><span class='line'>            &quot;AllowedValues&quot;: [
</span><span class='line'>                &quot;t2.micro&quot;,
</span><span class='line'>                &quot;t2.small&quot;,
</span><span class='line'>                &quot;t2.medium&quot;,
</span><span class='line'>                &quot;m3.medium&quot;,
</span><span class='line'>                &quot;m3.large&quot;,
</span><span class='line'>                &quot;m3.xlarge&quot;,
</span><span class='line'>                &quot;m3.2xlarge&quot;,
</span><span class='line'>                &quot;c3.large&quot;,
</span><span class='line'>                &quot;c3.xlarge&quot;,
</span><span class='line'>                &quot;c3.2xlarge&quot;,
</span><span class='line'>                &quot;c3.4xlarge&quot;,
</span><span class='line'>                &quot;c3.8xlarge&quot;,
</span><span class='line'>                &quot;r3.large&quot;,
</span><span class='line'>                &quot;r3.xlarge&quot;,
</span><span class='line'>                &quot;r3.2xlarge&quot;,
</span><span class='line'>                &quot;r3.4xlarge&quot;,
</span><span class='line'>                &quot;r3.8xlarge&quot;
</span><span class='line'>            ],
</span><span class='line'>            &quot;ConstraintDescription&quot;: &quot;must be a valid EC2 instance type.&quot;,
</span><span class='line'>            &quot;Description&quot;: &quot;Bastion Host EC2 instance type&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;BeanstalkSecurityGroup&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Security Group Id for BeanstalkInstace&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;CustomAmiId&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;You can override the default Amazon Machine Image (AMI) by specifying your own custom AMI ID.&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;CNAMEPrefix&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Endpoint prefix for environment&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;EnvironmentName&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Environment Name on This Application&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;HostName&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;The URL name for bastion instance&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;HostedZone&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;The DNS name of an existing Amazon Route 53 hosted zone&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;KeyName&quot;: {
</span><span class='line'>            &quot;AllowedPattern&quot;: &quot;[\\x20-\\x7E]*&quot;,
</span><span class='line'>            &quot;ConstraintDescription&quot;: &quot;can contain only ASCII characters.&quot;,
</span><span class='line'>            &quot;Description&quot;: &quot;Name of an existing EC2 KeyPair to enable SSH access to the Elastic Beanstalk hosts&quot;,
</span><span class='line'>            &quot;MaxLength&quot;: &quot;255&quot;,
</span><span class='line'>            &quot;MinLength&quot;: &quot;1&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;PrivateSubnet&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;logical private subnet id existing vpc&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;SSHSecurityGroup&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Bastion Security Group Id&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;SolutionStackName&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Application Platform(http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html)&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;VPC&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;logical VPC id&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;VPCDefaultSecurityGroup&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;VPC Default Security Group Id&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        }
</span><span class='line'>    },
</span><span class='line'>    &quot;Resources&quot;: {
</span><span class='line'>        &quot;SampleDocker2Environment&quot;: {
</span><span class='line'>            &quot;Properties&quot;: {
</span><span class='line'>                &quot;ApplicationName&quot;: {
</span><span class='line'>                    &quot;Ref&quot;: &quot;ApplicationName&quot;
</span><span class='line'>                },
</span><span class='line'>                &quot;CNAMEPrefix&quot;: {
</span><span class='line'>                    &quot;Ref&quot;: &quot;CNAMEPrefix&quot;
</span><span class='line'>                },
</span><span class='line'>                &quot;Description&quot;: &quot;&quot;,
</span><span class='line'>                &quot;EnvironmentName&quot;: {
</span><span class='line'>                    &quot;Ref&quot;: &quot;EnvironmentName&quot;
</span><span class='line'>                },
</span><span class='line'>                &quot;OptionSettings&quot;: [
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:ec2:vpc&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;AssociatePublicIpAddress&quot;,
</span><span class='line'>                        &quot;Value&quot;: &quot;true&quot;
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;ImageId&quot;,
</span><span class='line'>                        &quot;Value&quot;: {&quot;Ref&quot;: &quot;CustomAmiId&quot;}
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:elasticbeanstalk:environment&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;EnvironmentType&quot;,
</span><span class='line'>                        &quot;Value&quot;: &quot;SingleInstance&quot;
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;SSHSourceRestriction&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Fn::Join&quot;: [
</span><span class='line'>                                &quot;&quot;,
</span><span class='line'>                                [
</span><span class='line'>                                    &quot;tcp,22,22,&quot;,
</span><span class='line'>                                    {
</span><span class='line'>                                        &quot;Ref&quot;: &quot;SSHSecurityGroup&quot;
</span><span class='line'>                                    }
</span><span class='line'>                                ]
</span><span class='line'>                            ]
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;IamInstanceProfile&quot;,
</span><span class='line'>                        &quot;Value&quot;: &quot;aws-elasticbeanstalk-ec2-role&quot;
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;SecurityGroups&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;BeanstalkSecurityGroup&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;SecurityGroups&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;VPCDefaultSecurityGroup&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;EC2KeyName&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;KeyName&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;InstanceType&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;BeanstalkInstanceType&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:ec2:vpc&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;VPCId&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;VPC&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:ec2:vpc&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;Subnets&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;PrivateSubnet&quot;
</span><span class='line'>                        }
</span><span class='line'>                    }
</span><span class='line'>                ],
</span><span class='line'>                &quot;SolutionStackName&quot;: {
</span><span class='line'>                    &quot;Ref&quot;: &quot;SolutionStackName&quot;
</span><span class='line'>                },
</span><span class='line'>                &quot;Tier&quot;: {
</span><span class='line'>                    &quot;Name&quot;: &quot;WebServer&quot;,
</span><span class='line'>                    &quot;Type&quot;: &quot;Standard&quot;,
</span><span class='line'>                    &quot;Version&quot;: &quot;1.0&quot;
</span><span class='line'>                }
</span><span class='line'>            },
</span><span class='line'>            &quot;Type&quot;: &quot;AWS::ElasticBeanstalk::Environment&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;SampleDocker2InstanceDNSRecord&quot;: {
</span><span class='line'>            &quot;Properties&quot;: {
</span><span class='line'>                &quot;Comment&quot;: &quot;A record for ac-media instance.&quot;,
</span><span class='line'>                &quot;HostedZoneName&quot;: {
</span><span class='line'>                    &quot;Fn::Join&quot;: [
</span><span class='line'>                        &quot;&quot;,
</span><span class='line'>                        [
</span><span class='line'>                            {
</span><span class='line'>                                &quot;Ref&quot;: &quot;HostedZone&quot;
</span><span class='line'>                            },
</span><span class='line'>                            &quot;.&quot;
</span><span class='line'>                        ]
</span><span class='line'>                    ]
</span><span class='line'>                },
</span><span class='line'>                &quot;Name&quot;: {
</span><span class='line'>                    &quot;Fn::Join&quot;: [
</span><span class='line'>                        &quot;&quot;,
</span><span class='line'>                        [
</span><span class='line'>                            {
</span><span class='line'>                                &quot;Ref&quot;: &quot;HostName&quot;
</span><span class='line'>                            },
</span><span class='line'>                            &quot;.&quot;,
</span><span class='line'>                            {
</span><span class='line'>                                &quot;Ref&quot;: &quot;HostedZone&quot;
</span><span class='line'>                            },
</span><span class='line'>                            &quot;.&quot;
</span><span class='line'>                        ]
</span><span class='line'>                    ]
</span><span class='line'>                },
</span><span class='line'>                &quot;ResourceRecords&quot;: [
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Fn::Join&quot;: [
</span><span class='line'>                            &quot;&quot;,
</span><span class='line'>                            [
</span><span class='line'>                                {
</span><span class='line'>                                    &quot;Ref&quot;: &quot;CNAMEPrefix&quot;
</span><span class='line'>                                },
</span><span class='line'>                                &quot;.&quot;,
</span><span class='line'>                                &quot;elasticbeanstalk.com&quot;,
</span><span class='line'>                                &quot;.&quot;
</span><span class='line'>                            ]
</span><span class='line'>                        ]
</span><span class='line'>                    }
</span><span class='line'>                ],
</span><span class='line'>                &quot;TTL&quot;: &quot;300&quot;,
</span><span class='line'>                &quot;Type&quot;: &quot;CNAME&quot;
</span><span class='line'>            },
</span><span class='line'>            &quot;Type&quot;: &quot;AWS::Route53::RecordSet&quot;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<a name="L........."></a>
<h2>まとめ</h2>

<p>ここまで長々と書いたが、見ての通り、それなりに独自スクリプトを用意したり既存のhooksスクリプトを上書きするなどの対応が必要である。また、上記ではConfig Deployへの対応をしていないし、スケールアウトの安定性の検証は未確認である(ちょっと試した感じだと早いが、実業務で使うような巨大イメージではまだ試していない)。管理コンソールのEventsに表示されるコンテナIDはeb-dockerのままなので、書き換えたスクリプトやnginxの設定ファイルの監視も追加したほうが良いだろう。</p>

<p>結局のところ、既存の設定書き換えやコンテナの停止は割とリスキーである。なぜならAMI（Platform）のバージョン間で同じ設定ないしは同じスクリプトが使われているとは限らないし、以前のバージョンには無かったスクリプトの追加、あるいはスクリプトの仕様変更があるかもしれないからだ。そのため、AMIのバージョンを変える時は<code>/opt/elasticbeanstalk</code>配下のスクリプトを充分に把握しておく必要がある。</p>

<p>敢えてポジティブなことを言えば、カスタムAMIを作りこむことでDocker Wayに則ったシングルインスタンス・マルチサービスが可能になるし、かつ運用に堪えるような設定を施すことができれば、Beanstalkの便利機能（柔軟なスケールアウトやRolling Update、メトリクス管理）を使えるので、かなり嬉しいと思う。とは言え、やはりリスキーには変わりないので、今のところだと、このようなやり方では実運用に耐えないと思う。</p>

<hr />

<p>色々試行錯誤した割に、こう言う結果になって残念…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AnsibleでMySQLをインストールする。]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/02/17/install-mysql-with-ansible/"/>
    <updated>2015-02-17T09:19:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/02/17/install-mysql-with-ansible</id>
    <content type="html"><![CDATA[<p>AWSなんかを使ってると、イチからMySQLなどの基本的なミドルウェアをセットアップすることは減ってくる。そんな中、AnsibleでMySQLをインストールする事になったのだけど、意外と忘れてたりAnsibleで作業するのと手作業で進めることの差異でちょっと詰まったりしたので、ここに備忘しておく。</p>

<!-- more -->


<a name="L.................."></a>
<h2>大まかな手順</h2>

<ol>
<li>最新安定版(MySQL5.6)をインストールするためのリポジトリを設定する。</li>
<li>リポジトリ軽油でインストールする。</li>
<li>初期セットアップを行なう。

<ul>
<li>rootのパスワード初期化</li>
<li>mysql_secure_installationによるMySQLの初期化</li>
<li>諸々の設定</li>
</ul>
</li>
</ol>


<p>たったこれだけなんだけど、Ansibleでこれらの作業を実装するのはちょっと面倒。というのも、mysql_secure_installationはコマンドを実行すると対話的に処理を進めることになるが、これをAnsibleで実行するのがちょっと面倒だったりする。また、rootのパスワード初期化についても考慮が必要で、playbookに直書きするのはもちろん駄目だし、mysql_config_editorはこれまた対話式のコマンドなので、自動化が微妙に難しい。諸々の設定に関して、設定すべき内容は案件などによると思うが、予めいくつかのmy.cnfなどを用意しておいて、それをコピーして使うようすればいいだけなので、あまり問題にはならない。</p>

<p>ということで、rootのパスワード初期化および管理とmysql_secure_installationについて考える。</p>

<a name="root...................................."></a>
<h2>rootのパスワード初期化と管理</h2>

<p>いくつかのブログなどにあるHowTo記事でrootの初期パスワードは.mysql_secretというファイルにある、と書かれていることがある。が、今回MySQL5.6をインストールしてみてもそのようなファイルは無かった。今までも見たことがないので、もしかしたらインストールの方法によってはこのファイルが生成されるのかもしれないが、とにかく無い。なので、パスワードの初期化は基本に忠実に以下のようにMySQLを起動させてからパスワードをSQLで更新した。</p>

<pre><code>/bin/sh /usr/bin/mysqld_safe \
    --datadir=/var/lib/mysql \
    --socket=/var/lib/mysql/mysql.sock \
    --pid-file=/var/run/mysqld/mysqld.pid \
    --basedir=/usr \
    --user=mysql \
    --skip-grant-tables \
    --skip-networking
</code></pre>

<p>この起動コマンドについての詳細は<a href="http://dev.mysql.com/doc/refman/5.1/en/resetting-permissions.html#resetting-permissions-generic">Resetting the Root Password: Generic Instructions</a>を参照。この方法がシンプルで覚えることが少なくて良いと思う。</p>

<p>これでMySQLサーバを起動した後、以下のSQLでパスワードを更新する。パスワードはAnsibleの中で<code>cat /dev/urandom | LC_CTYPE=C tr -dc &lsquo;[:alnum:]&rsquo; | head -c 16 ; echo</code>とかやって適当な文字列を生成してあげれば良いと思う。パスワードをplaybookに直書きするよりかはマシだろう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">UPDATE</span> <span class="n">mysql</span><span class="p">.</span><span class="k">user</span> <span class="k">SET</span> <span class="n">Password</span><span class="o">=</span><span class="n">PASSWORD</span><span class="p">(</span><span class="s1">&#39;NewPassWord&#39;</span><span class="p">)</span> <span class="k">WHERE</span> <span class="k">User</span><span class="o">=</span><span class="s1">&#39;root&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">FLUSH</span> <span class="k">PRIVILEGES</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまでは特段問題が無くて、問題はこのパスワードをどこに保管するか、ということ。結論から言えば、/etc/my.cnf.d配下に管理することに落ち着いた。以下の様なファイルを作っておいて、それを/etc/my.cnf.d配下に配置しておけば良いと思う。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[db-administrator]</span>
</span><span class='line'><span class="na">user</span> <span class="o">=</span> <span class="s">root</span>
</span><span class='line'><span class="na">password</span> <span class="o">=</span> <span class="s">{ { mysql_root_password.stdout }}</span>
</span><span class='line'><span class="na">host</span> <span class="o">=</span> <span class="s">localhost</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>{{ mysql_root_password.stdout }}</code>の部分はAnsible内で設定されるプレースホルダー。また、通常は<code>[client]</code>となっている部分は別の文言に変えている。そうでないと、デフォルトの接続情報として使われるので、注意すること。また、/etc/my.cnf.d配下のファイルが読み込まれるように、/etc/my.cnfには<code>!includedir /etc/my.cnf.d</code>を追加しておくこと。</p>

<a name="Ansible...mysql_secure_installation..........................."></a>
<h2>Ansibleでmysql_secure_installationを如何に行なうか。</h2>

<p>ざっと思いついたのは以下の通り。</p>

<ol>
<li>普通にmysql_secure_installationを実行して、対話的に処理を行う。

<ul>
<li>そもそもAnsibleで行なう必要が無いのと、rootのパスワードなどをどこかにメモすることになるので却下</li>
</ul>
</li>
<li>expectを使って、予め回答を入力しておいて、処理を自動化させる。

<ul>
<li>expectについては、<a href="http://www.math.kobe-u.ac.jp/~kodama/tips-expect.html%E3%81%BE%E3%81%9F%E3%81%AFhttp://linuxjm.sourceforge.jp/html/expect/man1/expect.1.html%E3%81%AA%E3%81%A9%E3%82%92%E5%8F%82%E7%85%A7%E3%80%82">http://www.math.kobe-u.ac.jp/~kodama/tips-expect.html%E3%81%BE%E3%81%9F%E3%81%AFhttp://linuxjm.sourceforge.jp/html/expect/man1/expect.1.html%E3%81%AA%E3%81%A9%E3%82%92%E5%8F%82%E7%85%A7%E3%80%82</a></li>
<li>expectを別途インストールする必要がある。</li>
<li>expcet/Tclの文法などを新たに覚えなければならない、かつあまり使うことがなさそうなので、あんまり覚える気がしない。</li>
<li>試してみたけど微妙だった（予めすべてのパターンの質問を拾って、回答を用意しなければならない）</li>
<li>ということで却下</li>
</ul>
</li>
<li>mysql_secure_installationと同等の処理を実装し、それを実行する。

<ul>
<li>mysql_secure_installationがやっている処理自体はいくつかのSQLを実行しているだけで、実装自体は容易。</li>
<li>ただし、今後のバージョンアップなどでmysql_secure_installationの内容を常に気にしておく必要がある。</li>
<li>1と2の案に比べて、必要な時間が圧倒的に少なく済むので、今回はこの案にした。</li>
</ul>
</li>
</ol>


<p>で、その内容は以下の通り。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># http://dev.mysql.com/doc/refman/5.0/en/resetting-permissions.html#resetting-permissions-unix</span>
</span><span class='line'>
</span><span class='line'><span class="nb">set</span> -xeu
</span><span class='line'>
</span><span class='line'><span class="o">[</span> <span class="k">$(</span>/usr/bin/whoami<span class="k">)</span> <span class="o">=</span> <span class="s1">&#39;root&#39;</span> <span class="o">]</span> <span class="o">||</span> <span class="o">{</span>
</span><span class='line'>    /bin/echo root only
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">init_file</span><span class="o">=</span>/tmp/mysql-init
</span><span class='line'>
</span><span class='line'>/bin/cat <span class="s">&lt;&lt;EOF &gt; ${init_file}</span>
</span><span class='line'><span class="s">-- Set the root password</span>
</span><span class='line'><span class="s">UPDATE mysql.user SET Password=PASSWORD(&#39;${mysql_root_password}&#39;) WHERE User=&#39;root&#39;;</span>
</span><span class='line'><span class="s">FLUSH PRIVILEGES;</span>
</span><span class='line'><span class="s">-- Remove anonymous users</span>
</span><span class='line'><span class="s">DELETE FROM mysql.user WHERE User=&#39;&#39;;</span>
</span><span class='line'><span class="s">-- Disallow remote root login</span>
</span><span class='line'><span class="s">DELETE FROM mysql.user WHERE User=&#39;root&#39; AND Host NOT IN (&#39;localhost&#39;,  &#39;127.0.0.1&#39;,  &#39;::1&#39;);</span>
</span><span class='line'><span class="s">-- Remove test database</span>
</span><span class='line'><span class="s">DROP DATABASE IF EXISTS test;</span>
</span><span class='line'><span class="s">DELETE FROM mysql.db WHERE Db=&#39;test&#39; OR Db=&#39;test\\_%&#39;;</span>
</span><span class='line'><span class="s">-- Reload privilege tables</span>
</span><span class='line'><span class="s">FLUSH PRIVILEGES;</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>chmod <span class="m">600</span> <span class="k">${</span><span class="nv">init_file</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>nohup /bin/sh /usr/bin/mysqld_safe <span class="se">\</span>
</span><span class='line'>    --datadir<span class="o">=</span>/var/lib/mysql <span class="se">\</span>
</span><span class='line'>    --socket<span class="o">=</span>/var/lib/mysql/mysql.sock <span class="se">\</span>
</span><span class='line'>    --pid-file<span class="o">=</span>/var/run/mysqld/mysqld.pid <span class="se">\</span>
</span><span class='line'>    --basedir<span class="o">=</span>/usr <span class="se">\</span>
</span><span class='line'>    --user<span class="o">=</span>mysql <span class="se">\</span>
</span><span class='line'>    --skip-grant-tables <span class="se">\</span>
</span><span class='line'>    --skip-networking <span class="p">&amp;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> :
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="o">[</span> -r /var/run/mysqld/mysqld.pid <span class="o">]</span> <span class="o">||</span> <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> ps -ef <span class="p">|</span> grep -q <span class="k">$(</span>cat /var/run/mysqld/mysqld.pid<span class="k">)</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nb">break</span>
</span><span class='line'><span class="nb">    </span><span class="k">fi</span>
</span><span class='line'>    sleep 10
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'>mysql -uroot &lt; <span class="k">${</span><span class="nv">init_file</span><span class="k">}</span> <span class="c"># 実際の処理では--login-pathを指定してrootでログイン、実行としている。</span>
</span><span class='line'>
</span><span class='line'>/etc/init.d/mysqld stop
</span><span class='line'>
</span><span class='line'>rm -f <span class="k">${</span><span class="nv">init_file</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際に書いてみると、なんてことは無いコードではある。</p>

<p>あと、他に何か書こうかと思ったけど、忘れたので、とりあえずMySQL56をインストールするためのplaybookを載っけてお茶を濁すことにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install Official MySQL Repository</span>
</span><span class='line'>  <span class="l-Scalar-Plain">yum</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=&quot;&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">yum</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Disable Official MySQL Repository</span>
</span><span class='line'>  <span class="l-Scalar-Plain">replace</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dest=&quot;/etc/yum.repos.d/.repo&quot; regexp=&quot;^enabled *= *1$&quot; backup=yes replace=&#39;enabled=0&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql-community</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql-community-source</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">yum</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Install MySQL56</span>
</span><span class='line'>  <span class="l-Scalar-Plain">yum</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">name=&quot;&quot; state=latest enablerepo=mysql56-community,remi</span>
</span><span class='line'>  <span class="l-Scalar-Plain">with_items</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">php56-php-mysqlnd</span> <span class="c1"># remi</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql-community-client</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql-community-common</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql-community-devel</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql-community-libs</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql-community-server</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MySQL-python</span> <span class="c1"># for remote-host</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Create root user password</span>
</span><span class='line'>  <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">cat /dev/urandom | LC_CTYPE=C tr -dc &#39;[:alnum:]&#39; | head -c 16</span>
</span><span class='line'>  <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql_root_password</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Execute mysql_secure_installation</span>
</span><span class='line'>  <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">secure_install.sh &quot;&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">result</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Add Line for include append config</span>
</span><span class='line'>  <span class="l-Scalar-Plain">lineinfile</span><span class="p-Indicator">:</span> <span class="p-Indicator">&gt;</span>
</span><span class='line'>    <span class="no">dest=/etc/my.cnf</span>
</span><span class='line'>    <span class="no">line=&quot;!includedir /etc/my.cnf.d&quot;</span>
</span><span class='line'>    <span class="no">backup=yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">register</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">result</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Copy my.cnf To /etc/my.cnf.d/login.cnf</span>
</span><span class='line'>  <span class="l-Scalar-Plain">template</span><span class="p-Indicator">:</span> <span class="p-Indicator">&gt;</span>
</span><span class='line'>    <span class="no">src=my.cnf.j2</span>
</span><span class='line'>    <span class="no">dest=/etc/my.cnf.d/login.cnf</span>
</span><span class='line'>    <span class="no">owner=root</span>
</span><span class='line'>    <span class="no">group=root</span>
</span><span class='line'>    <span class="no">mode=0600</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Add mysqld to StartUps on boot And Be Running</span>
</span><span class='line'>  <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">enabled=yes name=mysqld state=running</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sudo</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">yes</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tags</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sbtから起動させる処理にコマンドラインから引数を渡す]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/02/15/pass-params-to-sbt-on-cli/"/>
    <updated>2015-02-15T02:02:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/02/15/pass-params-to-sbt-on-cli</id>
    <content type="html"><![CDATA[<p>以下はskinny frameworkをつかって処理を書いているが、sbtからの起動させる際にはskinny frameworkを使ってるかどうかは関係ないはず。</p>

<!-- more -->


<p>こんな処理を書いたとする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">batch</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">MyBatch</span> <span class="k">extends</span> <span class="n">skinny</span><span class="o">.</span><span class="n">logging</span><span class="o">.</span><span class="nc">Logging</span> <span class="k">with</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">runMain</span><span class="o">(</span><span class="n">params</span><span class="k">:</span><span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&quot;start&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">params</span> <span class="n">foreach</span> <span class="n">println</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&quot;end&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">runMain</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>その場合、以下の様に起動させれば良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">$</span> <span class="o">./</span><span class="n">sbt</span> <span class="s">&quot;run-main batch.MyBatch foo bar&quot;</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Loading</span> <span class="n">project</span> <span class="n">definition</span> <span class="n">from</span> <span class="o">/</span><span class="nc">Users</span><span class="o">/</span><span class="n">sgyk</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">script</span><span class="o">/</span><span class="n">scala</span><span class="o">/</span><span class="n">skinny</span><span class="o">-</span><span class="n">blank</span><span class="o">-</span><span class="n">app</span><span class="o">/</span><span class="n">project</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Set</span> <span class="n">current</span> <span class="n">project</span> <span class="n">to</span> <span class="n">skinny</span><span class="o">-</span><span class="n">blank</span><span class="o">-</span><span class="n">app</span><span class="o">-</span><span class="n">dev</span> <span class="o">(</span><span class="n">in</span> <span class="n">build</span> <span class="n">file</span><span class="o">:/</span><span class="nc">Users</span><span class="o">/</span><span class="n">sgyk</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">script</span><span class="o">/</span><span class="n">scala</span><span class="o">/</span><span class="n">skinny</span><span class="o">-</span><span class="n">blank</span><span class="o">-</span><span class="n">app</span><span class="o">/)</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Generating</span> <span class="o">/</span><span class="nc">Users</span><span class="o">/</span><span class="n">sgyk</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">script</span><span class="o">/</span><span class="n">scala</span><span class="o">/</span><span class="n">skinny</span><span class="o">-</span><span class="n">blank</span><span class="o">-</span><span class="n">app</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">scala</span><span class="o">-</span><span class="mf">2.11</span><span class="o">/</span><span class="n">resource_managed</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">rebel</span><span class="o">.</span><span class="n">xml</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Running</span> <span class="n">batch</span><span class="o">.</span><span class="nc">MyBatch</span> <span class="n">foo</span> <span class="n">bar</span>
</span><span class='line'><span class="mi">2014</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">14</span> <span class="mi">18</span><span class="k">:</span><span class="err">43</span><span class="kt">:</span><span class="err">44</span><span class="kt">.</span><span class="err">985</span>  <span class="kt">INFO</span>   <span class="kt">---</span> <span class="o">[</span>     <span class="kt">run-main-</span><span class="err">0</span><span class="o">]</span> <span class="n">batch</span><span class="o">.</span><span class="nc">MyBatch</span><span class="n">$</span>                           <span class="k">:</span> <span class="kt">start</span>
</span><span class='line'><span class="n">foo</span>
</span><span class='line'><span class="n">bar</span>
</span><span class='line'><span class="mi">2014</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">14</span> <span class="mi">18</span><span class="k">:</span><span class="err">43</span><span class="kt">:</span><span class="err">45</span><span class="kt">.</span><span class="err">005</span>  <span class="kt">INFO</span>   <span class="kt">---</span> <span class="o">[</span>     <span class="kt">run-main-</span><span class="err">0</span><span class="o">]</span> <span class="n">batch</span><span class="o">.</span><span class="nc">MyBatch</span><span class="n">$</span>                           <span class="k">:</span> <span class="kt">end</span>
</span><span class='line'><span class="o">[</span><span class="kt">success</span><span class="o">]</span> <span class="nc">Total</span> <span class="n">time</span><span class="k">:</span> <span class="err">1</span> <span class="kt">s</span><span class="o">,</span> <span class="n">completed</span> <span class="mi">2014</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">14</span> <span class="mi">18</span><span class="k">:</span><span class="err">43</span><span class="kt">:</span><span class="err">45</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>run-main ${package-name}.${class-name} arg1 arg2 &hellip;</code>といった感じ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beanstalk管理下のインスタンスを安全に再起動する]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/02/13/dereg-instance-under-beanstalk/"/>
    <updated>2015-02-13T18:40:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/02/13/dereg-instance-under-beanstalk</id>
    <content type="html"><![CDATA[<p>現在のBeanstalkでインスタンスが再起動する場合は主に以下の３つがある。</p>

<ul>
<li>アプリケーションをデプロイするとき</li>
<li>Configuration(JVMのパラメータとか)をデプロイするとき</li>
<li>Management ConsoleなどでRestart Appsを実行した時</li>
</ul>


<p>しかし、運用の中では特定のインスタンスのみを再起動したい場合がある。また、再起動を行う場合、インスタンスを再起動すると自動的にTerminateしてしまうし、インスタンス内部のアプリケーションサーバを再起動すると、ELBからリクエストが来てしまう。ここではこういった点を考慮した安全な再起動の手順を確認する。</p>

<!-- more -->


<a name="L.................."></a>
<h2>大まかな流れ</h2>

<ol>
<li>Auto ScalingのTerminate処理をSuspendにする。</li>
<li>ELBから対象のインスタンスを切り離す。</li>
<li>対象のインスタンス、またはインスタンス内部のアプリケーションサーバを再起動する。</li>
<li>ELBへ対象のインスタンスを再登録する。

<ul>
<li>インスタンスの再起動を行った場合、インスタンスの状態（Auto ScalingでのHealth State)はUnhealthyとなってしまうので、事前にAuto ScalingのSetInstanceHealthで対象のインスタンスをHealthyにしておくこと。</li>
</ul>
</li>
<li>Auto ScalingのTerminate処理をResumeにする。</li>
</ol>


<a name="L..............."></a>
<h3>自動化する</h3>

<p>上述した大まかな流れを自動化する。</p>

<ol>
<li>対象のインスタンスのinstance-idを取得する

<ul>
<li>例えば対象のインスタンスにsshログインして<code>curl <a href="http://169.254.169.254/latest/meta-data/instance-id/">http://169.254.169.254/latest/meta-data/instance-id/</a></code></li>
</ul>
</li>
<li>取得したinstance-idを元に、そのインスタンスが所属するAuto Scaling Groupを特定する。

<ul>
<li><code>aws autoscaling describe-auto-scaling-instances &ndash;instance-ids ${instance_id} | jq &ldquo;.AutoScalingInstances[]|.AutoScalingGroupName&rdquo; -r</code></li>
</ul>
</li>
<li>取得したAuto Scaling GroupをキーにTerminate処理をSuspendにする。

<ul>
<li><code>aws autoscaling suspend-processes &ndash;auto-scaling-group-name ${auto_scaling_group_name} &ndash;scaling-processes Terminate</code></li>
</ul>
</li>
<li>対象のインスタンスが所属するELBのLoadBalancerNameを特定する。

<ul>
<li><code>aws autoscaling describe-auto-scaling-groups &ndash;auto-scaling-group-name ${auto_scaling_group_name} | jq &ldquo;.AutoScalingGroups[]|.LoadBalancerNames[]&rdquo; -r</code></li>
<li>上記のコマンドの返り値を配列などで受け取って、instance-idでフィルタリングする。</li>
<li><code>aws elb describe-instance-health &ndash;load-balancer-name ${load_balancer_name} &ndash;instances ${instance_id}</code></li>
</ul>
</li>
<li>対象のインスタンスをLBから切り離す。

<ul>
<li><code>aws elb deregister-instances-from-load-balancer &ndash;load-balancer-name ${load_balancer_name} &ndash;instances ${instance_id}</code></li>
</ul>
</li>
<li>対象のインスタンスにて再起動処理を実行する。</li>
<li>（アプリケーションサーバではなく）インスタンスの再起動を行った場合はHealthyに変更する。

<ul>
<li><code>aws autoscaling set-instance-health &ndash;instance-id ${instance_id} &ndash;health-status Healthy</code></li>
</ul>
</li>
<li>ELBへ対象のインスタンスを再登録する。

<ul>
<li><code>aws elb register-instances-with-load-balancer &ndash;load-balancer-name ${load_balancer_name} &ndash;instances ${instance_id}</code></li>
</ul>
</li>
<li>取得したAuto Scaling GroupをキーにTerminate処理をResumeにする。

<ul>
<li><code>aws autoscaling resume-processes &ndash;auto-scaling-group-name ${auto_scaling_group_name} &ndash;scaling-processes Terminate</code></li>
</ul>
</li>
</ol>


<a name="L........."></a>
<h2>その他</h2>

<p>今回の手順を整理していく中できづいたこと。</p>

<ul>
<li>ELBからインスタンスを切り離してInService状態のインスタンスがbeanstalk環境に設定している最低稼働台数を下回っても、インスタンスが自動的に追加されることは無い。これはbeanstalkでデフォルトに設定されるAuto ScalingのHealth Check TypeがEC2モードであるためだと思われる。

<ul>
<li>なので、アプリケーションサーバを再起動するだけならAuto ScalingのTerminate処理に対する操作は不要と言える。</li>
</ul>
</li>
</ul>


<a name="L......"></a>
<h3>余談</h3>

<p>てっきりbeanstalkでのインスタンス死活監視はELB管理下のインスタンスがInServiceになっている数で判断されているものと思い込んでた…</p>

<a name="L....................."></a>
<h3>参考にした記事</h3>

<p><a href="http://qiita.com/MasaoDX/items/07e46186c450799c6350">Auto ScalingのSuspend/Resumeを使って、Elastic BeanstalkインスタンスをTerminateしないで停止・再起動する</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[起動に失敗したインスタンスを調査する例]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/02/13/how-to-analysis-unlaunched-instance/"/>
    <updated>2015-02-13T03:43:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/02/13/how-to-analysis-unlaunched-instance</id>
    <content type="html"><![CDATA[<p>先日、とあるサービスで利用しているBeanstalk環境でインスタンスが起動に失敗した。ログを見ると、S3からリソースの取得に失敗していたようだ。<br>ネットワーク接続の状態としては、AWS内のネットワークでは疎通可能だが、インターネットを経由した通信は不可、という状況。具体的には、例えばAWSのインスタンスからはsshログイン可能だが、グローバルからのsshログインはできないといったような感じ。色々調べたけど、不意に調査対象のインスタンスがTerminateしてしまい、結局原因がわからないままになってしまった。</p>

<p>調査はAWS Supportとやりとりしながら行ったのだけれども、色々と情報収集を都度指示されて捗らなかった。<br>なので、ここには次また事象が再発した場合に備えて、障害発生時に取得しておきべきこと、確認すべきことを整理する。</p>

<!-- more -->


<a name="L....................."></a>
<h2>確認すべきこと</h2>

<ul>
<li>対象インスタンスに設定されているSecurityGroup

<ul>
<li>どこからのアクセスを許可しているか</li>
<li>許可しているプロトコルは何か</li>
<li>どのポートを開けているか</li>
</ul>
</li>
<li>通信状態に問題がある場合

<ul>
<li>AWS内ネットワークからアクセス可能か（例えばsshログインなど）</li>
<li>インターネットからアクセス可能か（例えばcurlでのHTTPアクセスなど）</li>
</ul>
</li>
<li>対象インスタンスにログイン可能な場合

<ul>
<li>AWS内ネットワークへのアクセスは可能か（例えば<code>curl <a href="http://169.254.169.254/latest/meta-data/">http://169.254.169.254/latest/meta-data/</a></code>でインスタンスのメタデータが取得可能か）</li>
<li>インターネットへのアクセスは可能か（例えば<code>curl <a href="http://www.google.com">http://www.google.com</a></code>がTimeoutしないか）</li>
</ul>
</li>
<li>対象インスタンスにログインできない場合

<ul>
<li>Management ConsoleのEC2の画面から対象インスタンスを選択 > Actions > Instance Settings > Get System Logで起動時のログを参照できるかを確認する。</li>
<li>確認できた場合はそれをテキストファイルなどにコピーしてSupportへ提供する。</li>
</ul>
</li>
</ul>


<a name="L....................."></a>
<h2>収拾すべき情報</h2>

<p>起動に成功したインスタンスと起動に失敗したインスタンスのそれぞれで収拾を行なうこと。</p>

<ul>
<li>各種設定ファイル

<ul>
<li>/etc/ssh/sshd_config</li>
<li>/etc/resolv.conf</li>
</ul>
</li>
<li>各種コマンドの結果

<ul>
<li>ps -ef</li>
<li>traceroute, nslookup, dig

<ul>
<li>これらのコマンドはsshログインできた端末（例えば踏み台に使ったEC2インスタンス）と、sshログインできなかった端末（例えば対象インスタンスへインターネット経由でsshログインを行った作業者の端末）の両方で行うこと。</li>
<li>www.google.co.jpやrepo.ap-northeast-1.amazonaws.comなど、いくつかのパターンを試すと良い。</li>
</ul>
</li>
<li>tcpdump

<ul>
<li>.cap形式でコマンドの結果を保存してSupportへ提供する。</li>
<li>tcpdump port 80 -w filename.cap</li>
</ul>
</li>
<li>netstat -rn, netstat -an</li>
<li>ssh -vvv</li>
<li>iptablesの起動有無

<ul>
<li>sudo /etc/init.d/iptables status</li>
<li>sudo /etc/init.d/ip6tables status</li>
<li>起動している場合は設定をテキストファイルなどにコピーしてSupportへ提供する。</li>
</ul>
</li>
</ul>
</li>
</ul>


<a name="L.................."></a>
<h2>注意すること</h2>

<p>今回、油断して障害発生した端末が不意にTerminateしてしまい、原因を究明することができなかった。このような障害インスタンスはStanby状態にすることで稼働を維持することができる。具体的にはマニュアルの<a href="http://docs.aws.amazon.com/ja_jp/AutoScaling/latest/DeveloperGuide/TroubleshootingAnAutoScalingInstance.html">Auto Scaling グループのインスタンスのトラブルシューティング</a>を参照すること。Auto ScalingやBeanstalkなどを利用していなければ、勝手にTerminateされることは無いと思うので、Terminate Protectionを設定しておけば大丈夫だと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play!のDB設定について]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/04/09/about-db-configuration-in-play/"/>
    <updated>2014-04-09T00:27:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/04/09/about-db-configuration-in-play</id>
    <content type="html"><![CDATA[<p>自分が開発したわけでもないのだけれど、APIのパフォーマンスをどうにかしろ、チューニングしろと言われた。チューニング対象のAPIは<a href="http://www.playframework.com/">Play!</a>を利用しており、DBのI/Oにパフォーマンスが強く依存するので、まずはDB周りのパラメータをしらべて改善していくことにした。</p>

<!-- more -->


<p>DBの接続周りを改善していくにあたって、Thread Poolへの理解は欠かせないのだけれど、Play!の<a href="http://www.playframework.com/documentation/2.2.x/ThreadPools">ドキュメント</a>だとAkkaとかが出てきて、もう少し基本的な部分からおさらいしたいなーと思ったので、ソースから調べることにした。</p>

<ul>
<li><a href="http://www.playframework.com/documentation/2.2.x/ThreadPools">play-jdbc/src/main/scala/play/api/db/DB.scala</a></li>
</ul>


<p>DB.scalaはPlayのDB接続周りを管理している。<a href="https://github.com/playframework/playframework/blob/master/framework/src/play-jdbc/src/main/scala/play/api/db/DB.scala#L202">class BoneCPPlugin</a>でconfigファイルからDBの設定を取得している。この辺に注目していけばよさそう。このあたりに書かれている設定に関して言えば、基本は言語やフレームワークに依存しない部分なはずなのでこれまでの経験とか勘が活かせるかなーと思った次第。</p>

<p>ということで、今回はこのソースに書かれている設定を整理する。</p>

<a name="L......"></a>
<h3>接続</h3>

<p>ラベルのプレフィクスには<code>db.<em>dbName</em>.</code>がつく。</p>

<table>
<thead>
<tr>
<th style="text-align:left;">ラベル        </th>
<th style="text-align:left;"> 設定値の型     </th>
<th style="text-align:left;"> 概要           </th>
<th style="text-align:left;"> メモ</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">driver</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">DBドライバ名</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">autocommit</td>
<td style="text-align:left;">Boolean</td>
<td style="text-align:left;">autocommitを有効にするかどうか</td>
<td style="text-align:left;"> defaultはtrue</td>
</tr>
<tr>
<td style="text-align:left;">isolation</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">NONE / READ_COMMITTED / READ_UNCOMMITTED / REPEATABLE_READ / SERIALIZABLE</td>
<td style="text-align:left;">大文字</td>
</tr>
<tr>
<td style="text-align:left;">defaultCatalog</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">デフォルトのDBカタログ名</td>
<td style="text-align:left;">Postgresqlなど?DB2かも？</td>
</tr>
<tr>
<td style="text-align:left;">readOnly</td>
<td style="text-align:left;">Boolean</td>
<td style="text-align:left;">読み取り専用アクセスとするか否か</td>
<td style="text-align:left;">defaultはfalse</td>
</tr>
<tr>
<td style="text-align:left;">url</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">DBの接続文字列</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">user</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">DBの接続ユーザ</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">pass</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">DBの接続パスワード</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">password</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">DBの接続パスワード</td>
<td></td>
</tr>
</tbody>
</table>


<a name="Pool.configuration"></a>
<h3>Pool configuration</h3>

<p>ここの設定項目はBoneCPの設定とほぼ同一だが、初期値の設定が異なっている。<br>
BoneCPの接続数を計算する場合は<code>maxConnectionsPerPartition * partitionCount</code>となることを押さえておけばよさそう。</p>

<p>ラベルのプレフィクスには<code>db.<em>dbName</em>.</code>がつく。</p>

<table>
<thead>
<tr>
<th style="text-align:left;">ラベル        </th>
<th style="text-align:left;"> 設定値の型     </th>
<th style="text-align:left;"> 概要           </th>
<th style="text-align:left;"> メモ</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">partitionCount</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">スレッドプール単体での同時接続数</td>
<td style="text-align:left;">defaultは1。CPUのコア数と揃えたほうが良い。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></td>
</tr>
<tr>
<td style="text-align:left;">maxConnectionsPerPartition</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">partitionごとに作られる最大同時接続数</td>
<td style="text-align:left;">defaultは30。</td>
</tr>
<tr>
<td style="text-align:left;">minConnectionsPerPartition</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">partitionごとに同時接続開始数</td>
<td style="text-align:left;">defaultは5</td>
</tr>
<tr>
<td style="text-align:left;">acquireIncrement</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">接続が切れそうになるとBoneCPが接続を新たに生成する数。partiticonごとに作用する。</td>
<td style="text-align:left;">defaultは1</td>
</tr>
<tr>
<td style="text-align:left;">acquireRetryAttempts</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">接続試行回数</td>
<td style="text-align:left;">defaultは10</td>
</tr>
<tr>
<td style="text-align:left;">acquireRetryDelay</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">接続に失敗して次の試行までの待ち時間</td>
<td style="text-align:left;">defaultは1000。単位はMillSeconds</td>
</tr>
<tr>
<td style="text-align:left;">connectionTimeout</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">getConnetionを呼び出してからタイムアウトするまでの待ち時間</td>
<td style="text-align:left;">defaultは1000。単位はMillSeconds</td>
</tr>
<tr>
<td style="text-align:left;">idleMaxAge</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">接続が閉じられるまで使われていない接続を維持する時間。</td>
<td style="text-align:left;">defaultは1000 * 60 * 10。単位はMillSeconds。つまりdefaultはアイドル時間が10分。</td>
</tr>
<tr>
<td style="text-align:left;">maxConnectionAge</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">接続を強制的に閉じるための判断に使う時間。ここで指定された時間を超えて存在する接続はアイドルであるか否かを問わず閉じられる。プールに戻されるまでは使用中の接続には影響しない</td>
<td style="text-align:left;">defaultは1000 * 60 * 60。単位はMillSeconds。つまりdefaultでは生成から60分を超えた接続は閉じられる。</td>
</tr>
<tr>
<td style="text-align:left;">disableJMX</td>
<td style="text-align:left;">Boolean</td>
<td style="text-align:left;">JMXを有効に<strong>しない</strong>かどうか</td>
<td style="text-align:left;">defaultはtrue。つまり有効にしない。</td>
</tr>
<tr>
<td style="text-align:left;">statisticsEnabled</td>
<td style="text-align:left;">Boolean</td>
<td style="text-align:left;">統計情報の出力を有効にするかどうか(？)</td>
<td style="text-align:left;">defaultはfalse</td>
</tr>
<tr>
<td style="text-align:left;">idleConnectionTestPeriod</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">DBにテストクエリを送出するまで接続のアイドルを維持する時間。</td>
<td style="text-align:left;">defaultは1000 * 60。単位はMillSeconds。つまりdefaultは1分。</td>
</tr>
<tr>
<td style="text-align:left;">disableConnectionTracking</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">connection trackingを有効に<strong>しないか</strong>どうか</td>
<td style="text-align:left;">defaultはtrue</td>
</tr>
<tr>
<td style="text-align:left;">queryExecuteTimeLimit</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">クエリをロギングするかどうかの基準となる時間。この指定時間を超えたクエリはロギングされる。</td>
<td style="text-align:left;">defaultはゼロ。つまりどれだけ時間がかかってもロギングしない。単位はMillSeconds</td>
</tr>
</tbody>
</table>


<a name="L.................."></a>
<h3>その他の設定</h3>

<p>初期値が設定されていないが、それはおそらくドライバ依存だからだと思う。</p>

<p>ラベルのプレフィクスには<code>db.<em>dbName</em>.</code>がつく。</p>

<table>
<thead>
<tr>
<th style="text-align:left;">ラベル        </th>
<th style="text-align:left;"> 設定値の型     </th>
<th style="text-align:left;"> 概要           </th>
<th style="text-align:left;"> メモ</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">initSQL</td>
<td style="text-align:left;">String</td>
<td style="text-align:left;">接続が確立されるときに一度だけ実行されるSQL。これは接続ごとに実行される。</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">logStatements</td>
<td style="text-align:left;">Boolean</td>
<td style="text-align:left;">SQLをロギングするかどうか</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">connectionTestStatement</td>
<td style="text-align:left;">String</td>
<td style="text-align:left;">接続テストのために実行されるクエリ</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">jndiName</td>
<td style="text-align:left;">String</td>
<td style="text-align:left;">JNDIネームスペースの指定</td>
<td></td>
</tr>
</tbody>
</table>


<a name="L........."></a>
<h2>おまけ</h2>

<p>DB接続文字列の正規表現</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="nc">PostgresFullUrl</span> <span class="k">=</span> <span class="s">&quot;^postgres://([a-zA-Z0-9_]+):([^@]+)@([^/]+)/([^\\s]+)$&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="k">val</span> <span class="nc">MysqlFullUrl</span> <span class="k">=</span> <span class="s">&quot;^mysql://([a-zA-Z0-9_]+):([^@]+)@([^/]+)/([^\\s]+)$&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="k">val</span> <span class="nc">MysqlCustomProperties</span> <span class="k">=</span> <span class="s">&quot;.*\\?(.*)&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="k">val</span> <span class="n">H2DefaultUrl</span> <span class="k">=</span> <span class="s">&quot;^jdbc:h2:mem:.+&quot;</span><span class="o">.</span><span class="n">r</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/playframework/playframework/blob/master/framework/src/play-jdbc/src/main/scala/play/api/db/DB.scala#L344-L347">ここで使われている</a></p>

<p>MySQLの場合は以下が自動的に付与される</p>

<pre><code>?useUnicode=yes&amp;characterEncoding=UTF-8&amp;connectionCollation=utf8_general_ci
</code></pre>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://stackoverflow.com/questions/14445129/a-better-explanation-for-partitioncount-in-bonecp">A better explanation for partitionCount in BoneCP</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['-rwxr-sr-x'というパーミッション設定]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/04/01/whats-is-rwxr-sr-x/"/>
    <updated>2014-04-01T19:26:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/04/01/whats-is-rwxr-sr-x</id>
    <content type="html"><![CDATA[<p>とある事情でサーバの調査をしていたら、以下の様なパーミッション設定を見かけた。</p>

<pre><code>$ ls -l /usr/sbin/sendmail.sendmail
-rwxr-sr-x 1 root smmsp 825704  3月 14  2013 /usr/sbin/sendmail.sendmail
</code></pre>

<!-- more -->


<p>本来（というか、いつもは）&#8221;s&#8221;のところは&#8221;-&ldquo;か&#8221;x&#8221;のはずなので、不思議に思って調べたところ、以下の記事に説明があった。</p>

<ul>
<li><a href="http://www.mukuan.org/basic/permission.html#zone6">特殊なパーミッション</a></li>
<li><a href="http://kazmax.zpp.jp/linux_beginner/setgroupid.html">SGID（Set Group ID） - 特殊なアクセス権</a></li>
</ul>


<p>これらの記事によると、ここで言うところの&#8221;s&#8221;は<code>SGID(Set Group ID)</code>と呼ばれるもので、この設定がなされている実行ファイルを実行すると、ファイルに設定された所有グループの権限でコマンドが実行されるとのこと。</p>

<pre><code>$ ls -l /usr/sbin/sendmail.sendmail
-rwxr-sr-x 1 root smmsp 825704  3月 14  2013 /usr/sbin/sendmail.sendmail
</code></pre>

<p>上記の例で言えば、sendmailを実行すると、smtpグループの権限で実行することになる。</p>

<p>使い道があまりパッと出てこないけど、グループの管理がちょっと楽になるぐらい？日常的な運用で使うことはなさそう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LAST_INSERT_ID()の返り値の型はバージョンによって違う]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/03/02/about-last-insert-id-with-mysql5-dot-5-5-dot-6/"/>
    <updated>2014-03-02T07:30:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/03/02/about-last-insert-id-with-mysql5-dot-5-5-dot-6</id>
    <content type="html"><![CDATA[<p>昨日、MySQLのバージョンを5.5.27から5.6.13に上げてテストしてたら<code>LAST_INSERT_ID</code>を使っているとこでエラーが出た。それで、ドキュメントを見ていたら以下の様な記述があった。</p>

<!-- more -->


<p><a href="http://dev.mysql.com/doc/refman/5.5/en/information-functions.html#function_last-insert-id">http://dev.mysql.com/doc/refman/5.5/en/information-functions.html#function_last-insert-id</a>より。</p>

<blockquote><p>The value has a type of BIGINT UNSIGNED as of MySQL 5.5.29,  BIGINT (signed) before that.</p></blockquote>

<p>5.5.27ではsigned BIGINTが返る模様。</p>

<p><a href="http://dev.mysql.com/doc/refman/5.6/en/information-functions.html#function_last-insert-id">http://dev.mysql.com/doc/refman/5.6/en/information-functions.html#function_last-insert-id</a>より。</p>

<blockquote><p>The value has a type of BIGINT UNSIGNED as of MySQL 5.6.9,  BIGINT (signed) before that.</p></blockquote>

<p>5.6.13ではunsigned BIGINTが返る模様。</p>

<p>で、これの何が問題になったのかというと、例えばunsignedなBIGINTを<code>java.lang.Long</code>に変換しようとしたら有効桁数が変わってしまうということ。<br>ドキュメント<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>によると、signed BIGINTは</p>

<ul>
<li>min:-9223372036854775808</li>
<li>max:9223372036854775807</li>
</ul>


<p>で、これは<code>java.lang.Long</code>の定義<a href="" title="http://docs.oracle.com/javase/7/docs/api/java/lang/Long.html">^2</a>と一致するんだけど、MySQLのunsigned BIGINTは</p>

<ul>
<li>min:0</li>
<li>max:18446744073709551615</li>
</ul>


<p>となる。なので、<code>java.lang.Long</code>じゃなくて、<code>java.math.BigDecimal</code>に変換するようにしないといけないんじゃないかなと。どう対応したかまでは知らないんでアレなんだけど。</p>

<p>以下は一応の検証結果。</p>

<pre><code>mysql [localhost] {msandbox} (test) &gt; select version();
+-----------+
| version() |
+-----------+
| 5.5.27    |
+-----------+
1 row in set (0.00 sec)

mysql [localhost] {msandbox} (test) &gt; create table t1(c1 int);
Query OK, 0 rows affected (0.01 sec)

mysql [localhost] {msandbox} (test) &gt; insert into t1 values(1);
Query OK, 1 row affected (0.00 sec)

mysql [localhost] {msandbox} (test) &gt; create table t2 select last_insert_id() as c2 from t1;
Query OK, 1 row affected (0.00 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql [localhost] {msandbox} (test) &gt; desc t2;
+-------+------------+------+-----+---------+-------+
| Field | Type       | Null | Key | Default | Extra |
+-------+------------+------+-----+---------+-------+
| c2    | bigint(21) | NO   |     | 0       |       |
+-------+------------+------+-----+---------+-------+
1 row in set (0.00 sec)


mysql [localhost] {msandbox} (test) &gt; select version();
+-----------+
| version() |
+-----------+
| 5.6.13    |
+-----------+
1 row in set (0.00 sec)

mysql [localhost] {msandbox} ((none)) &gt; use test;
Database changed
mysql [localhost] {msandbox} (test) &gt; create table t1(c1 int);
Query OK, 0 rows affected (0.01 sec)

mysql [localhost] {msandbox} (test) &gt; insert into t1 values(1);
Query OK, 1 row affected (0.00 sec)

mysql [localhost] {msandbox} (test) &gt; create table t2 select last_insert_id() as c2 from t1;
Query OK, 1 row affected (0.02 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql [localhost] {msandbox} (test) &gt; desc t2;
+-------+---------------------+------+-----+---------+-------+
| Field | Type                | Null | Key | Default | Extra |
+-------+---------------------+------+-----+---------+-------+
| c2    | bigint(21) unsigned | NO   |     | 0       |       |
+-------+---------------------+------+-----+---------+-------+
1 row in set (0.01 sec)
</code></pre>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>https://dev.mysql.com/doc/refman/5.6/en/integer-types.html<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdownをプレビューする]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/03/01/how-to-preview-markdown-on-cli/"/>
    <updated>2014-03-01T09:43:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/03/01/how-to-preview-markdown-on-cli</id>
    <content type="html"><![CDATA[<p>Macではプレビュー機能があるけど、markdownだとレンダリングされずにそのままが表示される。 ので、ちゃんとレンダリングされた状態でプレビューできるようにする。また、いつもvimを使って作業しているので、コマンドラインからプレビューできるようにする。</p>

<p>ただ、今回はlynxを使ってプレビューするので、あまり一般的なやり方ではないと思う。</p>

<!-- more -->


<ul>
<li>markdownをhtmlに変換するツール

<ul>
<li>今回は<a href="http://daringfireball.net/projects/markdown/">http://daringfireball.net/projects/markdown/</a>を使う。</li>
<li><code>PATH</code>が通っている所にスクリプトを配置して、実行権限をつけておく。</li>
</ul>
</li>
<li>lynx

<ul>
<li><code>brew install lynx</code>でOK。</li>
</ul>
</li>
</ul>


<p>随時実行できるように以下のような関数を<code>~/.zshrc</code>とかに登録しておく。</p>

<pre><code># markdown preview
markdown_preview() {
    case $1 in
        -d | -dump | --dump )
            shift
            /usr/local/bin/Markdown.pl $1 | lynx -stdin -raw -dump
            ;;
        * )
            /usr/local/bin/Markdown.pl $1 | lynx -stdin -raw
            ;;
    esac
}
</code></pre>

<p>lynxのオプションに<code>-raw</code>を付けないと、日本語が化けてしまうのでつけておいたほうが良いと思う。あとは、このコマンドをvimから呼び出せるようにすればいいんだろうけど、うまくバッファの中で表示される方法がわからなかったので早々に諦めた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sudoでulimitをしたら「sudo: ulimit -Sn: コマンドが見つかりません」と言われた]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/02/05/sudo-ulimit/"/>
    <updated>2014-02-05T20:26:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/02/05/sudo-ulimit</id>
    <content type="html"><![CDATA[<p>elasticsearchの調子が悪かったので、いろいろ調べていた。その途中でnofilesの上限を調べようと思って、以下のようにコマンドを叩いたらコマンドが見つからないって言われた。</p>

<!-- more -->


<pre><code>$ sudo -E -u elasticsearch 'ulimit -Sn'
sudo: ulimit -Sn: コマンドが見つかりません
</code></pre>

<p>で、あれ？って思っておもむろに確認してみたら、ulimitは<code>cd</code>とか<code>echo</code>のようなビルトイン関数だった。</p>

<pre><code>$ which ulimit
/usr/bin/which: no ulimit in (~/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/aws/bin:/home/fujishima/bin)
$ whereis ulimit
ulimit: /usr/include/ulimit.h /usr/share/man/man1/ulimit.1.gz /usr/share/man/man3p/ulimit.3p.gz /usr/share/man/man1p/ulimit.1p.gz /usr/share/man/man3/ulimit.3.gz
</code></pre>

<p>なので、以下のようにして実行した。</p>

<pre><code>$ sudo -u elasticsearch /bin/bash -c 'ulimit -n'
32000
</code></pre>

<p>というメモでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ITフォーラムセッション 「ビッグデータ活用実務フォーラム」に行ってきた。]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/02/04/big-data-forum/"/>
    <updated>2014-02-04T11:39:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/02/04/big-data-forum</id>
    <content type="html"><![CDATA[<p><a href="http://www.ipsj.or.jp/event/sj/sj2014/itforum_big_data_program.html?utm_content=buffer1396a&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">ITフォーラムセッション 「ビッグデータ活用実務フォーラム」</a>に行ってきた。短い時間に対して、とても豪華なスピーカーだったので、これは行くしかないなーという感じで行ってきた。各セッション30分なので、とても密度が濃かった。</p>

<p>以下はメモ。聞きながらなので、乱文乱筆ご容赦。</p>

<!-- more -->


<a name="L..............................................................................................................................................................."></a>
<h2>「ビッグデータ活用実務フォーラムの概要紹介」、および「医療、農学、環境分野におけるビッグデータ分析の実際」</h2>

<p>スピーカーは石井　一夫 （東京農工大学 農学府農学部 特任教授）さん。</p>

<ul>
<li>だれか女子部つくって</li>
<li><p>ナンパじゃなくてガチで硬派なスタイル</p></li>
<li><p>ビッグデータはゲームや広告だけじゃない</p></li>
<li>ゲノム科学におけるビッグデータ分析</li>
<li>次世代シーケンサーによりヒトゲノムが数日から数週間で読み取れるようになった</li>
<li>プログラムにはshellとかawkとかsedとかLLとか</li>
<li>Hadoopももちろん使ってるよ</li>
<li>インフラはAWSとかのクラウド</li>
<li>解析のソフトウェアで言うと、Crossbowってのがある。</li>
</ul>


<p>ここから事例</p>

<ul>
<li>次世代シーケンサーから出力されるデータのクォリティチェック</li>
<li>いっぺんに数億個のデータが出てくる</li>
<li>モンテカルロ法</li>
<li>Rでゴニョゴニョやってる</li>
<li>ヒストグラムとかヒートマップ、箱ひげ図での評価</li>
</ul>


<p>２つ目の事例</p>

<ul>
<li>進化系統樹</li>
<li>データを比較的短い時間で捌けるようになった。それをどう使うか。</li>
<li>ほぼ無限の組み合わせをモンテカルロ法を用いて絞込？を行って組み合わせを試す</li>
<li>447個の遺伝子から４つを取り出して組み合わせを試す

<ul>
<li>それでも16億パターンぐらいある</li>
</ul>
</li>
<li>これらのパターンから進化系統樹を最適化する</li>
</ul>


<p>３つ目の事例</p>

<ul>
<li>精神疾患に関する調査</li>
<li>糖尿病よりも精神疾患の患者が多く、癌による死者の２倍以上</li>
<li>精神神経疾患系の構築の試み

<ul>
<li>経験的診断からの脱却を図る</li>
</ul>
</li>
<li>採取したDNA、RNAを採取して網羅的ゲノム解析を行う</li>
<li>色々やってモデルを作る。</li>
<li>感度と特異度を用いて完全な診断を行う。</li>
</ul>


<a name="L..............................................................................................................................................................."></a>
<h2>「ビッグデータ活用実務フォーラムの概要紹介」、および「医療、農学、環境分野におけるビッグデータ分析の実際」</h2>

<p>スピーカーは當仲寛哲（USP研究所 代表取締役所長）さん。</p>

<ul>
<li>ユニケージ手法とはUNIXの基本的な機能だけで実現する開発手法</li>
<li>枯れた技術をとことん使い倒す</li>
<li>とは言え、シェルだけではなくてCとかPythonで作った高速なライブラリを用いている</li>
<li>DLできるみたいなこと言ってた</li>
<li>行儀の良い開発作法の研究</li>
<li>数千万件ぐらいまでのデータ規模であれば、30-40個ぐらいのコマンドで１台の端末でさばくことができる。</li>
<li>どちらかというと、システム部門よりも業務部門向けに展開していることが多い。</li>
<li>テキストでデータがあればいいので、データ設計というか、何をキーとするかなどをあまり考えなくてよくなる。</li>
<li>COBOLやSQLバッチの置き換え</li>
<li>BIツールの置き換え</li>
<li>どのくらい早くなる？

<ul>
<li>COBOLで15時間だったのが2時間弱になった</li>
<li>3645ステップから981ステップへ</li>
<li>想定3ヶ月間ぐらいなのに対して13日の期間でここまで改善された。</li>
</ul>
</li>
<li>幅広く使うのではなく、道具を絞り込んでそれを使い倒すという思想</li>
<li>Java + SQLで90分ぐらいが90秒ぐらいになった。</li>
<li>OSネイティブに作りこむことでオーバヘッドを減らす</li>
<li>Firewallのログ解析に2400分かかってた処理を60分に短縮することができた。</li>
<li>usp BOAとかいうクラスタシステムを使うことで100億件のデータは数秒でできる</li>
<li>ゲノム解析でのクォリティチェック、バスの運行情報のリアルタイム集計</li>
<li>R言語の関数をC言語で書き換えて</li>
</ul>


<a name="L...........................One.to.one.............................."></a>
<h2>ビッグデータ時代のOne to oneマーケティングの実際</h2>

<p>スピーカーは山川義介（ALBERT 代表取締役会長）さん。</p>

<ul>
<li>One to Oneって？

<ul>
<li>販売機会 to 顧客→実務的には最小顧客セグメント</li>
<li>このセグメントを最適化するのが大事</li>
</ul>
</li>
<li>一番注目されているのは行動履歴データ

<ul>
<li>特に購買履歴は精度データが高い</li>
<li>属性データはほとんど使わない</li>
<li>人口統計的データや心理的データはもう分析の現場では使われなくなりつつ有る。</li>
</ul>
</li>
<li>アンケートデータは非常に密であるが、購買データはsparse（疎、まばら）

<ul>
<li>こうゆうデータは従来の秀峰では非常に難しい</li>
<li>３次元的に分析する</li>
</ul>
</li>
<li>sparse対策

<ul>
<li>POSデータをカテゴリ単位に分析する</li>
<li>SKU単位の相関よりカテゴリ単位の相関のほうがはるかにパワフルで精緻な購買予測が可能になる</li>
<li>分析に適したカテゴリ付を行なうことが必要</li>
</ul>
</li>
<li>CTB分析

<ul>
<li>Category, Taste, Brand</li>
</ul>
</li>
<li>従来のクラスター分析の手法の問題点

<ul>
<li>k-means法でとにかく似ているクラスターを作る。</li>
<li>ユークリッド距離</li>
<li>コサイン類似度</li>
<li>クラスター分析における距離に関する疑問がある</li>
<li>ALBERT距離という概念

<ul>
<li>特許出願中らしい</li>
</ul>
</li>
</ul>
</li>
<li>cos距離だと原点から放射前条に広がる</li>
<li>ユークリッド距離だと比較的均一に広がる</li>
<li>ALBERT距離だと軸や平面付近とそれ以外に分割される</li>
<li>ALBERT距離を使って、ロイヤルカスタマー可への応用を図っている

<ul>
<li>今までRFM分析におけるロイヤルカスタマーだと何を買ったかは考慮していない</li>
<li>購入カテゴリを考慮したロイヤルカスタマー化</li>
</ul>
</li>
</ul>


<a name="L......................................................................................."></a>
<h2>機械学習と検索の融合が実現するリアルタイムビッグデータ分析</h2>

<p>スピーカーは西川徹（Preferred Infrastructure 代表取締役最高経営責任者）さん。</p>

<ul>
<li>Hadoopの先のBigDataアプリケーション

<ul>
<li>Collection, Reporting, Analytics, Actionのうちデータサイエンティストがカバーしている後半２つがPFIの事業領域</li>
</ul>
</li>
<li>機械学習技術を活用することでデータに対する深い分析の実現を目指す

<ul>
<li>人間の学習過程をコンピュータ上で実現する</li>
</ul>
</li>
<li><a href="http://jubat.us/en/">Jubatus</a>

<ul>
<li>広告配信とかに使われているらしい</li>
</ul>
</li>
<li>集計から深い分析へ, 構造化から非構造化へ, バッチからリアルタイムへ

<ul>
<li>リアルタイムにログを収集して分析できる世界へ</li>
</ul>
</li>
<li>Sedue for BigData

<ul>
<li>リアルタイムに動画を分析して自動的にタグ付けを行う, とか</li>
</ul>
</li>
<li>ビッグデータの先を目指して

<ul>
<li>今のでデータは人が生み出したものがほとんど</li>
<li>トランザクションとかSNSとか</li>
<li>人のクロック数が上がらない限り、データの増加量は頭打ちになるよね</li>
<li>そこで監視カメラ、スマホのセンサーデータとかの機械由来のデータは今後爆発的に増えていくというか、増やすことはどうにでもできることに着目</li>
<li>こういったデータはすでにエッジ（縁）に存在している</li>
</ul>
</li>
<li>データを集約するアプローチは近い将来うまくいかなくなる

<ul>
<li>物理的、地理的な制約によるエッジデバイスの普及とのギャップ</li>
<li>エッジヘビーコンピューティング

<ul>
<li>データを貯めない、一箇所に集めないということを前提にしたアーキテクチャ</li>
<li>エッジ側がもっとintelligentになった階層型のアーキテクチャ</li>
<li>中央に集めなくても良いデータとかあるしね</li>
</ul>
</li>
<li>だからJubatusがアツい

<ul>
<li>ノード間で学習の差分を交換しあう</li>
<li>Loose Model Sharing</li>
<li>Jubatusはクラウド上だけじゃなくてネットワーク機器とかエッジデバイスにも埋め込んでそれおれが互いに強調してより深い分析や判断を行えるようにする.</li>
</ul>
</li>
</ul>
</li>
<li>Data in Motion API

<ul>
<li>監視カメラの映像をData in Montion APIを通じて収集してそれをJubatusとかSedueでアレコレしていい感じにしている（聞き損ねた</li>
</ul>
</li>
<li>機械学習と検索技術のリアルタイム化は必須で、中央ではなくエッジで処理するアプローチ</li>
</ul>


<a name="L............................................................"></a>
<h1>ビッグデータ」の業務利用の夢と現実と絶望</h1>

<p>スピーカーは神林飛志（ノーチラス・テクノロジーズ 代表取締役社長）さん。</p>

<ul>
<li>ビッグデータとは

<ul>
<li>データ爆発の文脈から出てきた言葉</li>
<li>大前提としてPetaByteクラス</li>
<li>ビッグデータって英語で言うと、large amount of data</li>
</ul>
</li>
<li>なんで「ビッグデータ」が流行ったの？

<ul>
<li>モバイル以降のネタが欲しいVCとマスコミ</li>
<li>そこに評論家、政治家とかが乗っかってきた</li>
<li>「ビッグデータ」という市場を作りたい思惑</li>
</ul>
</li>
<li>「ナノテク」というトレンド

<ul>
<li>今は完全に下火</li>
<li>「ビッグデータ」もそうなる？歴史は繰り返すのか？</li>
</ul>
</li>
<li>ビジネスからみた「ビッグデータ」はビジネスになっていない

<ul>
<li>大手SIerですら10数件あればいいほう</li>
<li>実は非常に限られたデータ領域</li>
</ul>
</li>
<li>M2Mはどうなの？

<ul>
<li>実はすでにだいぶ昔からやってる話</li>
<li>プラントとか原発とか</li>
<li>車の制御とか</li>
</ul>
</li>
<li>結局のところ、「ビッグデータ」市場は当初の予想よりずっと小さい

<ul>
<li>CRMとかは健全に成長している</li>
</ul>
</li>
<li>ビッグデータで商売にするには

<ul>
<li>ビッグデータって言わない</li>
<li>バズワードは禁句</li>
<li>データの細粒度化に焦点を当てる</li>
<li>虱潰し</li>
<li>組み合わせの爆発にどう対応するか</li>
<li>これまでのトレンドとは違う技術

<ul>
<li>並列処理とか</li>
</ul>
</li>
</ul>
</li>
<li>技術から見たら？

<ul>
<li>非常に有望な技術が生まれつつある</li>
<li>スケールアウト</li>
<li>分散・並列クエリー</li>
<li>分散トランザクション</li>
<li>複数DC間の整合性確保</li>
<li>主役はGoogleやAMazon</li>
</ul>
</li>
<li>研究から実業への落とし込み

<ul>
<li>分散・並列</li>
<li>既存技術

<ul>
<li>MapReduce</li>
<li>NoSQL</li>
<li>現状では当たり前すぎて、もはやどうでもよいレベル</li>
</ul>
</li>
<li>NWコストの低下によってこれまでとは違うアプローチができるようになった</li>
</ul>
</li>
<li>で、日本は？

<ul>
<li>マスコミ、評論家がよって集まって「データが大きくなくても良い」という風潮をつくった</li>
<li>大事なのはアプリケーションでしょ？</li>
<li>それはそうなんだけど、失われた基盤技術</li>
</ul>
</li>
<li>技術屋としては？

<ul>
<li>最低限のNoSQLやHadoopの知識</li>
<li>Try &amp; Errorができる環境</li>
<li>トレンドを追いかける</li>
<li>VCに踊らされない</li>
<li>データを絞るのではなくて、分散とか並列とかで潰していく</li>
</ul>
</li>
<li>人から見た

<ul>
<li>リアルタイムって処理が早いことじゃなくて、マイクロセカンドからナノセカンドへ</li>
<li>プレゼンテーションが「シリコンバレーのVC向け」</li>
</ul>
</li>
<li>データサイエンスの矛盾

<ul>
<li>統計手法はビッグデータのための手法じゃない。むしろ逆。</li>
<li>データサイエンスとビッグデータとの矛盾</li>
<li>そもそもデータ解析には普通の歴史がある。

<ul>
<li>金融、バイオ、流通…</li>
<li>すでにプロが居るんだから、データサイエンスと名乗ることの苦悩</li>
</ul>
</li>
<li>本当にビッグデータに関わりたいのであれば、日本からでていくこと

<ul>
<li>無いものを無理やりつくろうとした。</li>
<li>正常な進化ができなくなった日本IT</li>
<li>ビジネスとしては旧来市場に参入するしかない

<ul>
<li>レッドオーシャン</li>
</ul>
</li>
</ul>
</li>
<li>海外

<ul>
<li>正面からビッグデータに取り組む</li>
<li>インフラを含めた基礎技術の改変に取り組む</li>
<li>よって進む技術革新</li>
<li>いままで出来なかったことができるようになる

<ul>
<li>ブルーオーシャン</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQLのALTERで'The table '#sql-xxxx' is full'と言われたら]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/01/28/table-is-full-when-alter/"/>
    <updated>2014-01-28T09:44:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/01/28/table-is-full-when-alter</id>
    <content type="html"><![CDATA[<p>とりあえず、DBの空き容量とALTERしようとしているテーブルの容量を確認する。</p>

<!-- more -->


<p><a href="http://dev.mysql.com/doc/refman/5.5/en/alter-table.html">公式マニュアル</a>には以下のようにある。</p>

<blockquote><p>In most cases,  ALTER TABLE makes a temporary copy of the original table.</p></blockquote>

<p>いくつかの例外はあるものの、カラムを追加したり削除したりする場合は一時テーブルが作られる模様。なので、対象テーブル分の空き容量が必要となる。とは言え、実際の容量分だけあればよいかというと、そうでも無いみたいで、目安として大体<code>ALTERしようとしているテーブルの容量 * 2</code>ぐらいの空き容量が必要なので、足りてない場合はそんな感じで容量を増やせば良い。</p>

<a name="L........."></a>
<h2>おまけ</h2>

<p>テーブルの容量を調べたい場合は、こちらのブログを参考にすると良い。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/sho-yamasaki/20120405/1333640589">データベースとテーブルのサイズを確認する方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon RDSのMySQLでオンラインメンテをどうやればいいかを調べた]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/01/26/online-maintenance-on-rds-mysql/"/>
    <updated>2014-01-26T20:28:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/01/26/online-maintenance-on-rds-mysql</id>
    <content type="html"><![CDATA[<p>RDSのMySQLでオンラインメンテ、つまり無停止でのスキーマ変更などをどうやれば良いか、という話。 今までは色々小細工をして生のALTER文を発行していたけど、さすがにロック時間とかが気になり始めたので調べた次第。 ざっとググると、<a href="http://www.percona.com/doc/percona-toolkit/2.1/pt-online-schema-change.html">pt-online-schema-change</a>というツールを使うと良さそうだったので、ここにその作業ログを残す。 以下は参考にしたブログ記事など。</p>

<ul>
<li><a href="http://blog.livedoor.jp/sasata299/archives/51983526.html">pt-online-schema-changeを利用して無停止でスキーマ変更</a></li>
<li><a href="https://twitter.com/frsyuki/statuses/291713629177405441">@frsyukiさんのツイート</a></li>
<li><a href="http://stackoverflow.com/questions/8919907/can-i-create-trigger-in-an-rds-db">Can I CREATE TRIGGER in an rds DB?</a></li>
</ul>


<!-- more -->


<p>なお、別のツールで<a href="http://openarkkit.googlecode.com/svn/trunk/openarkkit/doc/html/oak-online-alter-table.html">oak-online-alter-table</a>というものがある。oak-online-alter-tableに関する記事は以下が参考になる。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/sh2/20100703">MySQLでサービス停止のないALTER TABLEの検討</a></li>
</ul>


<a name="L............"></a>
<h2>事前準備</h2>

<p>pt-online-schema-changeの実行に必要なモジュールがあるかを確認する。</p>

<pre><code>$ perl -MDBD::mysql
Can't locate DBD/mysql.pm in @INC (@INC contains: /Library/Perl/5.12/darwin-thread-multi-2level /Library/Perl/5.12 /Network/Library/Perl/5.12/darwin-thread-multi-2level /Network/Library/Perl/5.12 /Library/Perl/Updates/5.12.5 /System/Library/Perl/5.12/darwin-thread-multi-2level /System/Library/Perl/5.12 /System/Library/Perl/Extras/5.12/darwin-thread-multi-2level /System/Library/Perl/Extras/5.12 .).
BEGIN failed--compilation aborted.
</code></pre>

<p>今回は上記の通り、DBD::mysqlがなかったので、cpanmでインストールした。</p>

<p>pt-online-schema-changeを入手する。</p>

<pre><code>$ wget percona.com/get/pt-online-schema-change
$ chmod a+x pt-online-schema-change
</code></pre>

<p>今回は以下の様な感じでテスト用のインスタンスを作った。意図せずv5.6になった…。</p>

<pre><code>$ rds-create-db-instance --db-instance-identifier sbtest --db-instance-class db.m1.small --db-name db_sbtest --engine MySQL --allocated-storage 10 --master-username sbtest_user --master-user-password sbtest_passwd
  DBINSTANCE  sbtest  db.m1.small  mysql  10  sbtest_user  creating  1  ****  n  5.6.13  general-public-license  y
        SECGROUP  default  active
        PARAMGRP  default.mysql5.6  in-sync
        OPTIONGROUP  default:mysql-5-6  in-sync
</code></pre>

<a name="RDS........................"></a>
<h2>RDSへの対応について</h2>

<p>チューニングを行っていない場合、Parameter Groupはデフォルトのままなので、pt-online-schemaを使うためには以下の対応を行う必要がある。</p>

<ul>
<li>メンテナンス用のパラメータグループを作る。(<a href="http://docs.aws.amazon.com/AmazonRDS/latest/CommandLineReference/CLIReference-cmd-CreateDBParameterGroup.html">rds-create-db-parameter-group</a>)</li>
<li>メンテナンス用のパラメータグループの設定を行う。<code>name=log_bin_trust_function_creators,value=true</code>を指定する。(<a href="http://docs.aws.amazon.com/AmazonRDS/latest/CommandLineReference/CLIReference-cmd-ModifyDBParameterGroup.html">rds-modify-db-parameter-group</a>)</li>
<li>メンテナンス対象のDBインスタンスのパラメータグループをメンテナンス用のものに変更する。(<a href="http://docs.aws.amazon.com/AmazonRDS/latest/CommandLineReference/CLIReference-cmd-ModifyDBInstance.html">rds-modify-db-instance</a>)</li>
</ul>


<p>コマンドで言うと、以下の様なことを行なう。</p>

<pre><code>$ rds-create-db-parameter-group --db-parameter-group-family mysql5.6 --db-parameter-group-name maintenace-pramas-group --description 'parameter group for maintenace '
DBPARAMETERGROUP  maintenace-pramas-group  mysql5.6  parameter group for maintenace
rds-modify-db-parameter-group --db-parameter-group-name maintenace-pramas-group --region us-east --parameters 'name=log_bin_trust_function_creators, value=true, method=immediate'
$ rds-modify-db-parameter-group --db-parameter-group-name maintenace-pramas-group --parameters 'name=log_bin_trust_function_creators,value=true,method=immediate'
DBPARAMETERGROUP  maintenace-pramas-group
$ rds-modify-db-instance --db-instance-identifier sbtest --db-parameter-group-name maintenace-pramas-group --apply-immediately true
DBINSTANCE  sbtest  2014-01-22T13:52:26.982Z  db.m1.small  mysql  10  sbtest_user  available  sbtest.cfscsg6f7tbd.us-east-1.rds.amazonaws.com  3306  us-east-1a  1  n  5.6.13  general-public-license  y
      SECGROUP  default  active
      PARAMGRP  maintenace-pramas-group  applying
      OPTIONGROUP  default:mysql-5-6  in-sync
$ rds-describe-db-instances sbtest
DBINSTANCE  sbtest  2014-01-22T13:52:26.982Z  db.m1.small  mysql  10  sbtest_user  available  sbtest.cfscsg6f7tbd.us-east-1.rds.amazonaws.com  3306  us-east-1a  1  n  5.6.13  general-public-license  y
      SECGROUP  default  active
      PARAMGRP  maintenace-pramas-group  pending-reboot
      OPTIONGROUP  default:mysql-5-6  in-sync
</code></pre>

<p><code>pending-reboot</code>と出ているので、インスタンスを再起動する。</p>

<pre><code>$ rds-reboot-db-instance sbtest
DBINSTANCE  sbtest  2014-01-22T13:52:26.982Z  db.m1.small  mysql  10  sbtest_user  rebooting  sbtest.cfscsg6f7tbd.us-east-1.rds.amazonaws.com  3306  us-east-1a  1  n  5.6.13  general-public-license  y
      SECGROUP  default  active
      PARAMGRP  maintenace-pramas-group  pending-reboot
      OPTIONGROUP  default:mysql-5-6  in-sync
$ rds-describe-db-instances sbtest
DBINSTANCE  sbtest  2014-01-22T13:52:26.982Z  db.m1.small  mysql  10  sbtest_user  rebooting  sbtest.cfscsg6f7tbd.us-east-1.rds.amazonaws.com  3306  us-east-1a  1  n  5.6.13  general-public-license  y
      SECGROUP  default  active
      PARAMGRP  maintenace-pramas-group  in-sync
      OPTIONGROUP  default:mysql-5-6  in-sync
</code></pre>

<p><code>in-sync</code>となっていることを確認する。</p>

<a name="L......"></a>
<h2>実行</h2>

<p>pt-online-schemaを実行する際に、alter文で列のrenameを行なうとき（あるいはchange columnを行なうとき？）には以下のログが出る。</p>

<pre><code>The tool should handle this correctly, but you should test it first because if it fails the renamed columns' data will be lost!  Specify --no-check-alter to disable this check and perform the --alter.
</code></pre>

<p>今回は<code>&ndash;alter=&lsquo;change column pad new_pad char(60),add column pad char(60)&rsquo;</code>という風に、列名の変更と変更前の列の再作成を行なうために実行の際には<code>&ndash;no-check-alter</code>を付与した。こんな感じでオプションに引数を与えておけばOK。</p>

<pre><code>./pt-online-schema-change --alter='change column pad new_pad char(60),add column pad char(60)' h=sbtest.cfscsg6f7tbd.us-east-1.rds.amazonaws.com,P=3306,D=db_sbtest,t=sbtest,u=sbtest_user,p=sbtest_passwd --statistics --recursion-method processlist --print --execute --no-check-alter
</code></pre>

<p>生のalter文との処理に比べて、さすがに時間はかかる。ただ、CPU利用率は抑えられるし、何よりオンラインでalter文を発行できるメリットは大きい。とはいえ、MySQL5.6からalterはオンラインに対応するようにはなっているので、MySQL5.5以前のバージョンを使っている場合は利用を検討する価値はあるように思う。</p>

<a name="L........."></a>
<h2>おまけ</h2>

<p>cpanmでDBD::mysqlをインストールしようとしたら、以下の様なエラーが出て失敗した。</p>

<pre><code>t/10connect.t ........................ Bailout called.  Further testing stopped:  ERROR: Access denied for user 'root'@'localhost' (using password: NO)
</code></pre>

<p>ログを調べると以下のように出ていた。</p>

<pre><code>You can also optionally set the user to run 'make test' with:

perl Makefile.PL --testuser=username
</code></pre>

<p>なので、rootでlocalhostのmysqlにアクセスできるようにするための設定を行ってあげればOK。</p>

<pre><code>$ sudo perl Makefile.PL --testuser=root --testpassword=root_password
Password:
I will use the following settings for compiling and testing:

  cflags        (mysql_config ) = -I/usr/local/Cellar/mysql/5.6.10/include  -Os -g -fno-strict-aliasing
  embedded      (mysql_config ) =
  ldflags       (mysql_config ) =
  libs          (mysql_config ) = -L/usr/local/Cellar/mysql/5.6.10/lib -lmysqlclient
  mysql_config  (guessed      ) = mysql_config
  nocatchstderr (default      ) = 0
  nofoundrows   (default      ) = 0
  ssl           (guessed      ) = 0
  testdb        (default      ) = test
  testhost      (default      ) =
  testpassword  (User's choice) = root_password
  testport      (default      ) =
  testsocket    (default      ) =
  testuser      (User's choice) = root

To change these settings, see 'perl Makefile.PL --help' and
'perldoc DBD::mysql::INSTALL'.

Using DBI 1.622 (for perl 5.016002 on darwin-thread-multi-2level) installed in /System/Library/Perl/Extras/5.16/darwin-thread-multi-2level/auto/DBI/
Writing Makefile for DBD::mysql
Writing MYMETA.yml and MYMETA.json
</code></pre>

<p>あとは<code>make &amp;&amp; make test &amp;&amp; sudo make install</code>しておけばOK。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jenkinsでのテスト自動化いろいろ]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/01/13/auto-test-on-jenkins/"/>
    <updated>2014-01-13T12:28:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/01/13/auto-test-on-jenkins</id>
    <content type="html"><![CDATA[<p>jenkins上でテストを実行したい、自動化したいというリクエストが来たので、その設定方法をまとめた。</p>

<p>今回はplay2.2.1のscalaをサンプルプロジェクトととした。</p>

<!-- more -->


<a name="L....................."></a>
<h2>環境の基本情報</h2>

<p>今回はこんな設定で試した。setup.shは結構長いけど、簡単に言うとjdkを入れて、jenkins、apache2とscala2.10のインストール、apache2がjenkinsのフロントエンドとなるように設定しているだけ。</p>

<figure class='code'><figcaption><span>Vagrant / vagrantでubuntuを入れて、jenkins,apapcheをセットアップ。</span><a target='_blank' href='https://gist.github.com/8394448'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Vagrantfile API/syntax version. Don&#39;t touch unless you know what you&#39;re doing!</span>
</span><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;precise&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s2">&quot;/Users/sgyk/local/vagrant/box/precise-server-cloudimg-amd64-vagrant-disk1.box&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">auto_detect</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:presice</span> <span class="k">do</span> <span class="o">|</span><span class="n">presice</span><span class="o">|</span>
</span><span class='line'>    <span class="n">presice</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s2">&quot;precise&quot;</span>
</span><span class='line'>    <span class="n">presice</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;192.168.56.100&quot;</span>
</span><span class='line'>    <span class="n">presice</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="mi">2048</span><span class="o">]</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;jenkins_presice&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">presice</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;data1&quot;</span><span class="p">,</span> <span class="s2">&quot;/vagrant_data&quot;</span>
</span><span class='line'>    <span class="n">presice</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:shell</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;./setup.sh&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>setup.sh / vagrantでubuntuを入れて、jenkins,apapcheをセットアップ。</span><a target='_blank' href='https://gist.github.com/8394448'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ssh setting</span>
</span><span class='line'>su - vagrant -c <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">  mkdir -p ${HOME}/.ssh</span>
</span><span class='line'><span class="s1">  ## for more secure</span>
</span><span class='line'><span class="s1">  # ssh-keygen -t rsa -q -P &quot;&quot; -f ~/.ssh/id_dsa</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  ## sandbox setting</span>
</span><span class='line'><span class="s1">  wget -q -O ${HOME}/.ssh/id_dsa https://raw.github.com/mitchellh/vagrant/master/keys/vagrant</span>
</span><span class='line'><span class="s1">  wget -q -O ${HOME}/.ssh/id_dsa.pub https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  cat $HOME/.ssh/id_dsa.pub &gt;&gt; $HOME/.ssh/authorized_keys</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  chmod 700 ${HOME}/.ssh</span>
</span><span class='line'><span class="s1">  chmod 600 ${HOME}/.ssh/id_dsa*</span>
</span><span class='line'><span class="s1">&#39;</span>
</span><span class='line'><span class="c"># ssh speed up</span>
</span><span class='line'><span class="nb">echo </span>UseDNS no &gt;&gt; /etc/ssh/sshd_config
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> /tmp
</span><span class='line'>wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key <span class="p">|</span> sudo apt-key add -
</span><span class='line'>sudo sh -c <span class="s1">&#39;echo deb http://pkg.jenkins-ci.org/debian binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#39;</span>
</span><span class='line'>sudo apt-get -fy update
</span><span class='line'>sudo apt-get -y install git openjdk-7-jdk apache2 jenkins zip unzip
</span><span class='line'>
</span><span class='line'><span class="c"># Setting up an Apache Proxy for port 80 -&gt; 8080</span>
</span><span class='line'>sudo a2enmod proxy
</span><span class='line'>sudo a2enmod proxy_http
</span><span class='line'>sudo a2dissite default
</span><span class='line'>sudo cat <span class="s">&lt;&lt;EOF &gt; /etc/apache2/sites-available/jenkins</span>
</span><span class='line'><span class="s">&lt;VirtualHost *:80&gt;</span>
</span><span class='line'><span class="s">    ServerAdmin webmaster@localhost</span>
</span><span class='line'><span class="s">    ServerName ci.presice.com</span>
</span><span class='line'><span class="s">    ServerAlias ci</span>
</span><span class='line'><span class="s">    ProxyRequests Off</span>
</span><span class='line'><span class="s">    &lt;Proxy *&gt;</span>
</span><span class='line'><span class="s">        Order deny,allow</span>
</span><span class='line'><span class="s">        Allow from all</span>
</span><span class='line'><span class="s">    &lt;/Proxy&gt;</span>
</span><span class='line'><span class="s">    ProxyPreserveHost on</span>
</span><span class='line'><span class="s">    ProxyPass / http://localhost:8080/</span>
</span><span class='line'><span class="s">&lt;/VirtualHost&gt;</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>
</span><span class='line'>sudo a2ensite jenkins
</span><span class='line'>sudo apache2ctl restart
</span><span class='line'>
</span><span class='line'><span class="c"># scala</span>
</span><span class='line'><span class="nv">DOWNLOAD_URL</span><span class="o">=</span>http://www.scala-lang.org/files/archive/scala-2.10.3.tgz
</span><span class='line'><span class="nv">SCALA_TGZ</span><span class="o">=</span><span class="sb">`</span>basename <span class="k">${</span><span class="nv">DOWNLOAD_URL</span><span class="k">}</span><span class="sb">`</span>
</span><span class='line'><span class="nv">SCALA_DIR</span><span class="o">=</span><span class="sb">`</span>basename <span class="k">${</span><span class="nv">SCALA_TGZ</span><span class="k">}</span> .tgz<span class="sb">`</span>
</span><span class='line'>wget -q -O /tmp/<span class="k">${</span><span class="nv">SCALA_TGZ</span><span class="k">}</span> <span class="k">${</span><span class="nv">DOWNLOAD_URL</span><span class="k">}</span>
</span><span class='line'>sudo tar zxf /tmp/<span class="k">${</span><span class="nv">SCALA_TGZ</span><span class="k">}</span> -C /usr/local/
</span><span class='line'>sudo ln -s /usr/local/<span class="k">${</span><span class="nv">SCALA_DIR</span><span class="k">}</span> /usr/local/scala
</span><span class='line'>
</span><span class='line'><span class="c"># setting environment</span>
</span><span class='line'><span class="nv">SETTING_FILE</span><span class="o">=</span>/etc/profile.d/append_environment_values.sh
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;#!/bin/bash&#39;</span> <span class="p">|</span> sudo tee -a <span class="k">${</span><span class="nv">SETTING_FILE</span><span class="k">}</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;# added by vagrant setup.sh&#39;</span> <span class="p">|</span> sudo tee -a <span class="k">${</span><span class="nv">SETTING_FILE</span><span class="k">}</span>
</span><span class='line'><span class="nb">echo</span> <span class="p">|</span> sudo tee -a <span class="k">${</span><span class="nv">SETTING_FILE</span><span class="k">}</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-amd64&#39;</span> <span class="p">|</span> sudo tee -a <span class="k">${</span><span class="nv">SETTING_FILE</span><span class="k">}</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export SCALA_HOME=/usr/local/scala&#39;</span> <span class="p">|</span> sudo tee -a <span class="k">${</span><span class="nv">SETTING_FILE</span><span class="k">}</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;export PATH=${SCALA_HOME}/bin:${JAVA_HOME}/bin:${PATH}&#39;</span> <span class="p">|</span> sudo tee -a <span class="k">${</span><span class="nv">SETTING_FILE</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<a name="L.................................git......"></a>
<h2>サンプルプロジェクトのgit設定</h2>

<p>サンプルプロジェクトはPlayframeworkなので、jenkinsがplayコマンドを使えるようにする。</p>

<pre><code>vagrant@precise:~$ wget http://downloads.typesafe.com/play/2.2.1/play-2.2.1.zip
vagrant@precise:~$ unzip play-2.2.1.zip &gt; /dev/null
vagrant@precise:~$ cd play-2.2.1/
vagrant@precise:~/play-2.2.1$ sudo chmod +x play
vagrant@precise:~/play-2.2.1$ sudo chmod -R a+w framework/
vagrant@precise:~/play-2.2.1$ sudo chmod -R a+w repository/
vagrant@precise:~/play-2.2.1$ cd framework/
vagrant@precise:~/play-2.2.1/framework$ find . -maxdepth 1 -type f | grep -v '.bat' | xargs sudo chmod a+x
</code></pre>

<p>サンプルプロジェクト用のgitディレクトリを用意する。</p>

<pre><code>vagrant@precise:~$ mkdir git
vagrant@precise:~$ cd git
vagrant@precise:~/git$ mkdir play_sample.git
vagrant@precise:~/git$ cd play_sample.git/
vagrant@precise:~/git/play_sample.git$ git --bare init
</code></pre>

<p>このへんぐらいはまではsetup.shに盛り込んでよかったかも。</p>

<p>以下はサンプルプロジェクトの開発場所にて。</p>

<pre><code>[sgyk@fujishima] 14-01-13 4:01:54 ~/local/script/scala/play_sample
$ git init
[sgyk@fujishima] 14-01-13 4:01:59 ~/local/script/scala/play_sample (git)-[master] {?}
$ git add .
[sgyk@fujishima] 14-01-13 4:02:04 ~/local/script/scala/play_sample (git)-[master] {?}
$ git commit -m "initial commit"
[master (root-commit) d3458d3] initial commit
[sgyk@fujishima] 14-01-13 4:11:23 ~/local/script/scala/play_sample (git)-[master] {?}
$ git remote add origin ssh://vagrant@presice/home/vagrant/git/play_sample.git
[sgyk@fujishima] 14-01-13 4:11:24 ~/local/script/scala/play_sample (git)-[master] {?}
$ git push origin master
Counting objects: 32, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (23/23), done.
Writing objects: 100% (32/32), 38.22 KiB, done.
Total 32 (delta 0), reused 0 (delta 0)
To ssh://vagrant@presice/home/vagrant/git/play_sample.git
 * [new branch]      master -&gt; master
</code></pre>

<p>これでgitの準備は完了</p>

<p>ちなみに、通常のsshコマンドでvagrantのVMにアクセスする場合は以下のようにしてsshのconfigに追加しておくと楽。</p>

<pre><code>vagrant ssh-config --host presice &gt;&gt; ~/.ssh/config
</code></pre>

<p>今回はsshでgitにpushするようにしたので、このように設定しておくとハマりにくくなる。と思う。</p>

<a name="jenkins........."></a>
<h2>jenkinsの設定</h2>

<p>最初にjenkinsからGitを扱えるようにプラグインをインストールする。左メニュー「Jenkinsの管理」から「プラグインの管理」にアクセスし、「利用可能」タブから「Jenkins GIT plugin」を選択し、「ダウンロードして再起動後にインストール」を押下する。その後、jenkinsを再起動する。</p>

<p>左メニュー「新規ジョブの作成」をクリック。<br>
ジョブ名を入力、「フリースタイル・プロジェクトのビルド」を選択して、OKを押下する。「ソースコード管理」でGitを選択し、Repository URLを入力する。「適用」、「保存」の順番に押下する。</p>

<p>これでjenkinsへのリポジトリ登録が完了。</p>

<p>ビルドの設定を行う。リストボックスの「ビルド手順の追加」から、「シェルの実行」を選択し、以下の様なシェルを入力する。</p>

<pre><code>#!/bin/bash
play=/home/vagrant/play-2.2.1/play
cd ${WORKSPACE}

${play} clean compile test

exit 0
</code></pre>

<p>jenkinsにはPlayframeworkのプラグインがあるのだけど、うまく実行できなかったので上記のようにシェル実行するようにした。</p>

<p>テスト結果は<code>${PLAY_HOME}/target/test-reports/{ApplicationSpec,IntegrationSpec}.xml</code>に出力されているので、「ビルド後の処理」に「JUnitテスト結果の集計」を追加して、<code>**/target/test-reports/*.xml</code>と入力すればOK。</p>

<p>この設定により、ビルド後、左メニューの「テスト結果」からテスト結果のレポートを見ることができる。</p>

<a name="jenkins............................................................"></a>
<h3>jenkins上で任意のタイミングでテストを実行する。</h3>

<p><a href="http://yuroyoro.hatenablog.com/entry/2012/12/20/175205">Jenkinsで外部パラメータで与えたブランチを対象にビルドできるようにしておくと凄惨性あがって墓ドル</a>を参考に設定する。</p>

<p>設定画面にて、「ビルドのパラメータ化」にチェックを入れる。「パラメータの追加」というリストボックスで「文字列」を選択し、「名前」、「デフォルト値」、「説明」を適宜入力する。入力を終えたら、とりあえず「適用」をクリックする。</p>

<p>「ソースコード管理」の項目にある「Branches to build」で、「Branch Specifier」の欄を<code>$branch</code>に変更する。</p>

<p>「適用」、「保存」の順にクリックする。</p>

<p>GUIからビルドを実行したい場合は、左メニュー「パラメータ付きビルド」をクリックして、ビルドしたいブランチを設定して、ビルドをクリックする。<br>
CLIから実行したい場合は、以下のようにcurlを投げると良い。</p>

<pre><code>vagrant@precise:~/local/script$ cat jenkins_build.sh
#!/bin/bash

JENKINS_JOB_URL=http://192.168.56.100/job/play_sample/buildWithParameters?branch=origin/feature/add_plugin_scct

curl ${JENKINS_JOB_URL}

exit 0
</code></pre>

<a name="jenkins............................................."></a>
<h3>jenkins上で定期的にテストを実行する。</h3>

<p>これは簡単で、プロジェクトごとの設定画面から、ビルド・トリガに「定期的に実行」を選択して、cronっぽく設定すればOK。<br>
ただし、これは固定的な設定なので任意のブランチを選択することはできない。</p>

<a name="L..................push............jenkins................................."></a>
<h3>リポジトリにpushする度にjenkins上でテストを実行する。</h3>

<p>リポジトリ側の<code>hook/post-receive</code>に以下のようなスクリプトを用意すればOK。微妙にハマったのが、post-receiveに渡される引数は<code>$1</code>, <code>$2</code>のようなコマンドライン引数ではなくて標準入力だということ。で、その標準入力をどう捉えればいいのかが、よくわからなかった。</p>

<pre><code>#!/bin/bash
while read oldrev newrev refname
do
    branch=$(git rev-parse --symbolic --abbrev-ref $refname)
    echo branch is ${branch}
    JENKINS_JOB_URL=http://192.168.56.100/job/play_sample/buildWithParameters?branch=origin/${branch}
    curl ${JENKINS_JOB_URL}
done

exit 0
</code></pre>

<p>参考：<a href="http://stackoverflow.com/questions/7351551/writing-a-git-post-receive-hook-to-deal-with-a-specific-branch">Writing a git post-receive hook to deal with a specific branch</a>の<a href="http://stackoverflow.com/a/13057643">http://stackoverflow.com/a/13057643</a>より。</p>

<a name="L........."></a>
<h2>おまけ</h2>

<p>jenkinsからテストを実行しようとしたら、以下のようなエラーが発生した。</p>

<pre><code>java.io.IOException: No such file or directory
    at java.io.UnixFileSystem.createFileExclusively(Native Method)
    at java.io.File.createNewFile(File.java:947)
    at xsbt.boot.Locks$.apply0(Locks.scala:35)
    at xsbt.boot.Locks$.apply(Locks.scala:28)
    at xsbt.boot.Launch.locked(Launch.scala:178)
    at xsbt.boot.Launch.app(Launch.scala:93)
    at xsbt.boot.Launch.app(Launch.scala:91)
    at xsbt.boot.Launch$.run(Launch.scala:51)
    at xsbt.boot.Launch$$anonfun$explicit$1.apply(Launch.scala:45)
    at xsbt.boot.Launch$.launch(Launch.scala:65)
    at xsbt.boot.Launch$.apply(Launch.scala:16)
    at xsbt.boot.Boot$.runImpl(Boot.scala:32)
    at xsbt.boot.Boot$.main(Boot.scala:21)
    at xsbt.boot.Boot.main(Boot.scala)
Error during sbt execution: java.io.IOException: No such file or directory
</code></pre>

<p>エラー発生箇所: <a href="https://github.com/harrah/xsbt/blob/0.13/launch/src/main/scala/xsbt/boot/Locks.scala#L35">https://github.com/harrah/xsbt/blob/0.13/launch/src/main/scala/xsbt/boot/Locks.scala#L35</a><br>解説は<a href="http://stackoverflow.com/a/8105883">http://stackoverflow.com/a/8105883</a>を参照。<br>要は、playコマンドがあるディレクトリにファイルとかをつくろうとしたけど、ダメでした、というエラー。なので、以下のように対応すればOK。</p>

<pre><code>vagrant@precise:~/play-2.2.1$ sudo chmod a+x play
vagrant@precise:~/play-2.2.1$ sudo chmod -R a+w framework/
vagrant@precise:~/play-2.2.1$ sudo chmod -R a+w repository/
vagrant@precise:~/play-2.2.1$ cd framework/
vagrant@precise:~/play-2.2.1/framework$ find . -maxdepth 1 -type f | grep -v '.bat' | xargs sudo chmod a+x
</code></pre>

<p>また、以下のようなエラーが出る場合がある。</p>

<pre><code>java.io.FileNotFoundException: /var/lib/jenkins/jobs/play_sample/workspace/target/resolution-cache/play_sample/play_sample_2.10/1.0-SNAPSHOT/resolved.xml.xml
</code></pre>

<p>workspaceを一旦クリアして再ビルドすればOK</p>

<hr />

<p>以上で、任意 / 定期 / push後 のタイミングで自動テストをjenkins上で行なうことが可能となった。また、任意およびpush後のテストは任意のブランチに対して行なうことができるので、サーバ上でバシバシテストを回していくことができるんじゃないかなーと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mesos上にHadoopをインストールする]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/01/10/install-hadoop-on-mesos/"/>
    <updated>2014-01-10T00:51:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/01/10/install-hadoop-on-mesos</id>
    <content type="html"><![CDATA[<p>前回、mesosをDEBパッケージを使ってインストールする方法を示した。これを前提としてmesosが動いているクラスタにHadoopをインストールし、wordcountをchrnosを通じて動かすところまでの手順を示す。</p>

<p>ちなみに見てくれている人の時間をムダにしないために言うと、一部を除けば普通の手順(Clouderaのチュートリアルとか)でやれば大抵は普通に動くはず。なのでHadoopに詳しい人は、<a href="https://www.google.co.jp/search?q=hadoop+mesos&amp;oq=hadoop+mesos&amp;aqs=chrome..69i57j69i60l3j0l2.2556j0j7&amp;sourceid=chrome&amp;espv=210&amp;es_sm=91&amp;ie=UTF-8">「Hadoop mesos」でググったほう</a>が良いと思う。ここではSparkの利用を見越しての設定を行なうのと、とHadoopもmesosもあまり詳しくない人向けに記述する。Chronosについては、まぁついでにというレベルだし、実際非常に導入が楽なので、<a href="http://airbnb.github.io/chronos/#Quick%20Start">公式のQuick Start</a>でも見たほうが良い。</p>

<!-- more -->


<a name="Hadoop........."></a>
<h2>Hadoopの準備</h2>

<p>Hadoopの作業場所を用意してあげる。実際は諸々インストールした後にmapred(hdfs？)ユーザのホームディレクトリに用意するのが正しい作法なのだろうと後から気づいた。</p>

<pre><code>vagrant@master1:/tmp$ mkdir -p /home/vagrant/hadoop_home
</code></pre>

<p>1-click installerのダウンロードとインストール、リポジトリキーのインストールを行なう。</p>

<pre><code>vagrant@master1:/tmp$ wget http://archive.cloudera.com/cdh4/one-click-install/precise/amd64/cdh4-repository_1.0_all.deb
--2014-01-01 08:51:10--  http://archive.cloudera.com/cdh4/one-click-install/precise/amd64/cdh4-repository_1.0_all.deb
Resolving archive.cloudera.com (archive.cloudera.com)... 184.73.217.71
Connecting to archive.cloudera.com (archive.cloudera.com)|184.73.217.71|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3304 (3.2K) [application/x-debian-package]
Saving to: `cdh4-repository_1.0_all.deb'

100%[============================================================&gt;] 3,304       --.-K/s   in 0.001s

2014-01-01 08:51:12 (4.34 MB/s) - `cdh4-repository_1.0_all.deb' saved [3304/3304]

vagrant@master1:/tmp$ sudo dpkg -i cdh4-repository_1.0_all.deb
(Reading database ... 72497 files and directories currently installed.)
Preparing to replace cdh4-repository 1.0 (using cdh4-repository_1.0_all.deb) ...
Unpacking replacement cdh4-repository ...
Setting up cdh4-repository (1.0) ...
gpg: keyring `/etc/apt/trusted.gpg.d/cloudera-cdh4.gpg' created
gpg: key 02A818DD: public key "Cloudera Apt Repository" imported
gpg: Total number processed: 1
gpg:               imported: 1
vagrant@master1:/tmp$ curl -s http://archive.cloudera.com/cdh4/ubuntu/precise/amd64/cdh/archive.key | sudo apt-key add -
OK
</code></pre>

<p>CDH4 with MRv1をインストールする。</p>

<pre><code># マスターノードのみ(jobtrackerはいらないかも？というか、多分いらない)
vagrant@master1:/tmp$ sudo apt-get -y install hadoop-0.20-mapreduce-jobtracker hadoop-hdfs-namenode hadoop-client
# マスターノードとスレーブノードの両方
vagrant@master1:/tmp$ sudo apt-get -y install hadoop-0.20-mapreduce-tasktracker hadoop-hdfs-datanode hadoop-client
</code></pre>

<p>設定ファイルを修正する。細かい点については多々不適切というかチューニングの余地があると思うけど、とりあえず動かすならこの設定で大丈夫だと思う。</p>

<figure class='code'><figcaption><span>core-site.xml / </span><a target='_blank' href='https://gist.github.com/8346265'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>fs.defaultFS<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;value&gt;</span>hdfs://master1:8020/<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>hadoop.tmp.dir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;value&gt;</span>/tmp/hadoop<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>hadoop.security.group.mapping<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;value&gt;</span>org.apache.hadoop.security.ShellBasedUnixGroupsMapping<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>hdfs-site.xml / </span><a target='_blank' href='https://gist.github.com/8346335'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>     <span class="nt">&lt;name&gt;</span>dfs.name.dir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>     <span class="nt">&lt;value&gt;</span>/var/lib/hadoop-hdfs/cache/hdfs/dfs/name<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>dfs.permissions.superusergroup<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;value&gt;</span>hadoop<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>dfs.name.dir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;value&gt;</span>/home/vagrant/hadoop_home/data/1/dfs/nn<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>dfs.webhdfs.enabled<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>dfs.datanode.data.dir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;value&gt;</span>/home/vagrant/hadoop_home/data/1/dfs/dn,/home/vagrant/hadoop_home/data/2/dfs/dn,/home/vagrant/hadoop_home/data/3/dfs/dn<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>mapred-site.xml / </span><a target='_blank' href='https://gist.github.com/8346355'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>   <span class="nt">&lt;name&gt;</span>mapred.job.tracker<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>   <span class="nt">&lt;value&gt;</span>master1:8021<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>   <span class="nt">&lt;name&gt;</span>mapred.local.dir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>   <span class="nt">&lt;value&gt;</span>/home/vagrant/hadoop_home/data/1/mapred/local,/home/vagrant/hadoop_home/data/2/mapred/local,/home/vagrant/hadoop_home/data/3/mapred/local<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>   <span class="nt">&lt;name&gt;</span>mapreduce.jobtracker.restart.recover<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>   <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- The web UI will bind --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>      <span class="nt">&lt;name&gt;</span>mapred.job.tracker.http.address<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;value&gt;&lt;/value&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- This identifies the mesos-master. E.g. zk://1.1.1.1:2181,2.2.2.2:2181,3.3.3.3:2181/mesos --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property&gt;</span>
</span><span class='line'>      <span class="nt">&lt;name&gt;</span>mapred.mesos.master<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;value&gt;</span>zk://master1:2181,slave1:2181,slave2:2181/mesos<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">      This property identifies the location of the modified hadoop distribution containing this XML file.</span>
</span><span class='line'><span class="c">      The mesos slave will download this distribution if a hadoop job is launched, extract the file and use the hadoop binary</span>
</span><span class='line'><span class="c">      to start the task tracker.</span>
</span><span class='line'><span class="c">      Sample hdfs://&lt;hdfs-namenode-host &amp; optional port&gt;/hadoop-2.0.0-mr1-cdh4.2.1.tgz -&gt; hdfs://namenode.mesosphere.io:9000/hadoop-2.0.0-mr1-cdh4.2.1.tgz</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.mesos.executor.uri<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>hdfs://master1/hadoop-2.0.0-mr1-cdh4.2.1.tgz<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">      The remaining properties do not require adjustment, but for running production jobs it&#39;s recommended to modify them</span>
</span><span class='line'><span class="c">      to optimize for different cluster &amp; machine sizes.</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.mesos.slot.cpus<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>0.20<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.mesos.slot.disk<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- The value is in MB. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>512<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.mesos.slot.mem<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Note that this is the total memory required for</span>
</span><span class='line'><span class="c">         JVM overhead (256 MB) and the heap (-Xmx) of the task.</span>
</span><span class='line'><span class="c">         The value is in MB. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>368<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.mesos.tasktracker.mem<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>368<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.mesos.total.map.slots.minimum<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>1<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.mesos.total.reduce.slots.minimum<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>1<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- The values below should work out of the box but you might want to optimize some of them for running production jobs --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.jobtracker.taskScheduler<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>org.apache.hadoop.mapred.MesosScheduler<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.mesos.taskScheduler<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>org.apache.hadoop.mapred.JobQueueTaskScheduler<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- The MesosScheduler will record some stats in this file --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.mesos.state.file<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>/tmp/jobtracker-state<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- This is only relevant if a fixed slot policy is used --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.tasktracker.map.tasks.maximum<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>10<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- This is only relevant if a fixed slot policy is used --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.tasktracker.reduce.tasks.maximum<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>10<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.jobtracker.expire.trackers.interval<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>60000<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.tasktracker.expiry.interval<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>60000<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.jobtracker.restart.recover<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.child.java.opts<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>-XX:+UseParallelGC -Xmx256m<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.tasktracker.dns.interface<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>eth0<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- The reduce tasks start when 60% of the maps are done --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.job.reduce.slowstart.completedmaps<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>0.60<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.reduce.slowstart.completed.maps<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>0.60<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- This is important when the tasktracker serves tons of maps, TODO(*) templetize --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.tasktracker.http.threads<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>8<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>tasktracker.http.threads<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>8<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.reduce.shuffle.parallelcopies<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>20<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.reduce.parallel.copies<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>20<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.jobtracker.handler.count<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>70<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.job.tracker.handler.count<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>70<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.reduce.shuffle.retry-delay.max.ms<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>10000<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.reduce.shuffle.connect.timeout<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>10000<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.reduce.shuffle.read.timeout<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>10000<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.reduce.shuffle.maxfetchfailures<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>4<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.reduce.shuffle.notify.readerror<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.map.output.compress<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.task.io.sort.mb<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>30<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>io.sort.mb<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>30<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.task.io.sort.factor<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>10<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>io.sort.factor<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>10<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.job.jvm.numtasks<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>-1<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.job.reuse.jvm.num.tasks<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>-1<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.job.ubertask.enable<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.job.speculative.speculativecap<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>0.01<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>webinterface.private.actions<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.jobtracker.webinterface.trusted<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.reduce.max.attempts<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>6<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.map.max.attempts<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>6<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.map.maxattempts<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>6<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.reduce.maxattempts<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>6<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.max.tracker.failures<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>6<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.job.maxtaskfailures.per.tracker<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>6<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.reduce.merge.memtomem.enabled<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.skip.map.max.skip.records<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>10<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.map.skip.maxrecords<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>10<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.reduce.skip.maxgroups<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>2<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.skip.reduce.max.skip.groups<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>2<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapreduce.fileoutputcommitter.marksuccessfuljobs<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>false<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>mapred.mesos.tasktracker.cpus<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- This is the number of CPUs reserved for the container.--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;value&gt;</span>0.15<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>この設定について、nameノード1台、taskノード2台で試す場合</p>

<pre><code>&lt;property&gt;
    &lt;name&gt;mapred.mesos.total.map.slots.minimum&lt;/name&gt;
    &lt;value&gt;1&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;mapred.mesos.total.reduce.slots.minimum&lt;/name&gt;
    &lt;value&gt;1&lt;/value&gt;
&lt;/property&gt;
</code></pre>

<p>デフォルトだと、それぞれvalueはゼロとなっているが、その設定のままだと、例えばこの後に何らかのJobを動かしてMapperが2つ動いてしまい、Reducerが動かなくなってしまう(Mapper 100%, Reducer 0%でPendingしてしまう)。なので、それぞれ(Reducerだけでいいかもしれない)のminimumを1にしておく必要がある。</p>

<p>設定ファイルの修正が済んだら、必要なディレクトリを用意する。</p>

<pre><code>vagrant@master1:/tmp$ sudo mkdir -p /home/vagrant/hadoop_home/data/{1,2,3}/mapred/local
vagrant@master1:/tmp$ sudo chown -R mapred:hadoop /home/vagrant/hadoop_home
</code></pre>

<p>ここまでが通常のHadoopの準備。設定ファイルは全ノードにばらまいてdatanodeを再起動しておく。もちろんマスターノードはnamenodeも再起動しておく。</p>

<pre><code>vagrat:master1:~/hadoop_home$ for x in `cd /etc/init.d/; ls hadoop-*`;do sudo service ${x} restart ;done
</code></pre>

<p>次がHadoop on mesosの準備。</p>

<a name="Hadoop.on.mesos...................................."></a>
<h2>Hadoop on mesosとは？（自分なりの理解）</h2>

<p>ここで改めてHadoop on mesosと先ほど準備したHadoopとの違い(?)について、自分なりに理解のおさらいをする。<br>mesosって要は散在しているマシンリソースを束ねてクラスタ化する、みたいなイメージなんだけど、そこにHadoopが乗っかることでスケーラビリティだったり、バッチ処理における耐障害性の向上をもたらすことができるようになる。<br>もう少し整理して言うと、Hadoopのマスターノードがスレーブノードにjobtrackerを通じて仕事を渡して、スレーブノードはtasktrackerを通じて成果を返す。Hadoopのバッチ処理の肝はここにあると思っていて、ばら撒いた仕事がちゃんと期待した成果として戻ってくることを保証してくれることにある。なので、渡した仕事が返ってこなかったり、仕事中にスレーブノードが死んだりしたときに、その仕事を別のスレーブノードに適切に渡してあげないといけないし、マスターノードが死んでた時には新しいマスターノードがちゃんとこれまでの成果を引き継いでおいて、スレーブノードは新しいマスターノードに成果を渡せるようになっておかないといけない。つまり、jobtrackerとtasktrackerの間のコミュケーションを適切に維持していく必要がある。mesosはこの点を強化させていくことができる、のだと思う…。あまり自信がない…。まぁ大筋では外していないと思う。</p>

<a name="Hadoop.on.mesos....................."></a>
<h2>Hadoop on mesosの設定をする。</h2>

<p>なので、Hadoopのjobtrackerやtasktrackerをうまくmesosと融合というか連携というか、アレする必要があるので以下のようにする。以降の手順は<a href="http://mesosphere.io/learn/run-hadoop-on-mesos/#step-0">mesosphereのRun Apache Hadoop on Apache Mesos</a>を踏襲しているので、そちらも参考にされたし。</p>

<pre><code>vagrat:master1:~/hadoop_home$ wget http://downloads.mesosphere.io/dcc/apps/hadoop/distros/mr1-2.0.0-mr1-cdh4.2.1.tar.gz
vagrat:master1:~/hadoop_home$ tar xzf mr1-2.0.0-mr1-cdh4.2.1.tar.gz
vagrat:master1:~/hadoop_home$ cd hadoop-2.0.0-mr1-cdh4.2.1
vagrat:master1:~/hadoop_home/hadoop-2.0.0-mr1-cdh4.2.1 $ wget -O lib/ http://downloads.mesosphere.io/dcc/apps/hadoop/hadoop-mesos/hadoop-mesos-0.0.3.jar
vagrat:master1:~/hadoop_home/hadoop-2.0.0-mr1-cdh4.2.1 $ wget -O lib/ wget http://downloads.mesosphere.io/maven/org/apache/mesos/mesos/0.14.0-rc4/mesos-0.14.0-rc4.jar
</code></pre>

<p>ここで取得した2つのjarをHadoopのlibディレクトリに配置して、それをtarで梱包したら出来上がり。あとはこの梱包したmesos用Hadoopの実行モジュールをスレーブノードが使えるようにHDFS上にアップする。試してはいないけど、これって多分何らかの方法で実行モジュールが取得できればいいと思うので、S3とかにアップロードしてもいいんじゃないかと思う。もちろんその場合は、<code>mapred.mesos.executor.uri</code>のvalueをS3のURLにしておく必要がある。はず。</p>

<pre><code>vagrat:master1:~/hadoop_home/hadoop-2.0.0-mr1-cdh4.2.1 $ cd ../
vagrat:master1:~/hadoop_home$ tar czf hadoop-2.0.0-mr1-cdh4.2.1.tar.gz hadoop-2.0.0-mr1-cdh4.2.1
vagrat:master1:~/hadoop_home$ sudo -u mapred /usr/bin/hadoop dfs -copyFromLocal ./hadoop-2.0.0-mr1-cdh4.2.1.tgz /
</code></pre>

<p>これでおおよその準備は整った。で、バッチ処理を走らせるにあたってjobtrackerを起動させるわけだけど、先ほど触れたようにmesosがjobtrackerやtasktrackerをよろしくやってくれる（と思っている）ので、これらはHDFS上にアップした実行モジュールのjobtrackerを用いる。マスターノードで起動させるので、梱包前のディレクトリに移動し、以下の様な感じで起動させれば良い。</p>

<figure class='code'><figcaption><span>launch_hadoop_jobtracker.sh / </span><a target='_blank' href='https://gist.github.com/8357410'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>sudo -u mapred -g hadoop <span class="se">\</span>
</span><span class='line'>env <span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/lib/jvm/java-1.7.0-openjdk-amd64 <span class="se">\</span>
</span><span class='line'><span class="nv">HADOOP_HOME</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/hadoop-2.0.0-mr1-cdh4.2.1 <span class="se">\</span>
</span><span class='line'><span class="nv">HADOOP_CONF_DIR</span><span class="o">=</span>/etc/hadoop/conf <span class="se">\</span>
</span><span class='line'><span class="nv">JAVA_LIBRARY_PATH</span><span class="o">=</span>/usr/local/lib/ <span class="se">\</span>
</span><span class='line'><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/hadoop-2.0.0-mr1-cdh4.2.1/bin/hadoop jobtracker
</span></code></pre></td></tr></table></div></figure>


<p>上記のスクリプトで起動されるjobtrackerはserviceスクリプトみたいにデーモン化はされなくて、そのままコンソール上にログを垂れ流す。止めたい場合は<code>Ctrl + C</code>とすると、でjobtrackerがシャットダウンされる。デーモン化させたい場合は、<code>${HADOOP_HOME}/bin/hadoop_daemon.sh</code>とかに渡してあげればいいんじゃないかと。試してないけど。あと、上記スクリプトは<code>sudo bash launch_hadoop_jobtracker.sh</code>としてあげてください。</p>

<p>実際に起動してみると、以下の様なログが出て、ジョブ待ちの状態となる。</p>

<pre><code>14/01/10 16:38:00 INFO mapred.ResourcePolicy: JobTracker Status
      Pending Map Tasks: 0
   Pending Reduce Tasks: 0
      Running Map Tasks: 0
   Running Reduce Tasks: 0
         Idle Map Slots: 1
      Idle Reduce Slots: 1
     Inactive Map Slots: 0 (launched but no hearbeat yet)
  Inactive Reduce Slots: 0 (launched but no hearbeat yet)
       Needed Map Slots: 0
    Needed Reduce Slots: 0
     Unhealthy Trackers: 0
14/01/10 16:38:00 INFO mapred.ResourcePolicy: Satisfied map and reduce slots needed.
</code></pre>

<p>これだけみてもつまらないのだけど、この状態でmesosのWebUIにアクセスしてみるとActive Frameworksとして起動中のjobtrackerが登録されているのがわかる。</p>

<p><img src="http://sgykfjsm.github.io/images/2014-01-11T01.44.51.png"></p>

<p>ここからIDのリンクをクリックすると、以下の画面が出てスレーブノードでtasktrackerが起動していることがわかる。</p>

<p><img src="http://sgykfjsm.github.io/images/2014-01-11T01.56.37.png"></p>

<p>さらにTask_Tracker_1のリンクをクリックしたところ。</p>

<p><img src="http://sgykfjsm.github.io/images/2014-01-11T1.59.59.png"></p>

<p>そしてSandboxのリンクをクリックしたところ。HDFS上にアップした実行モジュールがダウンロードされて展開されていることがわかる。ちなみにこのリンクはローカルで名前解決できるようにしておかないと見れないので注意。</p>

<p><img src="http://sgykfjsm.github.io/images/2014-01-11T2.02.44.png"></p>

<p>ちなみにjobtrackerを終わらせるとTerminated Frameworksに移動する。</p>

<p><img src="http://sgykfjsm.github.io/images/2014-01-11T2.51.43.png"></p>

<p>これらのことから、HadoopのjobtrackerとtasktrackerはFrameworkとしてmesosに管理されていることがわかる。つまり、mesosのリソースとしてスレーブノードが管理されることでその上で走るjobtrackerなりtasktrackerも同様に管理されることになる？という理解でいいのだろうか？mesosを利用することでDCをまたいだHadoopジョブが可能になったりしてスケーラビリティが向上するとかの効用もきっとあるのだと思う。</p>

<p>んーでもこのへんの理解はちゃんとmesosの論文を読むなりアーキテクチャの理解を深めないとダメだ。</p>

<p>で。結構長くなったのでChronosを用いたHadoopジョブの実行は次回に持ち越し。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mesosをDEBパッケージからインストールする]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/01/09/install-mesos-with-deb/"/>
    <updated>2014-01-09T06:48:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/01/09/install-mesos-with-deb</id>
    <content type="html"><![CDATA[<p>mesosをインストールする場合、ソースをコンパイルしてインストールすることが公式の<a href="http://mesos.apache.org/gettingstarted/">Getting Started with Apache Mesos</a>に記載されているが、この方法だとコンパイルに非常に時間がかかる（10分から20分ぐらい）ので、<a href="http://mesosphere.io/downloads/">mesosphereが提供しているパッケージ</a>を利用したほうが良い。<br>ここでは、パッケージからインストールする手順をまとめる。</p>

<!-- more -->


<a name="L....................."></a>
<h2>事前準備の前に</h2>

<p>mesosだけを動かすならたぶんメモリは512MBとかでも動くと思うけど、実際にはmesosの上でHadoopやSpark、Chronosを動かす必要がある、というかこれらのアプリケーションと協働しないと意味がないので、クラスターのノードには2GBぐらいのメモリとCPUは2発以上欲しいところ。とりあえず動かすならCPUは1発でも大丈夫。</p>

<p>また、mesosのWeb UIではSlaveがホスト名で表示され、その情報を見ることができるが、Slaveのホスト名が名前解決できるようになっていないといけない。ローカルのVMで試す場合やグローバルで名前解決できない場合は、それぞれを<code>/etc/hosts</code>に登録するなどして置く必要がある。</p>

<p>というか、お金がある人はこんなことに時間を使わずに<a href="https://elastic.mesosphere.io/">Elastic Apache Mesos</a>を使ったほうが良いと思う。マジで。</p>

<p>私のようにお金がない人は以下のように手元の環境で試さざるを得ないと思うので、このポストがそういう人たちの役に立てたら結構うれしい。</p>

<a name="L...................................."></a>
<h2>先に読んでおくと捗る記事</h2>

<ul>
<li><a href="http://steps.dodgson.org/b/2013/03/10/mesos-a-cloud-scheduler/">Mesos: A Cloud Scheduler (1)</a>

<ul>
<li>ソースについての解説があって、mesosを知る上でかなり勉強になる。ただ、記事自体は着目が早かった為か、もしかしたら若干古い可能性がある。</li>
</ul>
</li>
<li><a href="http://d.hatena.ne.jp/kimutansk/searchdiary?word=%2A%5BMesos%5D">夢とガラクタの集積場</a>

<ul>
<li>色々と試行錯誤をされており、大変参考になる。これがなかったら多分mesosは諦めていた。</li>
</ul>
</li>
<li><a href="http://blog.livedoor.jp/sonots/archives/35421955.html">正月休みだし Mesos 触ってみた</a>

<ul>
<li>はっきり言って、私の以降のポストを見るよりかはこっちのほうが読んでてわかりやすい。</li>
</ul>
</li>
</ul>


<a name="L.................."></a>
<h2>事前準備など</h2>

<p>今回はmacのvagrantでubuntu on Virtual Boxな環境で試した。なので、vagrantでの設定も事前準備としてついでにまとめておく。</p>

<a name="Vagrant........."></a>
<h3>Vagrantの設定</h3>

<p>まずは以下のプラグインをインストールする。</p>

<pre><code>$ vagrant pluin install vagrant-cachier
$ vagrant pluin install vagrant-vbguest
$ vagrant pluin install vagrant-vbox-snapshot
</code></pre>

<p>多分使わないけど、なんとなく各VMに対して共有フォルダを用意しておく。
    $ mkdir data{1,2,3}</p>

<p>Ubuntuをローカルにダウンロードしておく。</p>

<pre><code>$ wget -q -O ~/local/vagrant/box/precise-server-cloudimg-amd64-vagrant-disk1.box http://cloud-images.ubuntu.com/vagrant/precise/current/precise-server-cloudimg-amd64-vagrant-disk1.box
</code></pre>

<p>適当な名前でVagrantに登録する。</p>

<pre><code>$ vagrant box add precise ~/local/vagrant/box/precise-server-cloudimg-amd64-vagrant-disk1.box
</code></pre>

<p>Vagrantの設定ファイルを作る
    $ vagrant init precise</p>

<p>設定ファイルを以下のようにする。</p>

<pre><code># -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "precise"
  config.vm.box_url = "/Users/sgyk/local/vagrant/box/precise-server-cloudimg-amd64-vagrant-disk1.box"
  config.cache.auto_detect = true

  config.vm.define :master1 do |master1|
    master1.vm.hostname = "master1"
    master1.vm.network :private_network, ip: "192.168.56.100"
    master1.vm.provider "virtualbox" do |v|
      v.customize ["modifyvm", :id, "--memory", 2048]
      v.name = "mesos_master1"
    end
    master1.vm.synced_folder "data1", "/vagrant_data"
    master1.vm.provision :shell, :path =&gt; "./setup.sh"
  end

  config.vm.define :slave1 do |slave1|
    slave1.vm.hostname = "slave1"
    slave1.vm.network :private_network, ip: "192.168.56.101"
    slave1.vm.provider "virtualbox" do |v|
      v.customize ["modifyvm", :id, "--memory", 2048]
      v.name = "mesos_slave1"
    end
    slave1.vm.synced_folder "data2", "/vagrant_data"
    slave1.vm.provision :shell, :path =&gt; "./setup.sh"
  end

  config.vm.define :slave2 do |slave2|
    slave2.vm.hostname = "slave2"
    slave2.vm.network :private_network, ip: "192.168.56.102"
    slave2.vm.provider "virtualbox" do |v|
      v.customize ["modifyvm", :id, "--memory", 2048]
      v.name = "mesos_slave2"
    end
    slave2.vm.synced_folder "data3", "/vagrant_data"
    slave2.vm.provision :shell, :path =&gt; "./setup.sh"
  end
end
</code></pre>

<p>setup.shの内容は<a href="https://gist.github.com/sgykfjsm/8325561#file-setup-sh">これ</a>。大したことは全くしていなくて、Vagrant用のsshノーパス設定とmesosの依存モジュール（ただしコンパイル時の。いらないかも？）のインストール、mesos本体のインストールを行なう。</p>

<p>だいたいこれでmesosを構築する準備が整う。</p>

<a name="hosts.................."></a>
<h2>hostsを設定する。</h2>

<p>mesosを構築する前に先にhostsを設定しておいたほうが何かとハマらずにすむので、やっておくこと。これが意外と大事。</p>

<pre><code>vagrant@master1:~/scripts$ cat /etc/hosts
# 127.0.0.1     master1 master1 localhost

# The following lines are desirable for IPv6 capable hosts
::1 ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
192.168.56.100 master1
192.168.56.101 slave1
192.168.56.102 slave2
127.0.0.1 localhost
</code></pre>

<p>要は以下のように他ノードの名前解決ができればいいのだけど、ポイントは以下の2つ。</p>

<ul>
<li><code>127.0.0.1 hostname</code>のエントリをコメント文にするなどして無効にすること。</li>
<li><code>127.0.0.1 localhost</code>のエントリは一番下に置いておくこと。</li>
</ul>


<p>それぞれはmesosとは直接関係ないけど、まず1つ目は後でmesos上でSpark Shellを動かす際に、Spark Shellはホスト名にプライベートIPのエントリがあってもなぜかループバックアドレスの方を優先してしまい、その情報を他ノードに渡してしまうため、他ノードからマスターノードへタスクを返すことができなくなってしまう。よって、ホスト名に対応するエントリを1つに限定することでこのような事態を防ぐ必要がある。これってなんか変な気がするけど、わざわざのログで<code>Your hostname, master1 resolves to a loopback address: 127.0.1.1; using 192.168.56.100 instead (on interface eth1)</code>とかって出しているぐらいなのでバグじゃなくて仕様なのだと思う。</p>

<p>2つ目は、Hadoopの利用を見越しての設定。namenodeがローカルで名前解決するときに、/etc/hostsのエントリを上から舐めるんだけど、最初に合致したエントリをnamenodeが採用するため、今回の場合だと127.0.0.1でバインドしてしまう。そうすると、以下の様なエラーが出る。</p>

<pre><code>2013-12-23 14:41:13, 046 INFO org.apache.hadoop.ipc.Client: Retrying connect to server: vagrant-mesos-master1/192.168.56.100:55000. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10,  sleepTime=1 SECONDS)
2013-12-23 14:41:13, 048 WARN org.apache.hadoop.hdfs.server.datanode.DataNode: Problem connecting to server: master1/192.168.56.100:55000
</code></pre>

<p>これを防ぐには、上記のように削除orコメントアウトするか、あるいは一番下の行に持っていくとよい。なお、これはすべてのマシンでやっといたほうがいいらしい。詳細は<a href="http://suzhiyang.appspot.com/?p=188002">ここ</a>を参照のこと。</p>

<p>このhostsファイルの設定は全ノードでやっておくこと。スクリプトでばらまいても良いと思う。</p>

<a name="mesos.................."></a>
<h2>mesosを設定する。</h2>

<p>で、やっと本筋に到達。</p>

<p>Hadoopにしてもそうだけど、分散処理というかクラスタリングというか、その辺のことを行なうための製品は設定が結構ハマりやすい（ような気がする）。なので、ここからがmesosの構築の本番だったりする。</p>

<p>まず、DEBパッケージでインストールすると、<code>/etc/init</code>にファイルが配置されており、自動起動サービスに登録されていることがわかる。</p>

<pre><code>vagrant@master1:~$ ls -l /etc/init/mesos-*
-rw-r--r-- 1 root root 368 Dec 19 23:12 /etc/init/mesos-master.conf
-rw-r--r-- 1 root root 366 Dec 19 23:12 /etc/init/mesos-slave.conf
</code></pre>

<p>そして、ソースからインストールした場合、mesosの起動オプションは<code>mesos-master-env.sh</code>だったりコマンドライン引数で渡したりするが、serviceから起動する場合は、オプションによって設定箇所が異なる。</p>

<pre><code># masterとslaveの両方
vagrant@master1:~$ cat /etc/default/mesos
LOGS=/var/log/mesos
ULIMIT="-n 8192"
# masterのみ
vagrant@master1:~$ cat /etc/default/mesos-master
PORT=5050
ZK=`cat /etc/mesos/zk`
# slaveのみ
vagrant@master1:~$ cat /etc/default/mesos-slave
MASTER=`cat /etc/mesos/zk`
</code></pre>

<p>とりあえずmasterを起動してみようとすると、以下のエラーが出て起動できない。</p>

<pre><code>vagrant@master1:/usr/local/var/mesos/deploy$ mesos-master -h
mesos-master: error while loading shared libraries: libjvm.so: cannot open shared object file: No such file or directory
</code></pre>

<p>なので、共有ライブラリにlibjvm.soを登録する。</p>

<pre><code>vagrant@master1:/usr/local/var/mesos/deploy$ sudo vi /etc/ld.so.conf.d/libjvm_so.conf
vagrant@master1:/usr/local/var/mesos/deploy$ cat /etc/ld.so.conf.d/libjvm_so.conf
/usr/lib/jvm/java-1.7.0-openjdk-amd64/jre/lib/amd64/server
vagrant@master1:/usr/local/var/mesos/deploy$ sudo /sbin/ldconfig
vagrant@master1:/usr/local/var/mesos/deploy$ sudo ldconfig -p | grep jvm
        libjvm.so (libc6,x86-64) =&gt; /usr/lib/jvm/java-1.7.0-openjdk-amd64/jre/lib/amd64/server/libjvm.so
        libjsig.so (libc6,x86-64) =&gt; /usr/lib/jvm/java-1.7.0-openjdk-amd64/jre/lib/amd64/server/libjsig.so
</code></pre>

<p>これで<code>mesos-master</code>と<code>mesos-slave</code>が動くようになる。</p>

<p>masterやslaveに設定する内容は<code>-h</code>か、<a href="http://ampcamp.berkeley.edu/3/exercises/mesos.html#solution_0">ここ</a>とか<a href="http://ampcamp.berkeley.edu/3/exercises/mesos.html#solution_1">ここ</a>を参考にすると良い。</p>

<p>とりあえず、今回は以下のように設定した。なお、ホワイトリストも用意しておくこと。このファイルが無いと、延々と「whitelistが無いよ」というログを吐き続けてしまうし、mesosのマスターは誰彼構わずslaveに組み込んでしまうため、セキュリティ的に用意しておいたほうが良い。</p>

<pre><code>mater1:/etc/default$ cat /etc/default/mesos
LOGS=/var/log/mesos
ULIMIT="-n 8192"
vagrant@master1:/etc/default$ cat /etc/default/mesos-master
PORT=5050
ZK=zk://master1:2181,slave1:2181,slave2:2181/mesos
export MESOS_whitelist=file:///usr/local/var/mesos/deploy/slave.lst
vagrant@master1:/etc/default$ cat /etc/default/mesos-slave
MASTER=zk://master1:2181,slave1:2181,slave2:2181/mesos
export MESOS_work_dir=/tmp/`hostname`/mesos
vagrant@master1:~/scripts$ cat /usr/local/var/mesos/deploy/slave.lst
master1
slave1
slave2
</code></pre>

<p>これらの設定ファイルは起動スクリプト内で読み込まれるためコマンドを記述することができる。地味に便利である。<br>が、良く見てもらうとわかるように<code>zk://</code>や<code>file://</code>という記述があったりするので、地味に注意が必要である。</p>

<p>なお、以下については起動スクリプト内の変数として設定されているため、それらの初期値となるように記述する必要がある</p>

<ul>
<li>zk(masterのみ)</li>
<li>master(slaveのみ)</li>
<li>ip</li>
<li>log_dir</li>
<li>isolation</li>
</ul>


<p>設定ファイル以外の場所で設定値を記述したい場合は以下の様にする。詳細は起動スクリプト<code>/usr/bin/mesos-init-wrapper</code>参照のこと。
    # echo setting parameter > /etc/mesos-[master|slave]/(attribute)
    echo &lsquo;192.168.56.100&rsquo; > /etc/mesos-slave/ip</p>

<p>これでmesosの設定は完了したが、まだmesosを起動させてはいけない。設定ファイルにzkプロトコルを記述していることからわかると思うけど、Zookeeperをインストールする必要がある。</p>

<a name="Zookeeper....................."></a>
<h2>Zookeeperのインストール</h2>

<p>Zookeeperのinstallは<a href="http://www.cloudera.com/content/cloudera-content/cloudera-docs/CDH4/latest/CDH4-Installation-Guide/cdh4ig_topic_4_4.html">Clouderaのマニュアル</a>にしたがってリポジトリを追加して、<a href="http://www.cloudera.com/content/cloudera-content/cloudera-docs/CDH4/latest/CDH4-Installation-Guide/cdh4ig_topic_21_3.html">apt-getでインストール</a>すればOK</p>

<pre><code>vagrant@master1:/tmp$ wget http://archive.cloudera.com/cdh4/one-click-install/precise/amd64/cdh4-repository_1.0_all.deb
vagrant@master1:/tmp$ sudo dpkg -i cdh4-repository_1.0_all.Debian
vagrant@master1:/tmp$ curl -s http://archive.cloudera.com/cdh4/ubuntu/precise/amd64/cdh/archive.key | sudo apt-key add -
OK
vagrant@master1:/tmp$ sudo apt-get update
vagrant@master1:/tmp$ sudo apt-get -y install zookeeper-server zookeeper
</code></pre>

<p>設定ファイルを以下のように更新する。</p>

<pre><code>vagrant@master1:/tmp$ cat /etc/zookeeper/conf/zoo.cfg | grep -v -e "^#\|^$"
maxClientCnxns=50
tickTime=2000
initLimit=10
syncLimit=5
dataDir=/var/lib/zookeeper
clientPort=2181
server.1=master1:2888:3888
server.2=slave1:2888:3888
server.3=slave2:2888:3888
</code></pre>

<p>zookeeper-serverが起動していたら、一旦停止させて起動する。</p>

<pre><code>vagrant@master1:/tmp$ sudo service zookeeper-server status
zookeeper-server is running
vagrant@master1:/tmp$ sudo service zookeeper-server stop
JMX enabled by default
Using config: /etc/zookeeper/conf/zoo.cfg
Stopping zookeeper ... STOPPED
vagrant@master1:/tmp$ sudo -u zookeeper /usr/lib/zookeeper/bin/zkServer-initialize.sh --force --myid 1

Force enabled, data/txnlog directories will be re-initialized
Using myid of 1
vagrant@master1:/tmp$ sudo service zookeeper-server start
JMX enabled by default
Using config: /etc/zookeeper/conf/zoo.cfg
Starting zookeeper ... STARTED
</code></pre>

<p>これらの作業をslaveでも実施しておく。<a href="https://gist.github.com/sgykfjsm/8326115#file-distribute_mesos_setting_and_install_zookeeper-sh">こんなスクリプト</a>を用意しておくと便利かもしれない。</p>

<a name="mesos.................."></a>
<h2>mesosを起動する。</h2>

<p>ここまでやって、ようやくmesosを起動することができる。全ノードでmesosのマスターとスレーブを起動する。これもスクリプトを使って全ノードを対象にマスターとスレーブの起動・停止ができるようにしておくとよさ気。</p>

<pre><code>vagrant@master1:~$ sudo service mesos-master start
vagrant@master1:~$ sudo service mesos-slave start
</code></pre>

<p>適当にどっかのマシン(例えば<a href="http://192.168.56.101:5050/#/">http://192.168.56.101:5050/#/</a> とか)のmesosのWebUIにアクセスして回ると、<code>This master is not the leader, redirecting in 1 seconds &hellip; go now</code>という警告が出て、自動的にZookeeperが選出したmesosのマスターにリダイレクトされる。</p>

<hr />

<p>とりあえず、mesosの構築はここまで。まぁ結構色々設定に気を使うところが多いけど、慣れてしまえば大丈夫なような気がする。続きはHadoop on mesosとSpark on mesosについて書くので、そこで。色々と触ってmesosの感覚を掴んだら、こまかいアーキテクチャなり関連する論文なりを読んで理解を深めていこうと思う。</p>

<p>以下、気になること。</p>

<ul>
<li>新しくノードをmesosに追加した場合にwhitelistを更新しないといけないけど、そうするとmesos-masterを再起動しないといけなくなる。serviceコマンドのオプションにはgraceful restartみたいなのは無いと思うので、そうなると順番にマスターを再起動するようなローリング・リスタートみたいなことをしないといけない？

<ul>
<li>ノード数が多いとスゲーめんどくさそう。</li>
</ul>
</li>
<li>mesosをHadoopとかSpark抜きで素で使うには？

<ul>
<li><a href="http://mesos.apache.org/documentation/latest/app-framework-development-guide/">Framework</a>なるものを自分で作る必要があるけど、<a href="https://github.com/apache/mesos/tree/master/src/examples">Examples</a>を見る限り、JavaとかPyhtonのバインディングはあるけどC++で書くのが楽っぽい？ように見えるけど、C++やったこと無いので個人的にはハードルが高い…。</li>
</ul>
</li>
<li>じゃあ結局のところ、なんでmesos使うの？

<ul>
<li>カジュアルに大規模な分散（あるいは並行？）処理を実現するにはマシンを並べて処理をぶん回すっていうのが多分今のところの最適解だと思っていて、それを実現しているのがHadoopなのだと思う。ただ、Hadoopが本領を発揮できるのは多分数十から数百GB以上のデータを1時間単位でバッチ処理するような要件だと適切だろうけど、そうじゃないと運用コストのほうがメリットより大きかったり、何よりHive使わずにMapReduce書くのは結構しんどいし、Hiveでは記述できる処理には限界があるので、どうしても大規模だったり計算量の多い処理では行き詰まってしまいがち。mesosはそういった状況に対する一つの解になりうるんじゃないかと思っている。けど、この考えが正しいのか気になるし、他の視点も当然あるだろうから、もっと勉強しないといけない。</li>
</ul>
</li>
</ul>


<p>というわけで、mesosをちょっと頑張って追究してみようと思った次第。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fud_scala]]></title>
    <link href="http://sgykfjsm.github.io/blog/2013/11/28/fud-scala/"/>
    <updated>2013-11-28T19:35:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2013/11/28/fud-scala</id>
    <content type="html"><![CDATA[<a name="Scala.at.ISUCON"></a>
<h1>Scala at ISUCON</h1>

<p><a href="https://dl.dropboxusercontent.com/u/261418/scala_at_isucon3/index.html#/">資料</a></p>

<p>ISUCONのお題を元にScalaと各言語のベンチマークを比較する</p>

<p>ベンチマークとしてはPlay = Perl/Ruby</p>

<p>あんまり早くない？
- GCチューニング
  - あんまり早くならなかった
- Nettyを4つ並べる、nginxでバランシング
  - あんまり早くならなかった
- ベンチマークの多重度を上げる
  - あんまり早くならなかった
  - go/perlは早くなった
- Playが重いだけ？
  - Skinny Framework
  - スコアがダメだった</p>

<p>解答を元にDB周りのボトルネックを外した
- その他いろいろ</p>

<p>現時点ではPerl > Play</p>

<p>一般的なWebアプリケーションだと性能はイマイチ
→DB I/Oがブロックしている
→mysql-async的なnon-blobking database driverがあれば、状況は変わるかもしれない。</p>

<p>コード自体のプロファイリングが必要。</p>

<a name="L......Scala."></a>
<h1>怖いScala!</h1>

<p><a href="http://xuwei-k.github.io/slides/kowai_scala/#0">資料</a></p>

<p>-</p>

<a name="Scala.with.TDD"></a>
<h1>Scala with TDD</h1>

<p>問題の領域がドメイン
ドメインの語彙→シナリオ
シナリオ→モデうr→実装→シナリオ→…
DDDで書かれたコードならば、それを読めばドメインの概念（ビジネス）がわかるようになる。</p>

<p>モデルの実装
- エンティティ: 見分けるおkとができる
- 普遍の識別子を持つ
  - 可変な要素を透過判定に使わない
  - 要素を変更してもIDを変えない</p>

<p>ドメインモデルはユビキタス言語と対応づくこと
（クラス名、属性、振る舞い）
- ソーシャルゲームのようにこれからドメインが作られる場合は内部で合意を取りながら作る</p>

<p>リポジトリ
- エンティティをリポジトリに保存したり、識別子からエンティティを取得できる。</p>

<p>コストがかかる。複雑でない問題には使わない。
Cocを前提にするF/Wとは相性が悪い。F/Wと喧嘩しない方法を選ぶべき。
OOPよりデータと手続きのほうが高速とはいえ、DDDはオブジェクト指向を使う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql_study]]></title>
    <link href="http://sgykfjsm.github.io/blog/2013/11/28/mysql-study/"/>
    <updated>2013-11-28T13:56:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2013/11/28/mysql-study</id>
    <content type="html"><![CDATA[<a name="L...................................."></a>
<h1>データベース設計徹底指南</h1>

<ul>
<li>正しいデータ型を使うのが大事。</li>
<li>テーブルが演算の単位となるので、ここの設計が非常に重要</li>
<li>テーブルを正しく定義しないとまともなクエリがかけない</li>
<li>データベースはリファクタリングが難しい

<ul>
<li>DDLに時間がかかる</li>
<li>appへの影響範囲が大きい</li>
<li>そもそものリファクタリングの方法がわからない</li>
</ul>
</li>
<li>負債が溜まりすぎて首がまわらない</li>
<li>なぜ技術的負債が溜まるか

<ul>
<li>データモデルに対する無理解</li>
<li>リレーショナルモデルを知らなくても便利に使える</li>
</ul>
</li>
<li>技術的負債が蓄積すると開発が難しくなる

<ul>
<li>テストが難しくなる</li>
</ul>
</li>
<li><p>負債を溜めないようにするためにデータモデルをちゃんと理解する</p>

<ul>
<li>つまりリレーショナルモデルを理解する</li>
</ul>
</li>
<li><p>リレーションとは</p>

<ul>
<li>ある物事に対する事実の集合</li>
<li>テーブルはリレーションに近似する</li>
<li>集合は

<ul>
<li>重複が無い</li>
<li>NULLが無い</li>
<li>要素間に順序が無い</li>
</ul>
</li>
<li>リレーションは以下を持つ

<ul>
<li>見出し</li>
<li>本体</li>
</ul>
</li>
</ul>
</li>
<li>SQLと対応する概念だが、性質は異なる</li>
<li>リレーションはn次元空間にプロットされた点のようなものの集合</li>
<li>データ型とはドメイン

<ul>
<li>属性が取りうる値の有限集合</li>
<li>コンピュータで表現できるものなら要素は何でもOK</li>
<li>NULLとポインタはNG</li>
</ul>
</li>
</ul>


<p>リレーションの演算
- 演算の入力も結果もリレーション
- 集合操作に基づく演算
- 制限（要素を絞り込む）、射影（属性を絞り込む）、属性名変更（RENAME）、拡張（EXTEND、複数の要素を組み合わせて新しい要素を作り出す）、和(union)、積(intersect)、差(difference)、直積(product)、結合(join)
- productとintersectはいずれもjoin
  - 特殊なケース
  - リレーショナルモデルにおいてはinnser joinがプリミティブ
- Outer Joinはプリミティブではない
  - UNION相当</p>

<p>SQLと集合の演算
- select / 射影
- from / 直積
- where / 制限</p>

<p>リレーションの正規化
- 正規化はデータベースの論理的な整合性を保つ
- 正規化は矛盾を防ぐ
  - 矛盾とは論理的な不整合
- リレーションから重複を排除</p>

<p>1NF
- テーブルがリレーションであること
- 繰り返しグループが発生していない
- アトミックである
- 主キーの一部に意味を持たせない
  - アトミックでなくなる
  - 値の一部に依存した処理が入り込む</p>

<p>2NF
- 候補キーの真部分集合から非キー属性へのFDを取り除いた状態
- FDを解消する
  必要な操作は射影 select ditinct
  正規化によりテーブルが増えても問題ない。誤った手＝ブル設計によりクエリがスパゲッティになる方が問題になる。
- BCNF
  - ボイスコッド正規形の略
  - 全ての自明でないFDが取り除かれた状態
  - 残る</p>

<!-- TODO: 正規化の話は途中聞きそびれたので資料を読み返すこと -->


<p>グラフに対するクエリの問題点
- グラフと供養の問題を表現できない
- 何度joinすれば良いのかわからない
- そもそもRDBは向いていないので、グラフデータベースを使うか、ストアドで頑張る</p>

<p>ツリー
- 閉路がなく、連結している
- ツリーは特殊なグラフ
- 多数の制約がある</p>

<p>隣接リストモデル
- 子ノードが親ノードのIDを持つ
- 根ノードの親はNULL
- 再起クエリまたはストアドプロシジャー</p>

<p>パス列挙モデル
- 寝ノードからのフルパスで経路を表現するモデル
  - Like句で検索</p>

<p>入れ子集合モデル</p>

<p>クロージャーテーブルモデル
- 祖先、子孫の関係にあるノードを全てリストアップ
  - テーブルサイズは大
  - 更新は容易</p>

<p>上に挙げたどのモデルも決定打にはならなくて、どれも妥協案。要件次第で使い分けるべき
- データサイズを気にしなければクロージャーテーブルがおすすめ
- コンパクトさを重視するなら隣接リストモデル</p>

<p>履歴データ
- 実はリレーショナルモデルと非常に相性が悪い←結構意外
- 履歴データとは時系列で並んだデータ</p>

<p>問題点1. 時間軸との直交性
- リレーションとはある時点での事実の集合
- 履歴データは時間軸と直行していないので、クエリの実行タイミングによっては結果が異なる。
- 行の意味が異なる。
  - リレーションとは事実の集合
- 特定の行だけに隠れた特別な意味がある
  - 現在有効な価格かどうか</p>

<p>履歴データ対策
- テーブルを分割(対策1)
  - 意味の異なるリレーションに分ける
    - 意味の違いが解消
    - 時間の直交性を持つことができるようになる
  - 元のデータはUNIONで。
  - 問題：外部キー制約が使えなくなる。
  - 同じレコードが含まれていないという制約をつけるのが難しい。
    - トリガーを使えば表現可能
- 重複したデータを持つ(対策2)
  - そもそも重複したデータがある。
  - 直行しない
  - 更新異常（矛盾）に注意
- 擬似(pseudo)キーの利用
  - 外部キーは使いたいけど、
    - そもそも擬似キーは本質的に不要
    - ディスクスペースが無駄
    - 更新のオーバヘッドが増える
  - joinが増える
- 履歴の過去データにフラグを立てる？
  - フラグは自動的に更新されない
  - 本質的に不要なカラムを持つことになる。</p>

<p>まとめ
DB設計鉄則三箇条
- リレーショナルモデルを理解する
- リレーションを正規化する
- リレーショナルモデルの限界を知る</p>

<p>あえて非正規化することは無い
- JOINの結果をキャッシュしておくことで代用できる。
- RDBでマスタを持っておいて、ドキュメント型NoSQLDBに流し込むというのはアリ
- 集計結果を持つようなテーブル（データウェアハウス的なもの）であればそもそも集合演算とは違ってそれは集計演算なので、それであれば非正規化というのはアリ。
- ステータスを示すカラムもフラグなので、そうするぐらいならテーブルを分けたほうが良い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[td-agentの監視・復旧の仕組みを整える]]></title>
    <link href="http://sgykfjsm.github.io/blog/2013/11/13/td-agent_with_monit/"/>
    <updated>2013-11-13T21:26:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2013/11/13/td-agent_with_monit</id>
    <content type="html"><![CDATA[<p>ここで紹介されている仕組みを自分のところにも導入したくなったのでやってみる。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/14046820" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/GedowFather/fluentd-meetup-2-fluentd" title="Fluentd Meetup #2 @外道父 Fluentdを優しく見守る監視事例" target="_blank">Fluentd Meetup #2 @外道父 Fluentdを優しく見守る監視事例</a> </strong> from <strong><a href="http://www.slideshare.net/GedowFather" target="_blank">外道 父</a></strong> </div></p>

<!-- more -->


<a name="L............"></a>
<h2>事前準備</h2>

<p>EC2インスタンスを適当に2つ用意する。今回はmicroを2つ用意した。<br>インスタンスを立ち上げる時には必要なポートの開放を忘れずにしておく。大体は22(SSH), 80(TCP), 8888(TCP), 24220(TCP/UDP), 24224(TCP/UDP)とかを空けとけば大丈夫。<br>インスタンスが立ち上がったら、ログインしてとりあえずgitをインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@localhost ~]$ which git
</span><span class='line'>/usr/bin/which: no git in (/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/aws/bin:/home/ec2-user/bin)
</span><span class='line'>[ec2-user@localhost ~]$ sudo yum install -y git
</span><span class='line'>インストール:
</span><span class='line'>  git.x86_64 0:1.8.3.1-1.28.amzn1
</span><span class='line'>
</span><span class='line'>依存性関連をインストールしました:
</span><span class='line'>  perl-Error.noarch 1:0.17015-4.6.amzn1                 perl-Git.noarch 0:1.8.3.1-1.28.amzn1
</span><span class='line'>  perl-TermReadKey.x86_64 0:2.30-13.5.amzn1
</span><span class='line'>
</span><span class='line'>完了しました!</span></code></pre></td></tr></table></div></figure>


<p>事前に用意しておいたセットアップスクリプトをcloneして実行する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@localhost ~]$ git clone https://gist.github.com/7429430.git
</span><span class='line'>Cloning into '7429430'...
</span><span class='line'>remote: Counting objects: 6, done.
</span><span class='line'>remote: Compressing objects: 100% (4/4), done.
</span><span class='line'>remote: Total 6 (delta 2), reused 0 (delta 0)
</span><span class='line'>Unpacking objects: 100% (6/6), done.
</span><span class='line'>[ec2-user@localhost ~]$ cd 7429430/
</span><span class='line'>[ec2-user@localhost 7429430]$ ls
</span><span class='line'>setup_td_agent.sh
</span><span class='line'>[ec2-user@localhost 7429430]$ bash setup_td_agent.sh</span></code></pre></td></tr></table></div></figure>


<p>インスタンスが再起動するので、一旦接続が切れる。しばらくしたら再ログインして設定状況を確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@localhost ~]$ ulimit -n
</span><span class='line'>65536
</span><span class='line'>[ec2-user@localhost ~]$ chkconfig --list | grep td-agent
</span><span class='line'>td-agent        0:off   1:off   2:on    3:on    4:on    5:on    6:off
</span><span class='line'>[ec2-user@localhost ~]$ ps w -C ruby -C td-agent --no-heading
</span><span class='line'> 1207 ?        Sl     0:00 /usr/lib64/fluent/ruby/bin/ruby /usr/sbin/td-agent --group td-agent --log /var/log/td-agent/td-agent.log
</span><span class='line'> 1210 ?        Sl     0:00 /usr/lib64/fluent/ruby/bin/ruby /usr/sbin/td-agent --group td-agent --log /var/log/td-agent/td-agent.log</span></code></pre></td></tr></table></div></figure>


<p>大丈夫っぽい。</p>

<p>ログを送る側を以下のように設定する。相手先にforwardするだけ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@localhost td-agent]$ diff td-agent.conf td-agent.conf.20131112115946
</span><span class='line'>78,88c78,85
</span><span class='line'>&lt; &lt;match system.**&gt;
</span><span class='line'>&lt;   type forward
</span><span class='line'>&lt;   &lt;server&gt;
</span><span class='line'>&lt;     host ec2-54-235-51-40.compute-1.amazonaws.com
</span><span class='line'>&lt;     port 24224
</span><span class='line'>&lt;   &lt;/server&gt;
</span><span class='line'>&lt;   # secondary host is optional
</span><span class='line'>&lt;   # &lt;secondary&gt;
</span><span class='line'>&lt;   #   host 192.168.0.12
</span><span class='line'>&lt;   # &lt;/secondary&gt;
</span><span class='line'>&lt; &lt;/match&gt;
</span><span class='line'>---
</span><span class='line'>&gt; #&lt;match system.**&gt;
</span><span class='line'>&gt; #  type forward
</span><span class='line'>&gt; #  host 192.168.0.11
</span><span class='line'>&gt; #  # secondary host is optional
</span><span class='line'>&gt; #  &lt;secondary&gt;
</span><span class='line'>&gt; #    host 192.168.0.12
</span><span class='line'>&gt; #  &lt;/secondary&gt;
</span><span class='line'>&gt; #&lt;/match&gt;</span></code></pre></td></tr></table></div></figure>


<p>受け取る方は適当に標準出力させておく。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@localhost td-agent]$ diff td-agent.conf td-agent.conf.20131112120135
</span><span class='line'>21c21
</span><span class='line'>&lt; &lt;match system.**&gt;
</span><span class='line'>---
</span><span class='line'>&gt; &lt;match debug.**&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>curl -X POST -d &lsquo;json={&ldquo;json&rdquo;:&ldquo;message&rdquo;}&rsquo; <a href="http://localhost:8888/system.test">http://localhost:8888/system.test</a></code>とかやって、送り側でログを受け取ったことを確認したら、これまた適当にcurlし続けるようにしておく。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@localhost td-agent]$ while(true);do curl -X POST -d 'json={"json":"message"}' http://local
</span><span class='line'>host:8888/system.debug; sleep 10;done &</span></code></pre></td></tr></table></div></figure>


<p>こうしておけばとりあえずはそれっぽくログを連携する形になる。</p>

<a name="L......"></a>
<h2>監視</h2>

<p><a href="http://www.slideshare.net/GedowFather/fluentd-meetup-2-fluentd">Fluentd Meetup #2 @外道父 Fluentdを優しく見守る監視事例</a>にある内容を雑にまとめると以下のようになる。</p>

<ul>
<li>ローカルの監視には<a href="http://mmonit.com/monit/">monit</a>を使う。</li>
<li>td-agent基本プロセス監視(受け取る側はLISTEN 24224であることも監視する)</li>
<li>td-agent重複デーモン対策</li>
<li>flowcounterで転送状態監視</li>
</ul>


<p>これを一つ一つ作業してみる。</p>

<a name="td-agent....................."></a>
<h3>td-agentのプロセス監視</h3>

<p>monitに以下のような設定を追加する。<a href="http://mmonit.com/monit/documentation/monit.html#configuration_examples">monitの設定例のページ</a>が参考になる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ec2-user@localhost monit.d]$ cat /etc/monit.d/td-agent.conf
</span><span class='line'>check process td-agent with pidfile /var/run/td-agent/td-agent.pid
</span><span class='line'>  start program = "/etc/init.d/td-agent start"
</span><span class='line'>  stop program = "/etc/init.d/td-agent stop"
</span><span class='line'>  if failed port 24224 type udp then restart
</span><span class='line'>  if failed port 24224 type tcp then restart
</span><span class='line'>  if 5 restarts within 5 cycles then alert</span></code></pre></td></tr></table></div></figure>


<p><code>alert</code>は、アラートメールを出すためのコマンド。アラートメールの設定については<a href="http://mmonit.com/monit/documentation/monit.html#setting_a_global_alert_statement">Setting a global alert statement</a>を見ると良い。</p>

<p>td-agentをstopしてmonitが検知すると、以下の様なログが出てきて復旧を行っていることがわかる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[UTC Nov 12 13:02:02] error    : 'td-agent' process is not running
</span><span class='line'>[UTC Nov 12 13:02:02] info     : 'td-agent' trying to restart
</span><span class='line'>[UTC Nov 12 13:02:02] info     : 'td-agent' start: /etc/init.d/td-agent
</span><span class='line'>[UTC Nov 12 13:03:03] info     : 'td-agent' process is running with pid 19221</span></code></pre></td></tr></table></div></figure>


<p>何度か試した感じだと最長で検知に1分ぐらいかかる。というか1分がデフォルト？<br>秒単位でのポーリング間隔指定ができるけど、まぁ大抵は1分でいいんじゃないでしょうか。</p>

<a name="td-agent..........................."></a>
<h3>td-agentの重複デーモン対策</h3>

<p>スライドにもあるようにデーモンの正常性は確認する必要がある。td-agentでは多重起動のバグが修正されているけど、td-agentを停止してもうまくプロセスが消えないことがあり、それに気づかないままtd-agentを立ち上げると障害の原因になってしまう（これは実際に経験した）。
スライドではmonitでどのように設定しているかの具体例までは無いが、確認すべき事柄が非常に丁寧に示されているので、やるべきことは大体想像がつく。
多分、こんなスクリプトを用意して、それをmonitに監視させれば良いんじゃないかなぁ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># check_td_process.sh</span>
</span><span class='line'><span class="nv">TD_AGENT</span><span class="o">=</span><span class="s2">&quot;/usr/lib64/fluent/ruby/bin/ruby /usr/sbin/td-agent&quot;</span>
</span><span class='line'><span class="nv">RETVAL</span><span class="o">=</span>1
</span><span class='line'>
</span><span class='line'><span class="c"># プロセス数の確認</span>
</span><span class='line'><span class="nv">TD_PROCESS_NUM</span><span class="o">=</span><span class="k">$(</span>ps w -C ruby -C td-agent --no-heading <span class="p">|</span> grep <span class="s2">&quot;${TD_AGENT}&quot;</span> <span class="p">|</span> grep -v <span class="s2">&quot;\]$ &quot;</span> <span class="p">|</span> wc -l<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">TD_PROCESS_NUM</span><span class="k">}</span> -eq <span class="m">2</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nv">RETVAL</span><span class="o">=</span>0
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">echo </span>td-agent process is <span class="k">${</span><span class="nv">TD_PROCESS_NUM</span><span class="k">}</span> process. 1&gt;<span class="p">&amp;</span>2
</span><span class='line'>  <span class="nb">echo </span>execute /usr/bin/td_restarter.sh 1&gt;<span class="p">&amp;</span>2
</span><span class='line'>  <span class="nv">RETVAL</span><span class="o">=</span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span> <span class="k">${</span><span class="nv">RETVAL</span><span class="k">}</span> <span class="o">==</span> <span class="m">1</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span> <span class="k">${</span><span class="nv">RETVAL</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># run/pidのプロセス番号で動いていることを確認する</span>
</span><span class='line'><span class="nv">TD_PID_FILE</span><span class="o">=</span>/var/run/td-agent/td-agent.pid
</span><span class='line'><span class="nv">TD_PID</span><span class="o">=</span><span class="k">$(</span>cat <span class="k">${</span><span class="nv">TD_PID_FILE</span><span class="k">})</span>
</span><span class='line'><span class="nv">TD_REAL_PID</span><span class="o">=</span><span class="k">$(</span>ps l --ppid<span class="o">=</span><span class="m">1</span> <span class="p">|</span> grep <span class="s2">&quot;${TD_AGENT}&quot;</span> <span class="p">|</span> grep -v <span class="s2">&quot;\]$ &quot;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $3}&#39;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;${TD_PID}&quot;</span> !<span class="o">=</span> <span class="s2">&quot;${TD_REAL_PID}&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="k">${</span><span class="nv">TD_PID_FILE</span><span class="k">}</span> is <span class="k">${</span><span class="nv">TD_PID</span><span class="k">}</span> 1&gt;<span class="p">&amp;</span>2
</span><span class='line'>  <span class="nb">echo </span>but real pid is <span class="k">${</span><span class="nv">TD_REAL_PID</span><span class="k">}</span> 1&gt;<span class="p">&amp;</span>2
</span><span class='line'>  <span class="nb">echo </span>execute /usr/bin/td_restarter.sh 1&gt;<span class="p">&amp;</span>2
</span><span class='line'>  <span class="nv">RETVAL</span><span class="o">=</span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span> <span class="k">${</span><span class="nv">RETVAL</span><span class="k">}</span> <span class="o">==</span> <span class="m">1</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span> <span class="k">${</span><span class="nv">RETVAL</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># fluentdが固まってないことを確認する</span>
</span><span class='line'><span class="c"># system.testというタグはtd-agentの設定ファイルでnullに吐き出すようにしておけば良い</span>
</span><span class='line'>curl --connect-timeout <span class="m">300</span> --max-time <span class="m">300</span> --silent -X POST -d <span class="s1">&#39;json={&quot;json&quot;:&quot;message&quot;}&#39;</span> http://localhost:8888/system.test
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -ne <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">echo </span>failed to execute curl check 1&gt;<span class="p">&amp;</span>2
</span><span class='line'>  <span class="nb">echo </span>execute /usr/bin/td_restarter.sh 1&gt;<span class="p">&amp;</span>2
</span><span class='line'>  <span class="nv">RETVAL</span><span class="o">=</span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span> <span class="k">${</span><span class="nv">RETVAL</span><span class="k">}</span> <span class="o">==</span> <span class="m">1</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span> <span class="k">${</span><span class="nv">RETVAL</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># configure here as you like...</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="nb">exit</span> <span class="k">${</span><span class="nv">RETVAL</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このへんのスクリプトをmonitに実行させて返り値が1だったら、こんなスクリプト（といってもスライドから丸パクリ）を実行させれば良さそう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># td_restarter.sh</span>
</span><span class='line'><span class="nv">TD_AGENT</span><span class="o">=</span><span class="s2">&quot;/usr/lib64/fluent/ruby/bin/ruby /usr/sbin/td-agent&quot;</span>
</span><span class='line'><span class="nv">RETVAL</span><span class="o">=</span>0
</span><span class='line'>
</span><span class='line'>/etc/init.d/td-agent stop
</span><span class='line'>pkill -KILL -f <span class="s2">&quot;${TD_AGENT}&quot;</span>
</span><span class='line'>/etc/init.d/td-agent start
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -ne <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Serious Error is occured($0).&quot;</span> 1&gt;<span class="p">&amp;</span>2
</span><span class='line'>  <span class="nv">RETVAL</span><span class="o">=</span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit</span> <span class="k">${</span><span class="nv">RETVAL</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="flowcounter....................."></a>
<h3>flowcounterで転送状態監視</h3>

<p>何はともあれflowcounterをインストールする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>ec2-user@ip-10-147-141-104 td-agent<span class="o">]</span><span class="nv">$ </span>sudo /usr/lib64/fluent/ruby/bin/fluent-gem install fluent-plugin-flowcounter
</span><span class='line'>Fetching: fluent-plugin-flowcounter-0.1.9.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Successfully installed fluent-plugin-flowcounter-0.1.9
</span><span class='line'><span class="m">1</span> gem installed
</span><span class='line'>Installing ri documentation <span class="k">for</span> fluent-plugin-flowcounter-0.1.9...
</span><span class='line'>Installing RDoc documentation <span class="k">for</span> fluent-plugin-flowcounter-0.1.9...
</span></code></pre></td></tr></table></div></figure>


<p>詳しい設定はgithubをみる。<a href="https://github.com/tagomoris/fluent-plugin-flowcounter">tagomoris / fluent-plugin-flowcounter</a><br>とは言え、そんなに設定する項目は多くないので、今回の場合だとシンプルになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;match system.**&gt;
</span><span class='line'>  <span class="nb">type </span>copy
</span><span class='line'>  &lt;store&gt;
</span><span class='line'>    <span class="nb">type </span>stdout
</span><span class='line'>  &lt;/store&gt;
</span><span class='line'>  &lt;store&gt;
</span><span class='line'>    <span class="nb">type </span>flowcounter
</span><span class='line'>    count_keys *
</span><span class='line'>  &lt;/store&gt;
</span><span class='line'>&lt;/match&gt;
</span><span class='line'>
</span><span class='line'>&lt;match flowcount&gt;
</span><span class='line'>  <span class="nb">type </span>file
</span><span class='line'>  path /var/log/td-agent/flowcount/flowcount.log
</span><span class='line'>  time_slice_format %Y%m%
</span><span class='line'>&lt;/match&gt;
</span></code></pre></td></tr></table></div></figure>


<p>大体こんな感じだけど、実際の本番運用ではrewrite_tag_filterでタグを付け替えながら集計対象のタグを選別して…みたいな設定をする必要があるかもしれない。</p>

<p>つぎに出力されたログの最新2行（tail -2）を見て、カウント数から障害かどうかを判定するわけだけど、スライドだと障害だと判定した場合に「原因を出力」とある。この「原因」って何を指してるんだろ？送る側で検知した場合はAPIがローカルに吐いているエラーログ、受取側で検知した場合は検知対象となったタグの情報とかを添えて標準エラー出力して、メールで通知ということかなぁ？今回は受取側なので、とりあえずはこんな感じ？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># check_flowcounter.sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">RETVAL</span><span class="o">=</span>0
</span><span class='line'><span class="nv">CHECK_NUM</span><span class="o">=</span>2
</span><span class='line'><span class="nv">FLOW_REFERENCE_VALUE</span><span class="o">=</span>10
</span><span class='line'><span class="nv">FLOWCOUNTER_LOG</span><span class="o">=</span><span class="k">$(</span>ls -tr /var/log/td-agent/flowcount/flowcount.log* <span class="p">|</span> tail -1<span class="k">)</span>
</span><span class='line'><span class="k">for</span> i in <span class="k">$(</span>seq <span class="m">1</span> <span class="k">${</span><span class="nv">CHECK_NUM</span><span class="k">})</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>  <span class="nv">FLOWCOUNTER_LOG_LINE</span><span class="o">=</span><span class="k">$(</span>tail -<span class="k">${</span><span class="nv">CHECK_NUM</span><span class="k">}</span> <span class="k">${</span><span class="nv">FLOWCOUNTER_LOG</span><span class="k">}</span> <span class="p">|</span> awk <span class="s1">&#39;NR==&#39;</span><span class="k">${</span><span class="nv">i</span><span class="k">}</span><span class="s1">&#39;{print $3}&#39;</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">FLOW_COUNT</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="k">${</span><span class="nv">FLOWCOUNTER_LOG_LINE</span><span class="k">}</span> <span class="p">|</span> sed -e <span class="s1">&#39;s/{&quot;.*_count&quot;:\([0-9]\+\).*}$/\1/&#39;</span><span class="k">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">FLOW_COUNT</span><span class="k">}</span> -lt <span class="k">${</span><span class="nv">FLOW_REFERENCE_VALUE</span><span class="k">}</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo </span>flow count is under <span class="k">${</span><span class="nv">FLOW_REFERENCE_VALUE</span><span class="k">}</span> 1&gt;<span class="p">&amp;</span>2
</span><span class='line'>    <span class="nb">echo</span> <span class="nv">$0</span> count : <span class="k">${</span><span class="nv">FLOW_COUNT</span><span class="k">}</span> 1&gt;<span class="p">&amp;</span>2
</span><span class='line'>    <span class="nb">echo</span> <span class="k">${</span><span class="nv">FLOWCOUNTER_LOG_LINE</span><span class="k">}</span> 1&gt;<span class="p">&amp;</span>2
</span><span class='line'>    <span class="nv">RETVAL</span><span class="o">=</span>1
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit</span> <span class="k">${</span><span class="nv">RETVAL</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、ここまで用意したスクリプトを監視させるためのmonitの設定は以下のようになる。<br>monitのドキュメントだと<a href="http://mmonit.com/monit/documentation/monit.html#program_status_testing">ここ</a>を見れば良い。<code>td-agent.conf</code>って名前で<code>/etc/monit.d/</code>とかに置いておく。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set </span>logfile /var/log/monit.log
</span><span class='line'><span class="nb">set </span>alert shigeyuki.fujishima@gmail.com with mail-format <span class="o">{</span> from: shigeyuki.fujishima@gmail.com <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">set </span>mailserver email-smtp.us-east-1.amazonaws.com port 465
</span><span class='line'><span class="c"># set mailserver localhost port 25</span>
</span><span class='line'>    username <span class="s2">&quot;xxxxx&quot;</span>  password <span class="s2">&quot;yyyyy&quot;</span>
</span><span class='line'>    using sslv3 with timeout <span class="m">15</span> seconds
</span><span class='line'>    <span class="c"># using tlsv1 with timeout 15 seconds</span>
</span><span class='line'>
</span><span class='line'>check process td-agent with pidfile /var/run/td-agent/td-agent.pid
</span><span class='line'>    start <span class="nv">program</span> <span class="o">=</span> <span class="s2">&quot;/etc/init.d/td-agent start&quot;</span>
</span><span class='line'>    stop <span class="nv">program</span> <span class="o">=</span> <span class="s2">&quot;/etc/init.d/td-agent stop&quot;</span>
</span><span class='line'>    <span class="c"># if failed port 24224 type udp then restart</span>
</span><span class='line'>    <span class="c"># if failed port 24224 type tcp then restart</span>
</span><span class='line'>    <span class="k">if</span> failed port <span class="m">24224</span> <span class="nb">type </span>udp <span class="k">then</span> alert
</span><span class='line'>    <span class="k">if</span> failed port <span class="m">24224</span> <span class="nb">type </span>tcp <span class="k">then</span> alert
</span><span class='line'>    <span class="k">if</span> <span class="m">5</span> restarts within <span class="m">5</span> cycles <span class="k">then</span> alert
</span><span class='line'>
</span><span class='line'>check program check_td_process with path <span class="s2">&quot;/usr/local/bin/check_td_process.sh&quot;</span>
</span><span class='line'>    <span class="k">if</span> status !<span class="o">=</span> <span class="m">0</span> <span class="k">then</span> <span class="nb">exec</span> <span class="s2">&quot;/usr/local/bin/td_restarter.sh&quot;</span>
</span><span class='line'>
</span><span class='line'>check program check_flowcounter with path <span class="s2">&quot;/usr/local/bin/check_flowcounter.sh&quot;</span>
</span><span class='line'>    <span class="k">if</span> status !<span class="o">=</span> <span class="m">0</span> <span class="k">then</span> alert
</span></code></pre></td></tr></table></div></figure>


<a name="L........."></a>
<h2>番外編</h2>

<p>エラーメールの通知にAmazon SESを使おうとしたけど、以下のエラーが出てうまく行かなかった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>UTC Nov <span class="m">12</span> 14:24:02<span class="o">]</span> error    : monit: Openssl engine error: error:1408F10B:SSL routines:func<span class="o">(</span>143<span class="o">)</span>:reason<span class="o">(</span>267<span class="o">)</span>
</span><span class='line'><span class="o">[</span>UTC Nov <span class="m">12</span> 14:24:02<span class="o">]</span> error    : Cannot open a connection to the mailserver <span class="s1">&#39;email-smtp.us-east-1.amazonaws.com:25&#39;</span> -- Success
</span><span class='line'><span class="o">[</span>UTC Nov <span class="m">12</span> 14:24:02<span class="o">]</span> error    : No mail servers are available
</span><span class='line'><span class="o">[</span>UTC Nov <span class="m">12</span> 14:24:02<span class="o">]</span> error    : Aborting event
</span></code></pre></td></tr></table></div></figure>


<p>冷静に見ると、portが25でsslv3っておかしい？気がする。</p>

<p>以下のようにすればOK。<code>set mailserver</code>より先にSESに登録したアドレスを書いておいて、portは465を指定する。<br>あとは<code>using sslv3 with timeout 15 seconds</code>とかしておけばmonitさんからバンバンメールが飛ぶようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set </span>alert foo.bar@baz.com with mail-format <span class="o">{</span> from: foo.bar@baz.com<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">set </span>mailserver email-smtp.us-east-1.amazonaws.com port 465
</span><span class='line'><span class="c"># set mailserver localhost port 25</span>
</span><span class='line'>    username <span class="s2">&quot;xxxxx&quot;</span>  password <span class="s2">&quot;yyyyy&quot;</span>
</span><span class='line'>    using sslv3 with timeout <span class="m">15</span> seconds
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、適当なアドレスだと以下のエラーログが出てくる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>UTC Nov <span class="m">13</span> 05:39:19<span class="o">]</span> error    : Sendmail error: <span class="m">554</span> Message rejected: Email address is not verified.
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Cluster Casual Talksに行ってきた]]></title>
    <link href="http://sgykfjsm.github.io/blog/2013/09/27/mysql-cluster-casual-talk/"/>
    <updated>2013-09-27T05:04:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2013/09/27/mysql-cluster-casual-talk</id>
    <content type="html"><![CDATA[<p>MySQL Casual Talkと勘違いしてたけど、とても勉強になった。
以下はメモ。</p>

<!--more-->


<a name="MySQL.Cluster......................5.6........................5.6............"></a>
<h3>MySQL Cluster大地に立つ！ 「5.6とは違うのだよ、5.6とは！」</h3>

<p>@RKajiyamaさん</p>

<p>MySQLクラスタとは</p>

<ul>
<li>MySQL Cluster

<ul>
<li>独立した製品</li>
<li>MySQLのクラスタリングのことではない</li>
<li>v7.3

<ul>
<li>MySQL Serverとは違う。共通点はあるけど。</li>
</ul>
</li>
<li>MySQL Serverとの最大の違いは分散型DBであること。

<ul>
<li>共有ディスクはいらない</li>
<li>メモリが豊富で性能の優れたディスクを持つサーバ</li>
</ul>
</li>
<li>全ノードがアクティブ</li>
<li>シェアードナッシング

<ul>
<li>共有ディスクは不要</li>
</ul>
</li>
<li>全オード多重化</li>
<li>ノードを増やすことで負荷分散と多重化を図ることが可能

<ul>
<li>多重化はRAID0と同じ</li>
</ul>
</li>
<li>アプリケーションレイヤから見るとACID KVSとして利用可能

<ul>
<li>MySQL Serverを経由せずにアプリケーションから直接Clusterにアクセスできる。</li>
<li>ACIDを維持しても20M updates sec</li>
</ul>
</li>
<li>主要な利用企業はzynga, NEC, at&amp;t, paypal, ericsson, cisco, vodafon, US Navyなど

<ul>
<li>PayPalは基盤をすべてMySQLで構築しているらしい</li>
</ul>
</li>
<li>NoSQLとしてのMySQL

<ul>
<li>アプリケーションからはNoSQLのように見えるが、内部的にはコンテナテーブルによりデータがテーブルや絡むとマッピングされて、内部的にはRDBとして動作する。</li>
</ul>
</li>
<li>Apps -> JPA -> Cluster JPA -> Cluster J -> JNI -> NDB API -> データレイヤがJavaのアクセス経路

<ul>
<li>ただしJOINなどの場合は自動的にJDBCに振り分けがされる。</li>
</ul>
</li>
</ul>
</li>
</ul>


<a name="MySQL.Cluster.........................................."></a>
<h3>MySQL Clusterをカジュアルに使ってみよう！</h3>

<p>@nippondanjiさん</p>

<p>MySQL Clusterとは！</p>

<ul>
<li>MySQLのストレージエンジンとして使える

<ul>
<li>create table hoge (&hellip;) engnie ndb;</li>
</ul>
</li>
<li>トランザクション対応</li>
<li>並列分散型のDB</li>
<li>HA機能</li>
<li>ハイパフォーマンス</li>
<li>コミュニティ版はGPLv2</li>
<li>アプリケーションとデータノードの間にSQLノードをぶら下げる

<ul>
<li>255ノードまでぶら下げることが可能</li>
<li>データノードは最大48ノード</li>
</ul>
</li>
<li>速いか？

<ul>
<li>１台の性能ではInnoDBのほうが↑

<ul>
<li>NDB APIは爆速</li>
</ul>
</li>
<li>ノードを並べてナンボ

<ul>
<li>データノード

<ul>
<li>負荷分散</li>
<li>データ量の増加</li>
</ul>
</li>
<li>SQLノード

<ul>
<li>SQL解析の負荷分散</li>
</ul>
</li>
</ul>
</li>
<li>ちょっとしか参照しない処理ではノードを増やしても性能は上がらない</li>
</ul>
</li>
<li>高可用性

<ul>
<li>SPOFの排除</li>
<li>HA機能搭載</li>
<li>遠隔地へのレプリケーション</li>
</ul>
</li>
<li>コモディティなハードウェアでも搭載可能</li>
<li>ノードは３種類

<ul>
<li>管理ノード</li>
<li>データノード</li>
<li>SQLノード/APIノード</li>
</ul>
</li>
<li>シェアードナッシング

<ul>
<li>同じノードグループ内でミラーリングし合う</li>
<li>ミラーの相手側が落ちたとしても相手のプライマリや自分の中にレプリケーションデータを作成する</li>
</ul>
</li>
<li>インストールのデモ

<ul>
<li>確かにカジュアルに使えそうにみえるが…</li>
</ul>
</li>
<li>パフォーマンス・チューニング

<ul>
<li>最新バージョンを使う！</li>
<li>バージョンが上がるほど高速化している</li>
<li>v6.2 → SQLノードからデータノードへの接続を複数可</li>
<li>V6.3 → スレッドのバインディング、TC選択のロジックを改善</li>
<li>v7.0 → データノードがマルチスレッド化、メッセージ通信の改善、データノードのオンライン拡張</li>
<li>v7.1 → ndbinfo, BLOBへのアクセス高速化</li>
<li>v7.2 → MySQL5.5、pushdown join、memcachedの追加</li>
<li>v7.3 → MysQL5.6 外部キー、NDB APIのボトルネック解消、Semi Joinの最適化</li>
</ul>
</li>
<li>データノード数は最大48台

<ul>
<li>主キーを使った検索は速い、スケールする</li>
<li>範囲検索（スキャン）は苦手、スケールしない（しづらい）

<ul>
<li>フェッチするレコード数が少ないと遅い</li>
<li>フェッチするレコード数が多いとデータノードで並列処理がされるので、思ったより速い</li>
</ul>
</li>
<li>ユーザ定義パーティションによりスキャンを克服する

<ul>
<li>外部キーを設定するイメージ</li>
<li>スキャンがスケール</li>
<li>特定のデータノードに問い合わせれば良くなるためJOINもスケールする</li>
</ul>
</li>
<li>レプリケーションによるスケールアウト

<ul>
<li>レプリケーション先をInnoDBとすることでスキャンもスケールさせることができる</li>
</ul>
</li>
</ul>
</li>
<li>MySQL Clusterはインメモリデータベースだけれども

<ul>
<li>データの永続性のために沢山のI/Oが発生する

<ul>
<li>REDOログ</li>
<li>LCP(local check point)</li>
</ul>
</li>
</ul>
</li>
<li>ディスク型テーブル

<ul>
<li>ディスクの性能に大きく影響する</li>
<li>ベンチマーク上はHDDを利用するとスケールしなくなる</li>
<li>インメモリ型だとCPUが貧弱でもスケールする</li>
</ul>
</li>
<li>BLOBは苦手

<ul>
<li>内部的にBLOB用のテーブルが作成される

<ul>
<li>JOINが増えるのと同じ</li>
<li>varcharで頑張ってみる。でもなるべく使わないほうが良い</li>
</ul>
</li>
</ul>
</li>
<li>NoSQLインターフェース

<ul>
<li>SQLよりも数段速い

<ul>
<li>NDB API</li>
<li>Cluster J</li>
<li>memcached</li>
<li>java用のバインディング</li>
</ul>
</li>
</ul>
</li>
<li>MySQL Clusterは以下の場合に向いている

<ul>
<li>更新をスケールしたい</li>
<li>HA機能が欲しい</li>
<li>超絶高速なJOINが欲しい</li>
<li>得意、不得意を踏まえて適切なスケールアウト戦略を選ぶべし</li>
<li>NoSQL APIが豊富</li>
</ul>
</li>
<li>管理ノードはSPOF？

<ul>
<li>管理ノードは２つ用意することが出来ない</li>
<li>管理ノードは落ちても動作には影響しない</li>
<li>SQLノードが管理ノードの代わりを果たす？←ちゃんと聞き取れなかった&hellip;</li>
</ul>
</li>
</ul>


<a name="MySQL.Cluster.....................................................................Version.7.3..............................................................."></a>
<h3>MySQL Clusterと丸４年の付き合いを振り返ってのよもやま話と、Version 7.3への期待（もっとユーザが増えるといいな～）</h3>

<p>@tsakuradaさん</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26575773" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/TakeshiSakurada/mcct20130926-tsakuradac" title="MCCT20130926 tsakuradac" target="_blank">MCCT20130926 tsakuradac</a> </strong> from <strong><a href="http://www.slideshare.net/TakeshiSakurada" target="_blank">Takeshi Sakurada</a></strong> </div></p>

<p>なぜMySQL Clusterを使うか？</p>

<ul>
<li>インメモリ型であること

<ul>
<li>確かに速いがioDrive + InnoDBの組み合わせでかなり高い性能がでるので、優位性は揺らぎつつ有るかも？</li>
</ul>
</li>
<li>コモディティなサーバでもOK

<ul>
<li>結局メモリが必要なので安価でOKとは限らない</li>
<li>スケールアウトが難しいケースはやはりある</li>
</ul>
</li>
<li>高可用性

<ul>
<li>今でも優位性を保っているが、ポイントを押さえておかないと無意味になる。</li>
</ul>
</li>
</ul>


<p>改めて主張したい優位点</p>

<ul>
<li>GPLv2</li>
<li>MySQL(InnoDB)との互換性がv7.3以降でかなり向上した</li>
</ul>


<p>導入 - どう使うか</p>

<ul>
<li>SQLノード、MGMノード、データノードの構成が設計のキモ</li>
<li>それぞれを単体にしても動くけど、SPOFを排除するためには各ノードを複数配置するのが普通</li>
<li>データ量が増えた

<ul>
<li>データノードのメモリを増やすか、データノードの数を増やす</li>
<li>スケールアウトを考えてデータノードを増やすようにしたほうが良い</li>
</ul>
</li>
<li>アクセス増えた

<ul>
<li>SQLノードを増やす</li>
</ul>
</li>
<li>高可用性を活かすためには

<ul>
<li>ハードウェア構成上SPOFが無い様に２重化する</li>
<li>多重化障害にどこまで対応するかは悩ましい</li>
<li>実行中のクエリをキャンセルされた時には、エラーをキャッチして後続処理を適切に作りこむ必要がある

<ul>
<li>条件に応じた適切な処理をアプリケーションに実装するのがキモ</li>
</ul>
</li>
</ul>
</li>
<li>InnoDBと同じ感覚でテーブル設計していいのか？

<ul>
<li>やってみるのが一番</li>
<li>いろんなかたちでベンチマークを取ってみる</li>
</ul>
</li>
<li>バッチ処理のことも考えてInnoDBと組み合わせたい

<ul>
<li>高潰瘍性のレベルがInnoDB側に引っ張られることになる</li>
<li>NDBとInnoDBはトランザクションの分離レベルが違うので、その点でも注意する必要がある。</li>
</ul>
</li>
</ul>


<p>運用 - 何が起きるか</p>

<p>ハマりどころ</p>

<ul>
<li>GCP Stop!

<ul>
<li>Global check point</li>
<li>これが無いと永続性が保たれなくなる</li>
<li>これが何らかの理由で停止されるとデータノードがシャットダウンされてしまう</li>
<li>一度のコミットにかかる時間が一定のしきい値を超過した場合にGCP Stopが発生してしまう。</li>
<li>アプリ側でコミットにかかる時間を把握してクエリを発行する必要がある</li>
<li>最新バージョンではこの閾値を無制限に指定できるので、それで逃げる必要がある。ただ、本当に以上が発生した場合にはDBが固まってしまうので、リスクとのトレードオフ。</li>
</ul>
</li>
<li>ローリングリスタート

<ul>
<li>NDBのパラメータ変更を反映するためにデータノードの再起動が必要になる場合がある。</li>
<li>再起動中にミラーリング相手が落ちてしまうと障害が発生してしまう。</li>
<li>データノードが保有するデータ量が多いと再起動に時間がかかるため、多重障害の発生確率が高まってしまう。</li>
<li>オンラインでのローリングリスタートはやはり怖い</li>
<li>リスタート中はDDL文が発行できないなどの仕様上の制約がある。</li>
<li>最新のバージョンでは起動も拘束しているが、メモリ上にデータを展開してインデックスの構築に時間がかかる。</li>
</ul>
</li>
<li>ボトルネックが見えづらい

<ul>
<li>vmstatやiostatでは見えないところでボトルネックが発生していることがある。</li>
<li>Slowログに主キーでのselectが出てくることがある。</li>
<li>見えづらいというよりかは、確認ポイントが多い

<ul>
<li>データノードは？</li>
<li>SQLノードは？</li>
<li>NWは？</li>
<li>ndbinfoは？</li>
</ul>
</li>
</ul>
</li>
<li>データのライフサイクルをどうするか？

<ul>
<li>メモリの節約のためにDELETE文を発行する必要があるが、DELETE文はやはりオソい</li>
<li>DELETE文で空いた領域はデータノードを再起動しない限りは同じテーブル内でしか再利用できない。DROP TABLEしちゃえば良いらしい。</li>
</ul>
</li>
<li>バックアップは良いけどリストアが…

<ul>
<li>NDBには専用のオンライン・バックアップ機能がある</li>
<li>100GBぐらいをリストアすると半日以上かかる</li>
</ul>
</li>
</ul>


<p>まとめ</p>

<ul>
<li>高可用性システムを構築する上でMysQL Clusterはいい選択</li>
<li>ただ色々考慮するポイントがある</li>
</ul>


<p>MySQL Cluster Auto Installerのデモ</p>

<ul>
<li>GUIでセットアップする Auto Installerがv7.3が付属するようになった</li>
<li>マルチホストサポート</li>
</ul>


<hr />

<p>うっかり間違えて参加したけど、とても勉強になるいい回だった。発表者はプレゼンなれしてるなーって感じでわかりやすかったし。<br>
MySQL Clusterは話を聞いてると確かにCasualに使えそうだけど、改めてCasualをアピールしてるってことは実際には結構運用が大変なんだろーなーということは想像がつく。けど、面白そうだしこうゆう製品を扱う経験はエンジニアなら一度はしたいところ。</p>
]]></content>
  </entry>
  
</feed>
