<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sgykfjsm.github.com]]></title>
  <link href="http://sgykfjsm.github.io/atom.xml" rel="self"/>
  <link href="http://sgykfjsm.github.io/"/>
  <updated>2016-01-21T01:26:17+09:00</updated>
  <id>http://sgykfjsm.github.io/</id>
  <author>
    <name><![CDATA[sgykfjsm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Goでfunctionが実行された順番を追いかける]]></title>
    <link href="http://sgykfjsm.github.io/blog/2016/01/20/golang-function-tracing/"/>
    <updated>2016-01-20T00:33:25+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2016/01/20/golang-function-tracing</id>
    <content type="html"><![CDATA[<p>Goはgo routineを使って並行処理を容易に書くことができるが、下手に書くと色々なfunctionが相互に入り乱れて処理が追いづらいときがある。ここではGoでfunctionをトレースする方法をメモしておく。</p>

<!-- more -->


<p>結論から言えば、<code>runtime.Caller</code>を使えば良い。なお、<code>debug.PrintStack</code>でstack traceを出力することができるが、標準エラー出力となるのでちょっと使いづらい。しかし、ただコンソールで出力したいだけなら、<code>debug.PrintStack</code>のほうが簡単であるし、これ以降を読む必要は無い。</p>

<ul>
<li><a href="https://golang.org/pkg/runtime/#Caller">func Caller</a></li>
<li><a href="https://golang.org/pkg/runtime/debug/#PrintStack">func PrintStack</a></li>
</ul>


<a name="L.................."></a>
<h2>簡単な使い方</h2>

<p><code>runtime.Caller</code>とは何なのかはマニュアルを参照すべきだけど、簡単に言うと、引数の数値に応じて<code>Caller</code>が呼び出された時点での呼び出し元の情報を提供してくれるfunctionと言える。例えば、以下のような処理を想定してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;runtime&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">doCaller</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">programCounter</span><span class="p">,</span> <span class="nx">sourceFileName</span><span class="p">,</span> <span class="nx">sourceFileLineNum</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Caller</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;programCounter: %v\n&quot;</span><span class="p">,</span> <span class="nx">programCounter</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;souruntime: %s\n&quot;</span><span class="p">,</span> <span class="nx">sourceFileName</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;sourceFileLineNum: %d\n&quot;</span><span class="p">,</span> <span class="nx">sourceFileLineNum</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;ok: %t\n&quot;</span><span class="p">,</span> <span class="nx">ok</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">callCaller</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doCaller</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">callCaller</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://play.golang.org/p/X_tDUvfR7s">https://play.golang.org/p/X_tDUvfR7s</a></p>

<p>上記の場合、処理は<code>main</code> -> <code>callCaller</code> -> <code>doCaller</code>の順で実行され、この順番で<em>goroutineのstack</em>にfunctionが積み上がる（正確には<code>main</code>の前に<code>runtime.main</code>と<code>runtime.goexit</code>が呼び出されているがここでは省略する）。<code>runtime.Caller</code>の引数は<code>skip int</code>と定義されているが、イメージとしては配列のインデックスみたいな感じで、stackの上から何番目の情報を取得するか、を指定することができる。上記の場合、<code>1</code>を指定しているので、<code>callCaller</code>の情報を取得することができる。結果は以下の通り。なんかタイムスタンプがおかしい気がするが、気にしない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">programCounter</span><span class="p">:</span> <span class="mi">132352</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">souruntime</span><span class="p">:</span> <span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox627002569</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">sourceFileLineNum</span><span class="p">:</span> <span class="mi">17</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">ok</span><span class="p">:</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>変数名から何となく推測できると思うけど、<code>runtime.Caller</code>の返り値の１つ目はプログラムカウンター、2つ目がビルドされたソースファイル名（実行ファイル名では無いことに注意）、3つ目はソースファイル内での呼びだされた位置、4つ目は情報が取得できたか否かを示すbooleanとなっている。</p>

<p>これだけだと、どの関数から呼ばれたか？がわからないので、もう少し処理を追加してみる。使うfunctionは<code>FuncForPC</code>だ。</p>

<ul>
<li><a href="https://golang.org/pkg/runtime/#FuncForPC">FuncForPC</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;runtime&quot;</span>
</span><span class='line'>  <span class="s">&quot;strings&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">doCaller</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">programCounter</span><span class="p">,</span> <span class="nx">sourceFileName</span><span class="p">,</span> <span class="nx">sourceFileLineNum</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Caller</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;programCounter: %v\n&quot;</span><span class="p">,</span> <span class="nx">programCounter</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;souruntime: %s\n&quot;</span><span class="p">,</span> <span class="nx">sourceFileName</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;sourceFileLineNum: %d\n&quot;</span><span class="p">,</span> <span class="nx">sourceFileLineNum</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;ok: %t\n&quot;</span><span class="p">,</span> <span class="nx">ok</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">println</span><span class="p">(</span><span class="s">&quot;-----&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fn</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">FuncForPC</span><span class="p">(</span><span class="nx">programCounter</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Function Name: %s\n&quot;</span><span class="p">,</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">Name</span><span class="p">())</span>
</span><span class='line'>  <span class="nx">fileName</span><span class="p">,</span> <span class="nx">fileLine</span> <span class="o">:=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">FileLine</span><span class="p">(</span><span class="nx">programCounter</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;FileName:%s, FileLine: %d\n&quot;</span><span class="p">,</span> <span class="nx">fileName</span><span class="p">,</span> <span class="nx">fileLine</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">splitedFnName</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nx">Split</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">Name</span><span class="p">(),</span> <span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">packageName</span> <span class="o">:=</span> <span class="nx">splitedFnName</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">callerFuncName</span> <span class="o">:=</span> <span class="nx">splitedFnName</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;packageName: %s\n&quot;</span><span class="p">,</span> <span class="nx">packageName</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;functionName: %s\n&quot;</span><span class="p">,</span> <span class="nx">callerFuncName</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">callCaller</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doCaller</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">callCaller</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://play.golang.org/p/sFMnwYTHYF">https://play.golang.org/p/sFMnwYTHYF</a></p>

<p>結果は以下の通り。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">programCounter</span><span class="p">:</span> <span class="mi">134432</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">souruntime</span><span class="p">:</span> <span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox246241909</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">sourceFileLineNum</span><span class="p">:</span> <span class="mi">32</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">ok</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'><span class="o">-----</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">Function</span> <span class="nx">Name</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">callCaller</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">FileName</span><span class="p">:</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox246241909</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">,</span> <span class="nx">FileLine</span><span class="p">:</span> <span class="mi">33</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">packageName</span><span class="p">:</span> <span class="nx">main</span>
</span><span class='line'><span class="mi">2009</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">10</span> <span class="mi">23</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="nx">functionName</span><span class="p">:</span> <span class="nx">callCaller</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>FuncForPC</code>は引数で受け取ったプログラムカウンターの詳細な情報を返してくれる。見ての通り、<code>Caller</code>で取得したプログラムカンターから呼び出し元のfunction名、ファイル情報諸々を取得することができる。</p>

<p>このように、<code>Caller</code>と<code>FuncForPC</code>を使うことで、ある関数がどこから呼び出されたのかを知ることができる。</p>

<a name="L......1........................"></a>
<h2>もう1歩踏み込んでみる</h2>

<p>実際にデバッグする際には、最初のエントリーポイントからエラーが発生したfunctionまでを順に辿りたいことある。上記の<code>doCaller</code>を全ての関数に<code>defer</code>で登録しておけば出来なくはないが、そんなことはしたくないはず。通常は<code>log.Fatal</code>などでプログラムを終了させる直前とかに呼び出し情報を取得できるようにしておきたいはず。要は呼び出し情報をまとめて取得して、良い感じに扱いたいのだ。</p>

<p>とても安直な発想だが、<code>Caller</code>の引数を1つずつインクリメントしてたどる方法をここでは試してみる。例えば以下の様な感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;regexp&quot;</span>
</span><span class='line'>  <span class="s">&quot;runtime&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">re</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nx">MustCompile</span><span class="p">(</span><span class="s">`^(\S.+)\.(\S.+)$`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">CallerInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">PackageName</span>  <span class="kt">string</span>
</span><span class='line'>  <span class="nx">FunctionName</span> <span class="kt">string</span>
</span><span class='line'>  <span class="nx">FileName</span>     <span class="kt">string</span>
</span><span class='line'>  <span class="nx">FileLine</span>     <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Dump</span><span class="p">()</span> <span class="p">(</span><span class="nx">callerInfo</span> <span class="p">[]</span><span class="o">*</span><span class="nx">CallerInfo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">pc</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Caller</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// https://golang.org/pkg/runtime/#Caller</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">break</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">fn</span> <span class="o">:=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">FuncForPC</span><span class="p">(</span><span class="nx">pc</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fileName</span><span class="p">,</span> <span class="nx">fileLine</span> <span class="o">:=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">FileLine</span><span class="p">(</span><span class="nx">pc</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">_fn</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nx">FindStringSubmatch</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">Name</span><span class="p">())</span>
</span><span class='line'>      <span class="nx">callerInfo</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">callerInfo</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">CallerInfo</span><span class="p">{</span>
</span><span class='line'>          <span class="nx">PackageName</span><span class="p">:</span>  <span class="nx">_fn</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>          <span class="nx">FunctionName</span><span class="p">:</span> <span class="nx">_fn</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class='line'>          <span class="nx">FileName</span><span class="p">:</span>     <span class="nx">fileName</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">FileLine</span><span class="p">:</span>     <span class="nx">fileLine</span><span class="p">,</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">info</span> <span class="o">:=</span> <span class="nx">Dump</span><span class="p">()</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">info</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">v</span> <span class="o">:=</span> <span class="nx">info</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%02d: %s.%s@%s:%d\n&quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span><span class="p">.</span><span class="nx">PackageName</span><span class="p">,</span> <span class="nx">v</span><span class="p">.</span><span class="nx">FunctionName</span><span class="p">,</span> <span class="nx">v</span><span class="p">.</span><span class="nx">FileName</span><span class="p">,</span> <span class="nx">v</span><span class="p">.</span><span class="nx">FileLine</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">bar</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://play.golang.org/p/iED00tQ9EW">https://play.golang.org/p/iED00tQ9EW</a></p>

<p>上記を実行すると、以下の様にスタックの下から、つまりfunctionが実行された順番に表示される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="mo">04</span><span class="p">:</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">goexit</span><span class="err">@</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="k">go</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">runtime</span><span class="o">/</span><span class="nx">asm_amd64p32</span><span class="p">.</span><span class="nx">s</span><span class="p">:</span><span class="mi">1133</span>
</span><span class='line'><span class="mo">03</span><span class="p">:</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">main</span><span class="err">@</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="k">go</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">runtime</span><span class="o">/</span><span class="nx">proc</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">120</span>
</span><span class='line'><span class="mo">02</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">main</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox266928852</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">55</span>
</span><span class='line'><span class="mo">01</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">bar</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox266928852</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">51</span>
</span><span class='line'><span class="mo">00</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">foo</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox266928852</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L......"></a>
<h2>余談</h2>

<p><code>Caller</code>は<em>goroutineのstackに積み上げられた情報</em>を出力するため、対象の処理に<code>go xxx()</code>や<code>go func</code>が含まれていると、上記のように必ずしも<code>runtime.goexit</code>-><code>runtime.main</code>の順番で始まるとは限らないことに注意すること。例えば、以下の様な感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span><span class='line'>  <span class="nx">wg</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">bar</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">wg</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'>  <span class="nx">wg</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://play.golang.org/p/WZE3lItf8h">https://play.golang.org/p/WZE3lItf8h</a></p>

<p>上記の結果は以下の通りで、<code>runtime.main</code>が無いことがわかる。これは<code>go func</code>が<code>func main</code>とは異なるgoroutineで処理されていることを示している（と思う）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="mo">03</span><span class="p">:</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">goexit</span><span class="err">@</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="k">go</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">runtime</span><span class="o">/</span><span class="nx">asm_amd64p32</span><span class="p">.</span><span class="nx">s</span><span class="p">:</span><span class="mi">1133</span>
</span><span class='line'><span class="mo">02</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">func1</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox306261972</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">59</span>
</span><span class='line'><span class="mo">01</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">bar</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox306261972</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">52</span>
</span><span class='line'><span class="mo">00</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">foo</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox306261972</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">43</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、次の場合は同じ関数をclosureでラップせずにgoroutineとして起動した場合。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">go</span> <span class="nx">bar</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://play.golang.org/p/CcNp-Do9mb">https://play.golang.org/p/CcNp-Do9mb</a></p>

<p>結果は以下の様になる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="mo">02</span><span class="p">:</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">goexit</span><span class="err">@</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="k">go</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">runtime</span><span class="o">/</span><span class="nx">asm_amd64p32</span><span class="p">.</span><span class="nx">s</span><span class="p">:</span><span class="mi">1133</span>
</span><span class='line'><span class="mo">01</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">bar</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox385327178</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">52</span>
</span><span class='line'><span class="mo">00</span><span class="p">:</span> <span class="nx">main</span><span class="p">.</span><span class="nx">foo</span><span class="err">@</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">sandbox385327178</span><span class="o">/</span><span class="nx">main</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">43</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>go func</code>の場合と違って、closureを経由せずに、<code>bar</code>以降の処理を別のgoroutineとして起動させていることがわかる。</p>

<p>ちゃんとわかっている人からすれば当然のことに思われるだろうが、自分のようなGo初心者だと出力内容を見て、アレ？と思うかもしれないので、goroutineを使う処理のstack情報を取得する場合は注意すること。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ベンダリングのためのgomvpkgとgbについて考えてみる]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/11/03/compare-gomvpkg-with-gb/"/>
    <updated>2015-11-03T20:02:45+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/11/03/compare-gomvpkg-with-gb</id>
    <content type="html"><![CDATA[<p>GO言語には多言語にあるようなパッケージマネジメントの仕組みが(公式には)サポートされていない。<a href="https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit">GOv1.5では実験的に導入されている</a>が、例えばJavaで言うmaven、Pythonで言うpipなどのような共通として用いられているツールなどは無く、基本的には以下の3つのやり方が主流だと思われる。</p>

<ul>
<li>依存するパッケージを自分のリポジトリに取り込むVendoring</li>
<li>3rd partyツールによるRevison指定などといった擬似的なパッケージマネジメント</li>
<li>そもそもパッケージマネジメントをしない</li>
</ul>


<p>自分の開発では、業務も含めて、あまり外部パッケージに依存するようなことはあまり無いが、もしやるなら1つ目のVendoringになると思う。で、今回はVendoringを行なう際に便利だと思われる2つのツール、<code>gomvpkg</code>と<code>gb</code>を試してみる。</p>

<!-- more -->


<a name="gomvpkg........."></a>
<h2>gomvpkgの概要</h2>

<p><code>gomvpkg</code>は公式に提供されているツールであり、その名称から想像できるように、パッケージを移動させるツールだ。<code>gomvpkg</code>の実体は<code>golang.org/x/tools/refactor/rename</code>によるリファクタリングである。</p>

<ul>
<li><a href="https://godoc.org/golang.org/x/tools/refactor/rename">golang.org/x/tools/refactor/rename</a></li>
</ul>


<p>使い方はシンプルで以下の様に実行すれば良い。詳細は<code>gomvpkg -help</code>で確認されたし。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gomvpkg -from ${original_package_name} -to ${post_moved_package_name}</span></code></pre></td></tr></table></div></figure>


<p>このコマンドを実行する場合、注意することは以下の通り。</p>

<ul>
<li><code>-from</code>と<code>-to</code>の引数は物理的なディレクトリパスではなく、ソースコードファイルに記述する<code>import</code>につづくパッケージ名であること</li>
<li>移動後のパッケージが配置されるディレクトリは事前に存在してはいけない</li>
<li>移動後のパッケージが配置されるディレクトリの親ディレクトリが存在していること</li>
</ul>


<p>普通の<code>mv</code>コマンドと同じように使うとエラーが頻発して困るので注意されたし。</p>

<a name="gomvpkg........."></a>
<h3>gomvpkgの難点</h3>

<p><code>gomvpkg</code>は<code>$GOPATH</code>以下をスキャンし、移動対象のパッケージの依存関係を解決し、指定の位置にパッケージを移動する(コピーではない)。また、移動対象のパッケージをimportしているファイルがあれば、import pathを書き換えてくれる。</p>

<p>これだけを述べるとなんか便利そうだが、実際は意外とクセモノだったりする。まず、&#8221;依存性を解決する&#8221;という点について。実際に<code>gomvpkg</code>を実行すると、以下のようなエラーが出る場合がある。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Users/sgyk/local/script/golang/src/github.com/Sirupsen/logrus/examples/hook/hook.go:5:2: could not import gopkg.in/gemnasium/logrus-airbrake-hook.v2 (cannot find package "gopkg.in/gemnasium/logrus-airbrake-hook.v2" in any of:
</span><span class='line'>        /usr/local/opt/go/libexec/src/gopkg.in/gemnasium/logrus-airbrake-hook.v2 (from $GOROOT)
</span><span class='line'>        /Users/sgyk/local/script/golang/src/gopkg.in/gemnasium/logrus-airbrake-hook.v2 (from $GOPATH))
</span><span class='line'>/Users/sgyk/local/script/golang/src/github.com/Sirupsen/logrus/examples/hook/hook.go:12:16: undeclared name: airbrake
</span><span class='line'>gomvpkg: couldn't load packages due to errors: github.com/Sirupsen/logrus/examples/hook.</span></code></pre></td></tr></table></div></figure>


<p>上記は簡単に言うと、移動対象のパッケージにおいて<code>gopkg.in/gemnasium/logrus-airbrake-hook.v2</code>が参照できないから<code>gomvpkg</code>に失敗したということ。なので、これを解決するには<code>go get</code>で対象のパッケージを取得してこなければならない。</p>

<p>次に&#8221;<code>$GOPATH</code>以下をスキャン&#8221;という点と&#8221;import pathを書き換える&#8221;という点について。おそらく、<code>gomvpkg</code>を実行する場合、対象プロジェクト(言い換えると移動先のプロジェクト)内のファイルの<code>import</code>だけを書き換えることを期待しているんじゃないかと思う。少なくとも自分はそうだった。しかし、実際には<code>$GOPATH</code>内すべてをスキャンするため、対象となるimport pathはすべて書き換えられてしまう。実際に<code>gomvpkg</code>を実行すると、以下の様な出力をみるはず。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Renamed 6 occurrences in 1 file in 1 package.
</span><span class='line'>Renamed 11 occurrences in 1 file in 1 package.
</span><span class='line'>Renamed 16 occurrences in 1 file in 1 package.
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>これは実際のところ、かなり怖い。なぜならどのプロジェクトのファイルが書き換えられてしまったのか、詳細が把握できないからだ。そのため、意図しないファイル改変を行ってしまう可能性が高い。ちなみに運が悪い（？）と、上記の出力がなされず、別の出力がなされてしまう場合がある。</p>

<p>まぁ冷静に考えていると、どのプロジェクトのファイルだけを改変するかという指定はできないので、この挙動は仕方ないのかもしれないが、危ういことには変わりない。</p>

<p><code>gomvpkg</code>はGOの公式ドキュメントでベンダリングにおける有用なツールとして<a href="https://golang.org/doc/faq#get_version">紹介されている</a>が、実際はかなり危険なので使う際は注意が必要だと思う。</p>

<a name="gb............"></a>
<h2>gbについて</h2>

<p><code>gomvpkg</code>がリファクタリングのためのツールであるのに対し、<code>gb</code>はベンダリングのためのツールであり、公式には&#8221;A project based build tool for the Go programming language.&ldquo;と紹介されている。</p>

<p><code>gb</code>について簡単にいうと、既存のGOプロジェクトとは隔離された世界でベンダリングを行なうためのツールと言える。言い換えると、<code>gb</code>はプロジェクトベースで依存パッケージをベンダリングする。また、<code>gb</code>は既存のgo toolsを置き換えるものではない。</p>

<p>特徴的な点としては、<code>$GOPATH</code>配下にプロジェクトを作ってはいけないというルールがあり、関連パッケージは<code>go get</code>ではなく<code>git clone</code>で取得しなければならない点だ。この特徴については捉えようによっては良い点がある。たとえば、GO初心者が参画する場合、<code>$GOPATH</code>にハマることもないし、<code>go get</code>について知る必要がないため、学習コストを一定度下げることができる（といっても大したコストではないが）。しかし、逆に言えば、gbのお作法を学ぶ必要がある。</p>

<a name="gb............"></a>
<h2>gbのお作法</h2>

<p><code>gb</code>はプロジェクトベースツールなので、プロジェクトごとにディレクトリを設けなければならない。また、<code>src</code>ディレクトリや<code>bin</code>ディレクトリはプロジェクトのルートディレクトリの直下に設けなければならない。依存するパッケージはプロジェクトのルートディレクトリ直下に<code>vender/src</code>以下に格納しなければならない。</p>

<p>基本的には上記のディレクトリ配置のお作法を守っていれば、通常のGO開発と同じようにすすめることが出来るはず。</p>

<a name="gb........."></a>
<h2>gbの難点</h2>

<p><code>gb</code>は<code>$GOPATH</code>とは違う世界で開発しなければならないが、そのためにエディタの支援を受けられない場合がある。</p>

<p>例えば、vimではソースコード中で<code>import</code>されているパッケージからコマンド補完をすることがプラグインによって可能だが、プロジェクトルートに格納されているが<code>$GOPATH</code>以下にはないパッケージの場合、エディタがエラーとする場合がある。その場合は問題となっているパッケージを<code>go get</code>すれば解決するが、<code>gb</code>での<code>git clone</code>と<code>go get</code>での二度手間が発生してしまう。</p>

<hr />

<p>以上、ベンダリングのためのツールとして<code>gomvpkg</code>と<code>gb</code>の両方を見たが、どちらもそれなりに難点があり、どちらも他人に進めることはできないなーと個人的には思う。とはいえ、ある程度の大規模な開発を行なうのであれば、<code>gb</code>が良いかな―とは思う。ただ、なんとなくGの世界では外部パッケージに頼らないようにすべきみたいな印象を持っているので、GO開発者はパッケージ管理にあんまり興味ないのかなーと思ったり。一応、v1.5からは実験的に<code>go tool</code>でのベンダリングサポートが導入されているようだけど、パッケージ管理という面から考えると(例えばバージョンのアップデートとダウングレードの容易さなど)、まだまだ貧弱だな―とおもうので、なるべく外部パッケージに頼らないほうが良いのかなと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ginkgo 基本的な使い方編]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/09/24/ginkgo-getting-start/"/>
    <updated>2015-09-24T22:51:20+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/09/24/ginkgo-getting-start</id>
    <content type="html"><![CDATA[<p>最近、golangでプログラムを書く機会が増えてきた。golangでTDDをする場合、標準の<a href="https://golang.org/pkg/testing/">testingパッケージ</a>を使うのが一般的なようだ。ただし、標準パッケージだけだとちょっとテストが書きづらいので、<a href="https://github.com/stretchr/testify">stretchr/testify</a>を使っている人も多いと思う。</p>

<p>関数のテストをしたいときは標準パッケージなりtestifyを使うなりで良いのだけど、振る舞いをテストしたい、つまりBDDをしたいなーと思った時にちょっと調べらたら<a href="http://onsi.github.io/ginkgo/">Ginkgo</a>というのが良さ気だったので、ちょっと試してみる。</p>

<!-- more -->


<a name="Ginkgo......"></a>
<h2>Ginkgoとは</h2>

<p>表現力があって包括的なテストを効率良く書くためのBDDスタイルのテストフレームワーク。<a href="http://github.com/onsi/gomega">Gomega</a>というMatcherライブラリと併用すると良い感じらしいけど、単体でも充分使えるらしい。</p>

<p>今回はドキュメントに従い、GinkgoだけでなくGomegaもインストールした。</p>

<a name="L.................."></a>
<h2>インストール</h2>

<p><code>go get</code>するだけ。ginkgoの実行バイナリが<code>${GOPATH}/bin</code>に、ソースコードはgomegaとともに<code>$GOPATH/src/github.com/onsi</code>にインストールされていることが確認できる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go get github.com/onsi/ginkgo/ginkgo
</span><span class='line'>$ go get github.com/onsi/gomega
</span><span class='line'>$ ls -l $GOPATH/bin
</span><span class='line'>...
</span><span class='line'>-rwxr-xr-x   1 sgyk  staff  11747788  9 24 23:00 ginkgo*
</span><span class='line'>$ ls -l $GOPATH/src/github.com/onsi
</span><span class='line'>...
</span><span class='line'>drwxr-xr-x  16 sgyk  staff  544  9 24 23:00 ginkgo/
</span><span class='line'>drwxr-xr-x  17 sgyk  staff  578  9 24 23:01 gomega/</span></code></pre></td></tr></table></div></figure>


<a name="L........."></a>
<h2>始め方</h2>

<p>こんなかんじで<code>ginkgo bootstrap</code>をすると、テストスイートを生成してくれる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir ginkgo-study
</span><span class='line'>$ cd $_
</span><span class='line'>$ ginkgo bootstrap
</span><span class='line'>Generating ginkgo test suite bootstrap for ginkgo_study in:
</span><span class='line'>        ginkgo_study_suite_test.go
</span><span class='line'>$ cat ginkgo_study_suite_test.go
</span><span class='line'>package ginkgo_study_test
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>        . "github.com/onsi/ginkgo"
</span><span class='line'>        . "github.com/onsi/gomega"
</span><span class='line'>
</span><span class='line'>        "testing"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>func TestGinkgoStudy(t *testing.T) {
</span><span class='line'>        RegisterFailHandler(Fail)
</span><span class='line'>        RunSpecs(t, "GinkgoStudy Suite")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>自動生成されたファイルは<code>ginkgo</code>でテストを走らせることができるし、Ginkgoは標準パッケージであるtestingにフックしているので、<code>go test</code>で実行させることも出来る。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ginkgo
</span><span class='line'>Running Suite: GinkgoStudy Suite
</span><span class='line'>================================
</span><span class='line'>Random Seed: 1443106503
</span><span class='line'>Will run 0 of 0 specs
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Ran 0 of 0 Specs in 0.000 seconds
</span><span class='line'>SUCCESS! -- 0 Passed | 0 Failed | 0 Pending | 0 Skipped PASS
</span><span class='line'>
</span><span class='line'>Ginkgo ran 1 suite in 3.234616229s
</span><span class='line'>Test Suite Passed</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go test
</span><span class='line'>Running Suite: GinkgoStudy Suite
</span><span class='line'>================================
</span><span class='line'>Random Seed: 1443106514
</span><span class='line'>Will run 0 of 0 specs
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Ran 0 of 0 Specs in 0.000 seconds
</span><span class='line'>SUCCESS! -- 0 Passed | 0 Failed | 0 Pending | 0 Skipped PASS
</span><span class='line'>ok      github.com/sgykfjsm/ginkgo-study        0.077s</span></code></pre></td></tr></table></div></figure>


<a name="L..................................................."></a>
<h3>自動生成されたテストスイートの確認</h3>

<p>まずは１行目。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package ginkgo_study_test</span></code></pre></td></tr></table></div></figure>


<p>このパッケージ名は<code>ginkgo bootstrap</code>が実行されたディレクトリ名を元に設定されている。今回は<code>ginkgo-study</code>というディレクトリの中で実行したので、<code>ginkgo_study_test</code>となっている。もちろん敢えて<code>ginkgo_study</code>など、別名に修正することは可能だが、テストコードと実コードとの切り分けの観点からすると、このままで良いだろう。</p>

<p>続いて3行目から8行目について。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import (
</span><span class='line'>        . "github.com/onsi/ginkgo"
</span><span class='line'>        . "github.com/onsi/gomega"
</span><span class='line'>
</span><span class='line'>        "testing"
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>ドットインポートを使うことでginkgoとgomegaをtop levelでインポート、つまり修飾子なしで各パッケージの関数を使えるようにしている。詳しくはSOの<a href="http://stackoverflow.com/a/6478990">What does the &lsquo;.&rsquo; (dot or period) in a go import statement do?の回答</a>と公式ドキュメントの<a href="https://golang.org/ref/spec#Import_declarations">Import declarations</a>を参照のこと。</p>

<p>ドットインポートをしたくない場合は、bootstrap実行時にオプション<code>--nodot</code>をつけることで回避できる。</p>

<p>では最後に自動生成されたテスト関数を確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func TestGinkgoStudy(t *testing.T) {
</span><span class='line'>        RegisterFailHandler(Fail)
</span><span class='line'>        RunSpecs(t, "GinkgoStudy Suite")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>TestGinkgoStudy</code>はもちろんただの関数名。引数に<code>t *testing.T</code>があることからわかるように<code>go test</code>でこの関数を実行することが出来る。</p>

<p>11行目の<code>RegisterFailHandler</code>は、Ginkgoの<code>Fail</code>関数を引数にすることで、テストが失敗した際にGomegaへGinkgoの<code>Fail</code>関数を渡している。この<code>RegisterFailHandler</code>はGinkgoとGomegaの間の唯一の接点となっている。</p>

<p>12行目の<code>RunSpec</code>でテストのスペック、つまりテストの内容を設定する。</p>

<p>ドキュメントに沿って細かく見ていったけど、全体的に難しいことはあまり無いように見える。Ginkgo(に限らずBDD全般がそうだと思うけど)ではテストをどう実装するか、よりもどのようにテストを設計するかに注力しやすくなっている。</p>

<a name="L.............................."></a>
<h2>テストスペックを作る</h2>

<p>テストスペックはテストスイートと同様にコマンドで自動生成出来る。と言っても、雛形だけど。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ginkgo generate ginkgo_study
</span><span class='line'>Generating ginkgo test for GinkgoStudy in:
</span><span class='line'>  ginkgo_study_test.go
</span><span class='line'>
</span><span class='line'>$ cat ginkgo_study_test.go
</span><span class='line'>package ginkgo_study_test
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>        . "github.com/sgykfjsm/ginkgo-study"
</span><span class='line'>
</span><span class='line'>        . "github.com/onsi/ginkgo"
</span><span class='line'>        . "github.com/onsi/gomega"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>var _ = Describe("GinkgoStudy", func() {
</span><span class='line'>
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p><code>ginkgo generate</code>にパッケージ名を渡せば良い。</p>

<a name="L..................................................."></a>
<h3>自動生成されたテストスペックの確認</h3>

<p>１行目については特に言うことはないと思うけど、<code>ginkgo generate</code>の引数が設定される。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package ginkgo_study_test</span></code></pre></td></tr></table></div></figure>


<p>3行目から7行目にかけてはテストスイートと違いがある。1つはテスト対象のパッケージが設定されていること、もう1つはtestingパッケージがimportされていないこと。前者については特に疑問はないと思うけど、後者についてはちょっと違和感があるかもしれない。というのも、一般的にgolangを使ったプログラム開発では、テストコードは<code>xxx_test.go</code>というネーミングが推奨されており、そのファイル内ではtestingパッケージをimportすることがほとんどだが、これはそういった慣習と異なっている。まぁ慣れの問題かもしれないが、ginkgoを使ったテストコードだということを知らないと違和感があると思う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import (
</span><span class='line'>        . "github.com/sgykfjsm/ginkgo-study"
</span><span class='line'>
</span><span class='line'>        . "github.com/onsi/ginkgo"
</span><span class='line'>        . "github.com/onsi/gomega"
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>以降のコードは&#8221;コンテナ&#8221;と捉えることができ、スペックを記述(=格納)するクロージャとなる。開発者はこのコンテナの中にスペックを記述することになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var _ = Describe("GinkgoStudy", func() {
</span><span class='line'>
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>ところで、<code>var _ = ...</code>という記述は今回初めて見かけた。ドキュメントによると、<code>var _ = ...</code>と書くことで、<code>func init(){}</code>無しにトップレベルで(つまりは初期処理として)<code>Describe</code>が評価されることができるらしい。</p>

<a name="L.............................."></a>
<h2>テストスペックを書く</h2>

<p>では実際にテストスペックを書いてみる。今回は以下の様なモデルと、その振る舞いを書いた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package ginkgo_study
</span><span class='line'>
</span><span class='line'>type Grade struct {
</span><span class='line'>  Subject   string
</span><span class='line'>  Score     int
</span><span class='line'>  Mandatory bool
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>func (g *Grade) IsPass() bool {
</span><span class='line'>  if g.Score &gt; 60 {
</span><span class='line'>      return true
</span><span class='line'>  }
</span><span class='line'>  return false
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>…まぁこれについては特にいうことは無いと思う。つぎに、対応するスペックを以下のようにした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package ginkgo_study_test
</span><span class='line'>
</span><span class='line'>import (
</span><span class='line'>  . "github.com/sgykfjsm/ginkgo-study"
</span><span class='line'>
</span><span class='line'>  . "github.com/onsi/ginkgo"
</span><span class='line'>  . "github.com/onsi/gomega"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>var _ = Describe("GinkgoStudy", func() {
</span><span class='line'>
</span><span class='line'>  var (
</span><span class='line'>      goodGrade Grade
</span><span class='line'>      badGrade  Grade
</span><span class='line'>  )
</span><span class='line'>
</span><span class='line'>  BeforeEach(func() {
</span><span class='line'>      goodGrade = Grade{
</span><span class='line'>          Subject:   "Math",
</span><span class='line'>          Score:     61,
</span><span class='line'>          Mandatory: true,
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      badGrade = Grade{
</span><span class='line'>          Subject:   "History",
</span><span class='line'>          Score:     60,
</span><span class='line'>          Mandatory: false,
</span><span class='line'>      }
</span><span class='line'>  })
</span><span class='line'>
</span><span class='line'>  Describe("Criteria of pass or not", func() {
</span><span class='line'>      Context("With more than 60", func() {
</span><span class='line'>          It("should be passed", func() {
</span><span class='line'>              Expect(goodGrade.IsPass()).To(Equal(true))
</span><span class='line'>          })
</span><span class='line'>      })
</span><span class='line'>
</span><span class='line'>      Context("With less than 60", func() {
</span><span class='line'>          It("should be failed", func() {
</span><span class='line'>              Expect(badGrade.IsPass()).To(Equal(false))
</span><span class='line'>          })
</span><span class='line'>      })
</span><span class='line'>  })
</span><span class='line'>
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<a name="L.............................."></a>
<h3>テストスペックの解説</h3>

<p>先にも説明したように、開発者は<code>Describe</code>のクロージャで表現されたコンテナの中にスペックを書けば良い。</p>

<p><code>BeforeEach</code>はいわゆる<code>setup</code>にあたる処理。スペックが実行される度に、<code>BeforeEach</code>で定義した&#8221;状態&#8221;が作られる。また、ここで定義した&#8221;状態&#8221;は後述する<code>It</code>の中で使うことが出来る。</p>

<p><code>Describe</code>と<code>Context</code>を使って、スペックの内容を表現豊かに記述することができ、<code>It</code>でスペックを指定する。<code>BeforeEach</code>と<code>It</code>で&#8221;状態&#8221;を共有するためには、コンテナの中のトップレベルで変数を定義すれば良い。</p>

<p><code>It</code>の中で使っている<code>Expect</code>はGomega由来のもの。これを使って評価したい内容を記述すれば良い。</p>

<a name="L......................................."></a>
<h2>テストスペックを実行する。</h2>

<p>このテストスペックを実行してみる。実行方法は先述の通り、普通に<code>go test</code>すれば良い。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go test -v -cover
</span><span class='line'>=== RUN TestGinkgoStudy
</span><span class='line'>Running Suite: GinkgoStudy Suite
</span><span class='line'>================================
</span><span class='line'>Random Seed: 1443114232
</span><span class='line'>Will run 2 of 2 specs
</span><span class='line'>
</span><span class='line'>••
</span><span class='line'>Ran 2 of 2 Specs in 0.000 seconds
</span><span class='line'>SUCCESS! -- 2 Passed | 0 Failed | 0 Pending | 0 Skipped --- PASS: TestGinkgoStudy (0.00 seconds)
</span><span class='line'>PASS
</span><span class='line'>coverage: 100.0% of statements
</span><span class='line'>ok      github.com/sgykfjsm/ginkgo-study        0.073s</span></code></pre></td></tr></table></div></figure>


<p>見ての通り、<code>-cover</code>で同時にカバレッジを出すことができる。また、テストに失敗すると、以下の様になる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ go test -v -cover
</span><span class='line'>=== RUN TestGinkgoStudy
</span><span class='line'>Running Suite: GinkgoStudy Suite
</span><span class='line'>================================
</span><span class='line'>Random Seed: 1443114347
</span><span class='line'>Will run 2 of 2 specs
</span><span class='line'>
</span><span class='line'>• Failure [0.004 seconds]
</span><span class='line'>GinkgoStudy
</span><span class='line'>/Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:45
</span><span class='line'>  Criteria of pass or not
</span><span class='line'>  /Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:43
</span><span class='line'>    With more than 60
</span><span class='line'>    /Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:36
</span><span class='line'>      should be passed [It]
</span><span class='line'>      /Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:35
</span><span class='line'>
</span><span class='line'>      Expected
</span><span class='line'>          &lt;bool&gt;: false
</span><span class='line'>      to equal
</span><span class='line'>          &lt;bool&gt;: true
</span><span class='line'>
</span><span class='line'>      /Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:34
</span><span class='line'>------------------------------
</span><span class='line'>•
</span><span class='line'>
</span><span class='line'>Summarizing 1 Failure:
</span><span class='line'>
</span><span class='line'>[Fail] GinkgoStudy Criteria of pass or not With more than 60 [It] should be passed
</span><span class='line'>/Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:34
</span><span class='line'>
</span><span class='line'>Ran 2 of 2 Specs in 0.004 seconds
</span><span class='line'>FAIL! -- 1 Passed | 1 Failed | 0 Pending | 0 Skipped --- FAIL: TestGinkgoStudy (0.00 seconds)
</span><span class='line'>FAIL
</span><span class='line'>exit status 1
</span><span class='line'>FAIL    github.com/sgykfjsm/ginkgo-study        0.071s</span></code></pre></td></tr></table></div></figure>


<p>見ての通り、かなり丁寧に失敗箇所を教えてくれる。ちなみに、Ginkgoの出力は色付きであり、一部はグレーで表示されるので、ここで見るほど冗長には感じないものと思われる。</p>

<a name="L........."></a>
<h2>まとめ</h2>

<p>以上、ごくごく簡単にGinkgoの使い方を示した。といっても、内容的には公式ドキュメントの冒頭をなぞっただけだが…。</p>

<p>ただ、見ての通り、かなり使いやすいことがわかると思う。コマンドによるボイラープレートや雛形の生成により、開発者は集中すべきことだけに集中できるし、他のBDDフレームワークと同様に自然言語に近い感覚でテストを書くことができる。</p>

<p>また、テスト失敗時に細かい出力をしてくれるのも地味に嬉しい。標準のtestingパッケージやtestifyなどはシンプルな出力しかしてくれないのでデバッグコードが必要になる時があるが、Ginkgoだとその必要はだいぶ減らすことができるだろう。とはいえ、やや丁寧すぎる気がしないでもないが。</p>

<p>個人的な感覚としてはGinkgoはとても開発者フレンドリーだし、比較的活発に開発されているので、注目すべきライブラリだと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[svnのデータ移行手順を確認する]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/09/13/svn-tutorial-for-me/"/>
    <updated>2015-09-13T03:47:12+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/09/13/svn-tutorial-for-me</id>
    <content type="html"><![CDATA[<p>色々あってsvnを触ることになった。今回はその過程で知ったことをメモする。</p>

<!-- more -->


<p>なぜsvnを触ることになったのかというと、現在使っているsvnサーバを移行する必要が出てきたから。
今回は作業手順の検証のために、移行元のsvnと同じバージョンのsvnをソースからコンパイルし、移行先のsvnを最新バージョンでコンパイルした。最新バージョンのsvnのコンパイルをするにあたって、<code>svnsync</code>をhttp経由で行なうために<a href="http://serf.apache.org/">Apache Serf</a>の導入手順も確認した。</p>

<p>ソースコード中に出てくるsvnのコマンドについては、<a href="http://svnbook.red-bean.com/en/1.7/index.html">svnbook</a>を参照すれば良いと思う。コマンド名でなんとなくはわかると思うけど、一応ポインタとしてリンクを記載しておく。</p>

<a name="Subversion1.7.9.................."></a>
<h2>Subversion1.7.9をコンパイル</h2>

<p>特にコレに関してはいうことは無いのだけれど、ポイントとしては、</p>

<ul>
<li><code>--without-berkeley-db</code>としてBerkeley DBを使わないようにしている</li>
<li><code>--without-serf</code>となっていて、http経由でのsvn操作ができなくなっている</li>
<li>SQLiteのバージョンは<em>最新版だとコンパイルできない</em>という点に注意する</li>
</ul>


<p>ということぐらい。あとは以下のソースコードの通り。</p>

<script src="https://gist.github.com/sgykfjsm/9e06eda66014177a883d.js"></script>


<a name="Subversion1.9.1.................."></a>
<h2>Subversion1.9.1をコンパイル</h2>

<p>コレを書いている時点では1.9.1が最新となっている。1.7.9との違いとしては、http経由でリポジトリにアクセスできるように（より厳密には、svnの各種コマンドがhttp形式のURLを解釈できるようにするために）Apache Serfのインストールを行っていること。そして、Apache Serfをインストールするために<a href="http://www.scons.org/">SCons</a>をインストールしている。</p>

<p>Serfとは<a href="http://apr.apache.org/">Apache Portable Runtime</a>(APR)ライブラリ上で動くハイパフォーマンスなC言語ベースのHTTPクライアント。かつては<a href="http://code.google.com/p/serf/">Google Codeでホスティングされていた</a>が、今はApachプロジェクトとして運営されている。</p>

<p>SerfはApache SubversionとApache OpenOfficeのデフォルトクライアントとして利用されている。</p>

<p>Serfがちょっと面倒なのは、ビルドにSConsというものが必要になることだ。SCons自体はpythonで書かれているが、pipなどでインストールするのではなく、ソースコードを<a href="http://www.scons.org/download.php">http://www.scons.org/download.php</a>からダウンロードしてsetup.pyを実行すれば良い。よって、Serfのインストールは以下の様になる。</p>

<p>SConsは<code>make</code>に代わる次世代のビルドツールを目指しているらしい。けど、あんまり耳にすることは無いですね…</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /path/to/scons
</span><span class='line'>sudo python setup.py install
</span><span class='line'>
</span><span class='line'>cd /path/to/serf
</span><span class='line'>sudo scons PREFIX=/home/vagrant/apps/serf
</span><span class='line'>sudo scons install
</span><span class='line'>sudo scons -c</span></code></pre></td></tr></table></div></figure>


<p>あとはv1.7.9とほぼ同様にすれば良いが、違いとしては、</p>

<ul>
<li>yumでopenssl-develをインストールしている</li>
<li><code>--with-serf</code>でserfがインストールされているディレクトリを指定している</li>
<li>subversionディレクトリに配置するSQLiteのディレクトリ名にバージョン名(ディレクトリ末尾の数字)を含めてはいけない</li>
</ul>


<p>ということぐらい。以下のソースコードを移行先となるサーバで実行し、svnクライアントを準備する。</p>

<script src="https://gist.github.com/sgykfjsm/1dc5378d0258ae370fca.js"></script>


<a name="svnsync.................."></a>
<h2>svnsyncを試してみる</h2>

<p>準備ができたら、<code>svnsync</code>を試してみる。移行元となるほうにはすでにダミーのソースコードをおいているので、それが移行先のサーバへコピーされれば成功となる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># これは一度だけ実行すればOK
</span><span class='line'>$ svnsync init file:///opt/svn/repository http://192.168.56.202/svn/
</span><span class='line'># `svnsync init`した後に定期的に以下を実行すればOK
</span><span class='line'>$ svnsync sync file:///opt/svn/repository</span></code></pre></td></tr></table></div></figure>


<p>ちゃんとsyncできていれば以下の様な標準出力が確認できるはず。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Transmitting file data ........................................
</span><span class='line'>Committed revision 1.
</span><span class='line'>Copied properties for revision 1.</span></code></pre></td></tr></table></div></figure>


<p>また、<code>svnlook info /opt/svn/repository</code>でリポジトリの情報を確認できることができるので、移行元と移行先それぞれの出力を見比べて、同期ができているかを確認することができる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins上でgolangのプロジェクトをCIするときに気をつけなければならないこと]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/09/06/ci-with-golng-on-jenkins/"/>
    <updated>2015-09-06T20:03:54+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/09/06/ci-with-golng-on-jenkins</id>
    <content type="html"><![CDATA[<p>JenkinsでgolangプロジェクトをCIするときに少しハマったので、同じミスをしないで済むようにここにメモする。</p>

<!-- more -->


<a name="Jenkins...golang.............................."></a>
<h2>Jenkinsでgolangを使えるようにする。</h2>

<p>何はともあれ、これをしないことには始まらない。特に理由が無ければ、Jenkinsのプラグインを使うのが良い。</p>

<p>&ldquo;Jenkinsの管理&rdquo; > &ldquo;プラグインの管理&rdquo; > &ldquo;利用可能&#8221;タブ へ進み、フィルターで&#8221;golang&#8221;と入力すれば、<a href="https://wiki.jenkins-ci.org/display/JENKINS/Go+Plugin">Go plugin</a>が見つかる。チェックを入れた後、&#8221;ダウンロードして再起動後にインストール&#8221;を押下する。</p>

<p>再起動後、&#8221;Jenkinsの管理&#8221; > &ldquo;システムの設定&#8221;へ進むと、&#8221;Go&#8221;のセクションが追加されていることが確認できるはず。</p>

<ul>
<li>もしシステムの管理で&#8221;ロード中&#8221;から復帰しない場合、&#8221;Jenkinsの管理&#8221; > &ldquo;プラグインの管理&rdquo; > &ldquo;高度な設定&#8221;タブ へ進み、画面右下の&#8221;更新&#8221;ボタンを押すと回復する場合がある。</li>
<li>それでもダメならいくつかプラグインをアップデートしてから、再度&#8221;更新&#8221;ボタンを押すと回復することがある。</li>
<li>FYI: <a href="https://issues.jenkins-ci.org/browse/JENKINS-27499">Global config page is broken when loaded before the tool installer data has been fetched</a></li>
</ul>


<p>その後、使いたいバージョンを設定して&#8221;適用&#8221;ボタンを押下後に&#8221;保存&#8221;ボタンを押下すれば良い。</p>

<a name="Job...golang..........................."></a>
<h2>Jobでgolangを使うようにする。</h2>

<p>Jenkinsのプラグインを入れたあと、ジョブの設定画面の&#8221;ビルド環境&#8221;に&#8221;Set up Go programming language tools&#8221;が表示されていることを確認する。ここで使いたいバージョンを選択すれば、あとはPluginが指定したところからバイナリをダウンロードしてして、<code>${JENKINS_HOME}/tools/org.jenkinsci.plugins.golang.GolangInstallation/</code>以下にバイナリを設置する。</p>

<p>Go Pluginを使うと、環境変数に<code>GOROOT</code>が設定されて、<code>PATH</code>にgolangのバイナリが追加されていることが確認できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Jenkinsのジョブで`env`を実行した出力結果の一部</span>
</span><span class='line'><span class="nv">BUILD_DISPLAY_NAME</span><span class="o">=</span><span class="c">#1</span>
</span><span class='line'><span class="nv">BUILD_ID</span><span class="o">=</span>1
</span><span class='line'>...
</span><span class='line'><span class="nv">EXECUTOR_NUMBER</span><span class="o">=</span>1
</span><span class='line'><span class="nv">GOROOT</span><span class="o">=</span>/var/lib/jenkins/tools/org.jenkinsci.plugins.golang.GolangInstallation/v1.5
</span><span class='line'><span class="nv">HOME</span><span class="o">=</span>/var/lib/jenkins
</span><span class='line'>...
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/var/lib/jenkins/tools/org.jenkinsci.plugins.golang.GolangInstallation/v1.5/bin:/sbin:/usr/sbin:/bin:/usr/bin
</span><span class='line'>...
</span><span class='line'>Finished: SUCCESS
</span></code></pre></td></tr></table></div></figure>


<p>しかし、<code>GOPATH</code>が設定されていない。これに気をつけなければハマることになる。</p>

<a name="L................................................"></a>
<h2>カスタムワークスペースを設定する</h2>

<p>おそらく、通常のgolang開発では、GOPATH以下にソースを置いて開発しているのではないかと思う(少なくとも自分の場合はそうしている)。</p>

<p>例えば、<code>github.com/sgykfjsm/hello-golang</code>というプロジェクトの開発をしている場合、コーディングしている端末でのパスは<code>${GOPATH}/src/github.com/sgykfjsm/hello-golang</code>というパスになっているはず。</p>

<p>よって、Jenkinsのジョブ実行時にもこのパスを再現しなければならない。そうしないと、Git Pluginなどでソースを取得すると、普通に<code>${JENKINS_HOME}/workspace/${JOB_NAME}</code>直下にソースが配置されてしまい、<code>go get</code>や<code>go install</code>などに失敗するからだ。</p>

<p>というわけで、Jenkins上でも同じパス構成を再現するためにはカスタムワークスペースを使って、ワークスペースの設定を修正しなければならない。</p>

<p>カスタムワークスペースの設定箇所は、非常にわかりづらいが、ジョブの設定画面の&#8221;プロジェクトの高度なオプション&#8221;に隠れており、&#8221;高度な設定&hellip;&ldquo;を押下して表示しなければならない。押下後、&#8221;カスタムワークスペースを使用&#8221;にチェックを入れて、&#8221;ディレクトリ&#8221;のテキストボックスを表示させる。このテキストボックスに入力すべき設定値は<code>${JENKINS_HOME}</code>から下のパスにすれば良い。例えば、<code>workspace/${JOB_NAME}/src/github.com/sgykfjsm/hello-golang</code>のようにすれば良い。</p>

<a name="GOPATH..............."></a>
<h2>GOPATHを設定する</h2>

<p>その後、ビルドで&#8221;シェルの実行&#8221;を選択し、<code>export GOPATH=${JENKINS_HOME}/workspace/${JOB_NAME}</code>を実行してから諸々の処理を行うようにしてあげれば良い。また、<code>export PATH=${PATH}:${GOPATH}/bin</code>も追加しておくと良い。</p>

<a name="L........."></a>
<h2>まとめ</h2>

<p>要は<code>GOPATH</code>をちゃんと設定しようねっていうだけ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sonatype Nexusの始め方]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/04/26/start-sonatype-nexus/"/>
    <updated>2015-04-26T22:00:40+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/04/26/start-sonatype-nexus</id>
    <content type="html"><![CDATA[<p>自前でmavenリポジトリを運用する場合に、リポジトリ運用を楽にしてくれるソフトウェアがいくつかある。
今回はおそらく良く使われているであろう<a href="http://www.sonatype.org/nexus/">Sonatype Nexus</a>のOSS版でmavenリポジトリを始める方法をメモする。</p>

<!-- more -->


<a name="L......................................."></a>
<h2>ソフトウェアのダウンロード</h2>

<p><a href="http://www.sonatype.org/nexus/go/">http://www.sonatype.org/nexus/go/</a>からtarかzipをダウンロードする。</p>

<p>wgetなどではダウンロードできないので、事前にダウンロードしておく必要がある。ダウンロードしたら、展開する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tar zxf ./nexus-2.11.2-06-bundle.tar.gz
</span><span class='line'>$ sudo mv ./nexus-2.11.2-06 /usr/local/
</span><span class='line'>$ sudo ln -sv /usr/local/nexus-2.11.2-06 /usr/local/nexus
</span><span class='line'>`/usr/local/nexus' -&gt; `/usr/local/nexus-2.11.2-06'</span></code></pre></td></tr></table></div></figure>


<a name="L......"></a>
<h2>設定</h2>

<p>nexusを始める前に<a href="https://books.sonatype.com/nexus-book/reference/install-sect-service.html">3.7. Configuring Nexus as a Service</a>に書かれている設定を行う。なぜなら、配置した場所でnexusを起動するにはroot権限が必要だが、rootでサービスを起動させるのは推奨されていないから。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo useradd nexus -s /bin/false
</span><span class='line'>$ id nexus
</span><span class='line'>uid=501(nexus) gid=501(nexus) groups=501(nexus)
</span><span class='line'>$ sudo cp /usr/local/nexus/bin/nexus /etc/init.d/nexus
</span><span class='line'>$ sudo chmod 755 /etc/init.d/nexus
</span><span class='line'>$ sudo chown root /etc/init.d/nexus
</span><span class='line'>$ ls -l /etc/init.d/nexus
</span><span class='line'>-rwxr-xr-x 1 root root 14601 2015-04-21 00:56 /etc/init.d/nexus```</span></code></pre></td></tr></table></div></figure>


<p>PIDファイルとlockファイルの配置場所の準備と、nexus関連のディレクトリの所有者をnexusユーザに変える。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mkdir -pv -m 755 nexus
</span><span class='line'>mkdir: created directory `nexus’
</span><span class='line'>$ sudo chown -R nexus:nexus /usr/local/nexus-2.11.2-06
</span><span class='line'>$ sudo mkdir -pv /var/lock/nexus
</span><span class='line'>mkdir: created directory `/var/lock/nexus'
</span><span class='line'>$ sudo chown nexus:nexus /var/lock/nexus</span></code></pre></td></tr></table></div></figure>


<p>設定ファイルを修正する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo cp -p /usr/local/nexus/conf/nexus.properties /usr/local/nexus/conf/nexus.properties.org
</span><span class='line'>$ sudo vim /usr/local/nexus/conf/nexus.properties
</span><span class='line'>$ diff /usr/local/nexus/conf/nexus.properties.org /usr/local/nexus/conf/nexus.properties
</span><span class='line'>18a19
</span><span class='line'>&gt; bundleBasedir="/usr/local/nexus”
</span><span class='line'>25c26
</span><span class='line'>&lt; nexus-work=${bundleBasedir}/../sonatype-work/nexus
</span><span class='line'>---
</span><span class='line'>&gt; nexus-work=${bundleBasedir}/sonatype-work/nexus</span></code></pre></td></tr></table></div></figure>


<p>起動スクリプトを修正する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo vim /etc/init.d/nexus
</span><span class='line'>
</span><span class='line'>$ diff /usr/local/nexus/bin/nexus /etc/init.d/nexus
</span><span class='line'>11a12,15
</span><span class='line'>&gt; JAVA_HOME=/usr/lib/jvm/java-1.8.0
</span><span class='line'>&gt; PATH="${JAVA_HOME}/bin:${PATH}"
</span><span class='line'>&gt; export JAVA_HOME
</span><span class='line'>&gt; export PATH
</span><span class='line'>14c18
</span><span class='line'>&lt; NEXUS_HOME=".."
</span><span class='line'>---
</span><span class='line'>&gt; NEXUS_HOME="/usr/local/nexus"
</span><span class='line'>23c27
</span><span class='line'>&lt; #RUN_AS_USER=
</span><span class='line'>---
</span><span class='line'>&gt; RUN_AS_USER="nexus"
</span><span class='line'>34c38
</span><span class='line'>&lt; #PIDDIR="."
</span><span class='line'>---
</span><span class='line'>&gt; PIDDIR="/var/run/nexus"
</span><span class='line'>212c216
</span><span class='line'>&lt; LOCKDIR="/var/lock/subsys"
</span><span class='line'>---
</span><span class='line'>&gt; LOCKDIR="/var/lock/nexus"
</span><span class='line'>552c556
</span><span class='line'>&lt; exit 0
</span><span class='line'>\ No newline at end of file
</span><span class='line'>---
</span><span class='line'>&gt; exit 0</span></code></pre></td></tr></table></div></figure>


<p>serviceに登録する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /etc/init.d/
</span><span class='line'>$ sudo chkconfig --add nexus
</span><span class='line'>$ sudo chkconfig --levels 345 nexus on
</span><span class='line'>$ sudo chkconfig --list nexus
</span><span class='line'>nexus 0:off 1:off 2:on 3:on 4:on 5:on 6:off</span></code></pre></td></tr></table></div></figure>


<p>起動する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo service nexus start
</span><span class='line'>Starting Nexus OSS...
</span><span class='line'>Started Nexus OSS.
</span></code></pre></td></tr></table></div></figure>


<p>起動が正常にできることを確認できたら、ログインを試す。インストール直後に管理者権限でログインするには<code>admin/admin123</code>でログインすれば良い。ログイン後は以下の点を確認し、必要に応じて変更する。</p>

<ul>
<li>AdministratorのパスワードやE-mail Addressを変更する。</li>
<li>SMTPの設定を変更する。</li>
<li>デフォルトのProxyの設定を変更する。</li>
<li>Maven CentralやApache Snapshot、Codehause Snapshotなどの大手リポジトリが保持するカタログINDEXをローカルにダウンロード出来るようにする。</li>
<li>deployユーザ</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pythonでコーディングするときの小ネタ]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/04/21/coding-by-python-with-little-tips/"/>
    <updated>2015-04-21T22:49:59+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/04/21/coding-by-python-with-little-tips</id>
    <content type="html"><![CDATA[<p><a href="https://julien.danjou.info/books/the-hacker-guide-to-python">The Hacker&rsquo;s Guide to Python</a>という本を読んでいるんだけれども、その中でちょっと感動したテクニックをメモしておく。</p>

<!-- more -->


<p>まずはコレ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_fruits</span><span class="p">(</span><span class="n">basket</span><span class="p">,</span> <span class="n">fruit</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;A variation is to use &#39;if fruit in basket:&#39;&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">basket</span><span class="p">[</span><span class="n">fruit</span><span class="p">]</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">set</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>dictの中から指定した要素の値を取得する。ただし、指定した要素が無ければ空のsetオブジェクトを返す。っていう、よくあるパターン。これは以下の様に書き換えることができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_fruits</span><span class="p">(</span><span class="n">basket</span><span class="p">,</span> <span class="n">fruit</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># dict.get(key[, default])はkeyが辞書にあればkeyに対する値を返し、</span>
</span><span class='line'>    <span class="c"># そうでなければdefaultを返す。</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">basket</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">fruit</span><span class="p">,</span> <span class="nb">set</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>(コメントを除けば)たった1行になった。しかもこれは<a href="http://docs.python.jp/2/library/stdtypes.html#dict.get">dictの組み込み関数</a>なので、ごく自然に使うことができる。</p>

<p>次の例も意外とありがちだと思う。不正な値が検査対象のオブジェクトに含まれていないかを検める例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">has_invalid_fields</span><span class="p">(</span><span class="n">fields</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">fields</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">field</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">]:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは以下の様に書き換えることができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">has_invalid_fields</span><span class="p">(</span><span class="n">fields</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">bool</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">fields</span><span class="p">)</span> <span class="o">-</span> <span class="nb">set</span><span class="p">([</span><span class="s">&#39;foo&#39;</span><span class="p">,</span> <span class="s">&#39;bar&#39;</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>単純にそれぞれの集合の差で判定しているだけ。極めて自然だし、わかりやすい。なんでこうゆう簡潔なコードを思いつけないんだ、おれは…。先ほどの例もそうだけど、データ構造の特性やデータ構造に組み込まれた関数をうまく使うことでコードをより自然に、かつ簡潔にすることができる。</p>

<p>次の例はデータ特性を活かして、パフォーマンスを改善させる例。まずは改善前のコード。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">add_animal_in_family</span><span class="p">(</span><span class="n">species</span><span class="p">,</span> <span class="n">animal</span><span class="p">,</span> <span class="n">family</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">family</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">species</span><span class="p">:</span>
</span><span class='line'>        <span class="n">species</span><span class="p">[</span><span class="n">family</span><span class="p">]</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>    <span class="n">species</span><span class="p">[</span><span class="n">family</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">animal</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">species</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">add_animal_in_family</span><span class="p">(</span><span class="n">species</span><span class="p">,</span> <span class="s">&#39;cat&#39;</span><span class="p">,</span> <span class="s">&#39;felidea&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>speciesという辞書に新たな要素を追加する場合に、追加する種別(ここでは<code>add_animal_in_family</code>の3つ目の引数)がキーにあるかどうかを確認して、なければ空の集合を入れておく。そののちに指定された値を辞書に追加している。コレ自体は極めて真っ当なコードなんだけど、もし、この<code>add_animal_in_family</code>が100回、1000回と実行されるとしたらどうだろうか？おそらく実行回数が増えるにつれて、if文の条件判定が無駄になることが多くなってくるはずだ。</p>

<p>この問題を改善するのが<code>collections.defalutdict</code>というデータ構造。こいつをうまいこと使ってあげると、エレガントに対応できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">collections</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">add_animal_in_family</span><span class="p">(</span><span class="n">species</span><span class="p">,</span> <span class="n">animal</span><span class="p">,</span> <span class="n">family</span><span class="p">):</span>
</span><span class='line'>    <span class="n">species</span><span class="p">[</span><span class="n">family</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">animal</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">species</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defalutdict</span><span class="p">(</span><span class="nb">set</span><span class="p">)</span>
</span><span class='line'><span class="n">add_animal_in_family</span><span class="p">(</span><span class="n">species</span><span class="p">,</span> <span class="s">&#39;cat&#39;</span><span class="p">,</span> <span class="s">&#39;felidea&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>見ての通り、<code>collections</code>パッケージをimportして、データの初期化に<code>collections.defaultdict</code>を使うだけで、<code>add_animal_in_family</code>のif文が不要になってしまった。詳しくは<a href="http://docs.python.jp/2/library/collections.html#collections.defaultdict">ドキュメント</a>を参照するのが一番確実なんだけど、簡単に説明すると、<code>collections.defalutdict</code>に対して存在しない要素へアクセスをしようとすると、<code>defaultdict</code>はKeyErrorを送出する代わりに初期化時に渡されたオブジェクトを使って新たな値を構築して自身である辞書に登録して値を返してくれる。ただし、初期化時に渡す値が<code>None</code>の場合はKeyErrorが送出されるので、注意すること。また、<a href="http://docs.python.jp/2/library/collections.html#id2">ドキュメントに記載されている使用例</a>には初期化時に渡すオブジェクトとしてintを指定しているユニークな例があって、有用。</p>

<p>こんな感じでは、pythonではデータの特性をうまく使うことで小賢しいロジックやアルゴリズムの実装を不要にしてくれて、かつパフォーマンス的にも嬉しい実装をすることができる。もちろん、これはpythonに限った話では無いので、どんな言語であっても扱うデータの特性や組み込み関数についてちゃんと把握しておくことは重要っすな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docker-weekly: April 16th, 2015]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/04/20/docker-weekly/"/>
    <updated>2015-04-20T23:28:28+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/04/20/docker-weekly</id>
    <content type="html"><![CDATA[<p>最近、あんまりDockerの話題についていけていないのでDocker weeklyについて、ざっと内容をまとめるようにしてみる。いつまで続くかはわからないけど…。今回は<a href="http://go.docker.com/webmail/44082/349477677/9bcd04c8938431b7e6ac4d9c2a270e1b">Docker Weekly: April 16th, 2015</a>について。</p>

<!-- more -->


<p>主な話題は以下の通り。誤訳もありえるので気になる部分はリンク先や原文にあたること。</p>

<ul>
<li>Docker Engineのv1.6のリリースと関連オーケストレーションツールのアップデート, Registry 2.0とWindows Client Preview

<ul>
<li><a href="https://blog.docker.com/2015/04/docker-release-1-6/">原文はここ</a></li>
<li>コンテナやイメージにユーザが定義したメタデータを付与できるようになった

<ul>
<li>PRは<a href="https://github.com/docker/docker/pull/9882">https://github.com/docker/docker/pull/9882</a></li>
<li>RancharOSでの使い方は<a href="http://rancher.com/docker-labels/">http://rancher.com/docker-labels/</a>を参照のこと。</li>
</ul>
</li>
<li>Windows ClientのPreview版がリリースされた

<ul>
<li>MacのClient(boot2dockerのこと？)と同様の操作感らしい</li>
<li>PRは<a href="https://github.com/docker/docker/pulls?q=is%3Apr+author%3Aahmetalpbalkan+is%3Aclosed">https://github.com/docker/docker/pulls?q=is%3Apr+author%3Aahmetalpbalkan+is%3Aclosed</a>を参照。</li>
<li>詳細は<a href="http://azure.microsoft.com/blog/2015/04/16/docker-client-for-windows-is-now-available">Microsoftのブログ</a>にある。</li>
</ul>
</li>
<li>Logging Driversの提供

<ul>
<li><code>docker run --log-driver</code>に続けて、<code>jdon-file</code>, <code>syslog</code>, <code>none</code>を選択できる。</li>
<li>docker daemonのログ出力を止めてパフォーマンスの向上を図る<code>none</code>っていうのがアツいらしい。PRは<a href="https://github.com/docker/docker/pull/10568">こちら</a>と<a href="https://github.com/docker/docker/issues/7195">こちら</a>が関連してそう。</li>
<li><code>syslog</code>のパッチは70行ぐらいで、将来的に他の実装を追加することがどれだけ簡単かを示す試金石になっている。PRは<a href="https://github.com/docker/docker/pull/11458">こちら</a>。</li>
<li>ちなみに、さっそく<a href="https://github.com/docker/docker/pull/12540">Logger Driversにfluentdを入れようぜ！っていうProposal</a>がされている。</li>
</ul>
</li>
<li>イメージの特定に<code>@digest</code>をつけることができるようになった

<ul>
<li>今まではpullしたイメージはImage IDが付与されていたが、これはimmutableじゃなかった。つまり、pullする度に変わってしまってて、イメージにパッチをあてたりアップデートを行なうときにはちょっと面倒だった。なぜなら、イメージに付与するtagではイメージの同一性を担保できないから。今回追加された<code>@digest</code>はimmutableであることが保障されるので、指定したDigestに指定したパッチを当てるなどの対応が可能になった。っていう理解であってるのだろうか…</li>
<li>PRは<a href="https://github.com/docker/docker/pull/11109">https://github.com/docker/docker/pull/11109</a>。</li>
<li>ドキュメントは[pull][<a href="http://docs.docker.com/reference/commandline/cli/#pull">http://docs.docker.com/reference/commandline/cli/#pull</a>]に記述がある。</li>
<li>Digestをサポートしているのはv2 registryだけらしくて、DockerHubはサポートしているものの、一般的に使われるようになるにはまだ時間がかかりそう。</li>
<li>ところでこのDigestはどうやって知ることができるのだろうか…</li>
</ul>
</li>
<li><code>--cgroup-parent</code>オプションの提供

<ul>
<li>すでにカスタムnamespaceのサポートを行っていたが、v1.6からは任意のcgroupを親に指定することができるようになった。</li>
<li>イマイチ有用性がわからない…。コンテナに使わせたいリソースを自分で調整したい時とか？</li>
<li>PRは<a href="https://github.com/docker/docker/pull/11428">https://github.com/docker/docker/pull/11428</a>を参照。</li>
</ul>
</li>
<li>ulimitsオプションの提供

<ul>
<li>runするコンテナに対してulimitを指定できるようになった。これは個人的には結構アツい。</li>
<li>というのも、コンテナに対してulimitの上限をあげようとするにはホスト側を上げて、なおかつイメージにも同様の設定をしないとうまいこと調整出来なくて、けっこう苦労した思い出があるので。</li>
<li>PRは<a href="https://github.com/docker/docker/pull/9437">https://github.com/docker/docker/pull/9437</a>。</li>
</ul>
</li>
<li><code>commit --change</code>と<code>import --change</code>の提供

<ul>
<li>commitやimportのときにDockerfileに対してコマンドラインから変更を加えながら行なうことができる。</li>
<li>イマイチうまく説明できないので、<a href="http://docs.docker.com/reference/commandline/cli/#commit">ドキュメント</a>を見たほうが良い。</li>
<li>まだ試していないけど、&ndash;changeした内容はDockerfileに反映されるのかな？</li>
<li>PRは<a href="https://github.com/docker/docker/pull/9123">こちら</a>。</li>
</ul>
</li>
</ul>
</li>
<li>Series D Roundで$95M調達

<ul>
<li>Series Dっていうのが謎だったけど、4回目の投資をうけたってことなんかな？</li>
<li>Docker的にはお金をGETできたんで、これからどんどんecosystemの充実とPlatformの推進をがんばりまっせーってことらしい。</li>
</ul>
</li>
<li>DockerConがもうすぐ(News letter配信時点で67日後)

<ul>
<li>サンフランシスコで2015-06-22から2015-06-23にかけて行われるとのこと。</li>
</ul>
</li>
<li>4/23でDockerが2周年

<ul>
<li>おめでとうございます。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS BeanstalkでDockerをカスタムAMIで使う。]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/03/14/custom-docker-ami-on-beanstalk/"/>
    <updated>2015-03-14T23:11:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/03/14/custom-docker-ami-on-beanstalk</id>
    <content type="html"><![CDATA[<p>既知の通り、BeanstalkでDockerを使うことができるが、通常の使い方だとインスタンスが配備される度にDocker ImageをPull、BuildしてからRunする。初期配備時は問題ないが、スケールアウトの観点で見た場合、非常にもたつくことがある。また、Docker Imageが大きい(800MB以上ぐらい？)と、devicemapper errorでBuildに失敗することが多い（ような気がする）。単にBuildに失敗しただけであれば切り離せば良いが、複数台のうちいくつかがBuildに失敗しただけでは検知が難しく、そのまま生き残ってしまうとムダなコストが発生する。</p>

<p>上記のような認識でいたため、これまではBeanstalkでDockerを運用することにはあまり乗り気ではなかった。しかし、同僚からの意見で予めデプロイしておいたカスタムAMIを使うのはどうか、という意見があり、検証することにした。</p>

<p>なお、結論から言うと、ここで記した方法では実運用に耐えないと思う。アレコレがんばらないで、素直に<a href="http://aws.amazon.com/jp/ecs/">Amazon EC2 Container Service</a>がGAになるのを待ったほうが良い。</p>

<!-- more -->


<a name="L1..............AMI........."></a>
<h2>1. カスタムAMIの作成</h2>

<p>まず、カスタムAMIを作成する。作成の方法はAWSのドキュメントに記載されている。</p>

<ul>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.customenv.html">Using Custom AMIs</a></li>
</ul>


<p>上記手順は非常に単純だが、注意点は以下の通り。</p>

<ul>
<li>Beanstalk Dockerで利用可能なAMIでインスタンスを起動する。</li>
<li>インスタンスを起動するリージョンはBeanstalkと同じリージョンでなければならない。</li>
<li>Beanstalkで使われているカスタムAMI IDを事前に調べておくこと。</li>
<li>インスタンス起動時にUser dataに以下を埋め込むこと。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#cloud-config
</span><span class='line'>repo_releasever: &lt;repository version number&gt;
</span><span class='line'>repo_upgrade: none</span></code></pre></td></tr></table></div></figure>


<p>User dataに埋め込むコードについての詳細は割愛するが、<code>repository version number</code>は<a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html">Supported Platforms</a>に記載されている各Solution StackのAMI列を記載すること。この設定により、lock-on-launch 機能が設定され、セキュリティ更新の自動インストールの無効化がなされる。上記設定はBeanstalkでカスタムAMIを使うために必須である。また、VPC環境下でインスタンスを起動する場合はAuto-assign Public IPをenabledにすることを忘れないこと。</p>

<p>上記を踏まえてCloudFormation用テンプレートを作成した。</p>

<ul>
<li><a href="https://gist.github.com/sgykfjsm/c250891a3f2ec5b65eee">sgykfjsm/custom-ami-mold.template</a></li>
</ul>


<p>こいつを流し込んでやれば、まずはベースとなるAMIを持つインスタンスができる。</p>

<a name="L2..AMI..............."></a>
<h2>2. AMIの初期設定</h2>

<p>実際の運用次第だと思うが、最低限必要であろう設定をここで行っておく。個別アプリケーションの設定を一部含んでいるが、不要な場合は設定しなくて良い。</p>

<ul>
<li><a href="https://gist.github.com/sgykfjsm/8d6d3cf5a822dbb33e45#file-initial_setup_for_custom_ami-sh">sgykfjsm/initial_setup_for_custom_ami.sh</a></li>
</ul>


<p>あとはtd-agentのインストールや設定も行っておきたいが、設定のことを考えると長くなりそうなので、今回は割愛する。
ちょっと長いけど、この辺りをやっておくと後々の運用が楽になるんじゃないかと思う。</p>

<p>上記設定後、一旦インスタンスを再起動する。再起動後は以下の様にして、これまでの設定が反映されていることを確認する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ulimit -n
</span><span class='line'>65536
</span><span class='line'># pgrepの対象はmonitでなくても良い。
</span><span class='line'>$ cat /proc/$(pgrep monit)/limits | grep "Max open files"
</span><span class='line'>Max open files            65536                65536                files
</span><span class='line'>$ sudo monit status</span></code></pre></td></tr></table></div></figure>


<a name="L3..Docker................................................"></a>
<h2>3. Dockerイメージのビルドとコンテナの起動</h2>

<p>次に、Dockerコンテナのデプロイを行なう。これは単純にDeckerfileを用意すれば良いが、どのようなファイルを用意すべきかはデプロイ内容による。<br>
今回はすでに必要な設定は済んでおり、アプリケーションを取り込み済みのDockerイメージを用いるので、以下の様な内容になる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM sgykfjsm/play-scala-intro:latest</span></code></pre></td></tr></table></div></figure>


<p>これを元にコンテナの起動を行う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo docker run -i -t -d -p 12812:2812 -p 80:9000 --name play-scala-intro -v /etc/localtime:/etc/localtime:ro sgykfjsm/play-scala-intro
</span><span class='line'>Unable to find image 'sgykfjsm/play-scala-intro' locally
</span><span class='line'>Pulling repository sgykfjsm/play-scala-intro</span></code></pre></td></tr></table></div></figure>


<p>実際の運用では起動後に受け入れテストのようなもので簡単な動作確認を行なうべきだろう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl --silent localhost:80 -o - | grep "&lt;title&gt;Welcome to Play&lt;/title&gt;"
</span><span class='line'>        &lt;title&gt;Welcome to Play&lt;/title&gt;</span></code></pre></td></tr></table></div></figure>


<a name="L4.............................................................."></a>
<h2>4. 起動スクリプトの用意と再起動処理の上書き</h2>

<p>インスタンス起動時にカスタムAMIでビルドしたDockerコンテナが起動するようにupstartスクリプトを用意する。これは後述するダミー用のデプロイアプリケーションで配布するため、<code>.ebextensions</code>の書式に従って以下の様なものを用意する。</p>

<p>インスタンス初期配備時のための設定。</p>

<figure class='code'><figcaption><span>03-run-dummy-app.config / Docker用のカスタムAMIを使うためにダミーのアプリケーションに仕込んでおく.ebextensions</span><a target='_blank' href='https://gist.github.com/c6b9a73f0cfb7b3c6df0'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>---
</span><span class='line'>commands:
</span><span class='line'>
</span><span class='line'>    01-run-dummy-app:
</span><span class='line'>        command: |
</span><span class='line'>            /usr/bin/docker ps -a | grep -q &#39;play-scala-intro&#39; || \
</span><span class='line'>            /usr/bin/docker run -d \
</span><span class='line'>                -p 22812:2812 \
</span><span class='line'>                --name play-scala-intro \
</span><span class='line'>                -v /etc/localtime:/etc/localtime:ro \
</span><span class='line'>                sgykfjsm/play-scala-intro
</span><span class='line'>        cwd: /home/ec2-user
</span><span class='line'>        ignoreErrors: false
</span></code></pre></td></tr></table></div></figure>


<p>initctlに登録するための起動スクリプトの設定。</p>

<figure class='code'><figcaption><span>01-make-upstart.config / Docker用のカスタムAMIを使うためにダミーのアプリケーションに仕込んでおく.ebextensions</span><a target='_blank' href='https://gist.github.com/c6b9a73f0cfb7b3c6df0'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>---
</span><span class='line'>files:
</span><span class='line'>
</span><span class='line'>    &quot;/etc/init/sample-docker-app.conf&quot; :
</span><span class='line'>        mode: 755
</span><span class='line'>        owner: root
</span><span class='line'>        group: root
</span><span class='line'>        content: |
</span><span class='line'>            description &quot;Elastic Beanstalk Docker Container sample-docker-app&quot;
</span><span class='line'>
</span><span class='line'>            start on started docker
</span><span class='line'>            stop on stopping docker
</span><span class='line'>
</span><span class='line'>            respawn
</span><span class='line'>
</span><span class='line'>            script
</span><span class='line'>                # &quot;play-scala-intro&quot; is *exmaple*. This must be replaced with real container name.
</span><span class='line'>                CONTAINER_NAME=&quot;play-scala-intro&quot;
</span><span class='line'>
</span><span class='line'>                # Wait for docker to finish starting up first.
</span><span class='line'>                FILE=/var/run/docker.sock
</span><span class='line'>                while [ ! -e ${FILE} ]; do
</span><span class='line'>                    sleep 2
</span><span class='line'>                done
</span><span class='line'>
</span><span class='line'>                DOCKER_APP_FILE=/etc/elasticbeanstalk/.aws_beanstalk.current-container-id
</span><span class='line'>                CONTAINER_ID=$(docker ps --no-trunc -a| grep ${CONTAINER_NAME} | cut -d&quot; &quot; -f1)
</span><span class='line'>                if ! docker ps | grep -q ${CONTAINER_ID} ; then
</span><span class='line'>                    docker start ${CONTAINER_ID} &gt; ${DOCKER_APP_FILE}
</span><span class='line'>                fi
</span><span class='line'>
</span><span class='line'>                NGINX_UPSTREAM_IP=$(docker inspect ${CONTAINER_ID} | jq &quot;.[0].NetworkSettings.IPAddress&quot; --raw-output)
</span><span class='line'>                # &quot;9000&quot; is *example*. This must be replaced with real application settings.
</span><span class='line'>                NGINX_UPSTREAM_PORT=9000
</span><span class='line'>
</span><span class='line'>                DOCKER_PORT_FILE=/etc/elasticbeanstalk/.aws_beanstalk.container-port
</span><span class='line'>                if ! cat /etc/nginx/conf.d/elasticbeanstalk-nginx-docker-upstream.conf | grep -q $NGINX_UPSTREAM_IP; then
</span><span class='line'>                    sed -i.$(date &#39;+%Y%m%d%H%M%S.%Z&#39;)  \
</span><span class='line'>                        &quot;s/server.*;/server ${NGINX_UPSTREAM_IP}:${NGINX_UPSTREAM_PORT};/&quot; \
</span><span class='line'>                        /etc/nginx/conf.d/elasticbeanstalk-nginx-docker-upstream.conf
</span><span class='line'>                    service nginx restart
</span><span class='line'>                fi
</span><span class='line'>                echo ${NGINX_UPSTREAM_PORT} &gt; ${DOCKER_PORT_FILE}
</span><span class='line'>
</span><span class='line'>                mkdir -p /var/log/eb-docker/containers/eb-current-app
</span><span class='line'>                docker logs -f ${CONTAINER_ID} &gt; /var/log/eb-docker/containers/eb-current-app/${CONTAINER_ID:0:12}-stdouterr.log 2&gt;&amp;1
</span><span class='line'>
</span><span class='line'>                exec docker wait ${CONTAINER_ID}
</span><span class='line'>            end script
</span><span class='line'>
</span><span class='line'>            post-stop script
</span><span class='line'>                CONTAINER_ID=$(docker ps --no-trunc | grep &#39;play-scala-intro&#39; | cut -f1 -d&#39; &#39;)
</span><span class='line'>
</span><span class='line'>                if [ -n &quot;${CONTAINER_ID}&quot; ] ; then
</span><span class='line'>                    docker stop ${CONTAINER_ID}
</span><span class='line'>                fi
</span><span class='line'>            end script
</span></code></pre></td></tr></table></div></figure>


<p>Beanstalkではインスタンスの起動やアプリケーションのデプロイなどをフックにして様々なスクリプトが起動する。それらのうち、今回はAWSの管理コンソールからアプリケーションの再起動ができるように、再起動処理のスクリプトを上書きをする。これも<code>.ebextensions</code>に仕込んでおく。</p>

<p>その他の.ebextensionsについては<a href="https://gist.github.com/sgykfjsm/c6b9a73f0cfb7b3c6df0">gist</a>を参照すること。</p>

<a name="L5..Beanstalk..........................................................................."></a>
<h2>5. Beanstalkインスタンス用のダミーアプリケーションを用意する。</h2>

<p>Beanstalkのインスタンス配備時にはデプロイアプリケーションが必要だ。上記で設定した.ebextensionsたちも同梱してデプロイしたいので、適当なアプリケーションを用意する。</p>

<ul>
<li><a href="https://gist.github.com/sgykfjsm/914bbe7292f51b530bc8">dummy-apps</a></li>
</ul>


<figure class='code'><figcaption><span>Dockerfile / BeanstalkのDockerプラットフォーム向けのダミーアプリケーション</span><a target='_blank' href='https://gist.github.com/914bbe7292f51b530bc8'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='dockerfile'><span class='line'><span class="k">FROM</span> dockerfile/python
</span><span class='line'>
</span><span class='line'><span class="k">ADD</span> application.py /usr/local/share/application.py
</span><span class='line'>
</span><span class='line'><span class="k">EXPOSE</span> <span class="m">8000</span>
</span><span class='line'>
</span><span class='line'><span class="k">ENTRYPOINT</span> <span class="o">[</span><span class="s2">&quot;python&quot;</span>, <span class="s2">&quot;/usr/local/share/application.py&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Dockerrun.aws.json / BeanstalkのDockerプラットフォーム向けのダミーアプリケーション</span><a target='_blank' href='https://gist.github.com/914bbe7292f51b530bc8'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;AWSEBDockerrunVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Logging&quot;</span><span class="p">:</span> <span class="s2">&quot;/var/log/dummy-application&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Image&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Update&quot;</span><span class="p">:</span> <span class="s2">&quot;false&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>application.py / BeanstalkのDockerプラットフォーム向けのダミーアプリケーション</span><a target='_blank' href='https://gist.github.com/914bbe7292f51b530bc8'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># vim:fenc=utf-8</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">wsgiref.simple_server</span> <span class="kn">import</span> <span class="n">make_server</span><span class="p">,</span> <span class="n">WSGIServer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">SocketServer</span> <span class="kn">import</span> <span class="n">ThreadingMixIn</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">environ</span><span class="p">,</span> <span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">start_response</span><span class="p">(</span><span class="s">&#39;200 OK&#39;</span><span class="p">,</span> <span class="p">[(</span><span class="s">&#39;Content-type&#39;</span><span class="p">,</span> <span class="s">&#39;text/html&#39;</span><span class="p">)])</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="s">&#39;ok&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ThreadingWSGIServer</span><span class="p">(</span><span class="n">ThreadingMixIn</span><span class="p">,</span> <span class="n">WSGIServer</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">httpd</span> <span class="o">=</span> <span class="n">make_server</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">8000</span><span class="p">,</span> <span class="n">application</span><span class="p">,</span> <span class="n">ThreadingWSGIServer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">httpd</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<a name="L6..............AMI............Beanstalk........................"></a>
<h2>6. カスタムAMIを使ったBeanstalk環境を構築する。</h2>

<p>管理コンソールからBeanstalk環境を構築すると、カスタムAMIを指定することができないため、環境を構築した後にConfigurationからカスタムAMIを変更する必要がある。これだと１時間分のムダな課金が発生するし、自動化が面倒である。なので、ここでもCloudFormationを使ってBeanstalk環境を構築する。</p>

<ul>
<li><a href="https://gist.github.com/sgykfjsm/33bb85bc03110e973dea">sample-docker-with-custom-ami.template</a></li>
</ul>


<figure class='code'><figcaption><span>sample-docker-with-custom-ami.template / BeanstalkでカスタムAMIを使ったDocker環境を構築するCloudFormationテンプレート</span><a target='_blank' href='https://gist.github.com/33bb85bc03110e973dea'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>{
</span><span class='line'>    &quot;AWSTemplateFormatVersion&quot;: &quot;2010-09-09&quot;,
</span><span class='line'>    &quot;Description&quot;: &quot;ApparelCloud MediaAPI Template on elastic beanstalk for Non-VPC&quot;,
</span><span class='line'>    &quot;Parameters&quot;: {
</span><span class='line'>        &quot;ApplicationName&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Beanstalk Application Name&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;BeanstalkInstanceType&quot;: {
</span><span class='line'>            &quot;AllowedValues&quot;: [
</span><span class='line'>                &quot;t2.micro&quot;,
</span><span class='line'>                &quot;t2.small&quot;,
</span><span class='line'>                &quot;t2.medium&quot;,
</span><span class='line'>                &quot;m3.medium&quot;,
</span><span class='line'>                &quot;m3.large&quot;,
</span><span class='line'>                &quot;m3.xlarge&quot;,
</span><span class='line'>                &quot;m3.2xlarge&quot;,
</span><span class='line'>                &quot;c3.large&quot;,
</span><span class='line'>                &quot;c3.xlarge&quot;,
</span><span class='line'>                &quot;c3.2xlarge&quot;,
</span><span class='line'>                &quot;c3.4xlarge&quot;,
</span><span class='line'>                &quot;c3.8xlarge&quot;,
</span><span class='line'>                &quot;r3.large&quot;,
</span><span class='line'>                &quot;r3.xlarge&quot;,
</span><span class='line'>                &quot;r3.2xlarge&quot;,
</span><span class='line'>                &quot;r3.4xlarge&quot;,
</span><span class='line'>                &quot;r3.8xlarge&quot;
</span><span class='line'>            ],
</span><span class='line'>            &quot;ConstraintDescription&quot;: &quot;must be a valid EC2 instance type.&quot;,
</span><span class='line'>            &quot;Description&quot;: &quot;Bastion Host EC2 instance type&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;BeanstalkSecurityGroup&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Security Group Id for BeanstalkInstace&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;CustomAmiId&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;You can override the default Amazon Machine Image (AMI) by specifying your own custom AMI ID.&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;CNAMEPrefix&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Endpoint prefix for environment&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;EnvironmentName&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Environment Name on This Application&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;HostName&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;The URL name for bastion instance&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;HostedZone&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;The DNS name of an existing Amazon Route 53 hosted zone&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;KeyName&quot;: {
</span><span class='line'>            &quot;AllowedPattern&quot;: &quot;[\\x20-\\x7E]*&quot;,
</span><span class='line'>            &quot;ConstraintDescription&quot;: &quot;can contain only ASCII characters.&quot;,
</span><span class='line'>            &quot;Description&quot;: &quot;Name of an existing EC2 KeyPair to enable SSH access to the Elastic Beanstalk hosts&quot;,
</span><span class='line'>            &quot;MaxLength&quot;: &quot;255&quot;,
</span><span class='line'>            &quot;MinLength&quot;: &quot;1&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;PrivateSubnet&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;logical private subnet id existing vpc&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;SSHSecurityGroup&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Bastion Security Group Id&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;SolutionStackName&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;Application Platform(http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html)&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;VPC&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;logical VPC id&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;VPCDefaultSecurityGroup&quot;: {
</span><span class='line'>            &quot;Description&quot;: &quot;VPC Default Security Group Id&quot;,
</span><span class='line'>            &quot;Type&quot;: &quot;String&quot;
</span><span class='line'>        }
</span><span class='line'>    },
</span><span class='line'>    &quot;Resources&quot;: {
</span><span class='line'>        &quot;SampleDocker2Environment&quot;: {
</span><span class='line'>            &quot;Properties&quot;: {
</span><span class='line'>                &quot;ApplicationName&quot;: {
</span><span class='line'>                    &quot;Ref&quot;: &quot;ApplicationName&quot;
</span><span class='line'>                },
</span><span class='line'>                &quot;CNAMEPrefix&quot;: {
</span><span class='line'>                    &quot;Ref&quot;: &quot;CNAMEPrefix&quot;
</span><span class='line'>                },
</span><span class='line'>                &quot;Description&quot;: &quot;&quot;,
</span><span class='line'>                &quot;EnvironmentName&quot;: {
</span><span class='line'>                    &quot;Ref&quot;: &quot;EnvironmentName&quot;
</span><span class='line'>                },
</span><span class='line'>                &quot;OptionSettings&quot;: [
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:ec2:vpc&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;AssociatePublicIpAddress&quot;,
</span><span class='line'>                        &quot;Value&quot;: &quot;true&quot;
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;ImageId&quot;,
</span><span class='line'>                        &quot;Value&quot;: {&quot;Ref&quot;: &quot;CustomAmiId&quot;}
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:elasticbeanstalk:environment&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;EnvironmentType&quot;,
</span><span class='line'>                        &quot;Value&quot;: &quot;SingleInstance&quot;
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;SSHSourceRestriction&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Fn::Join&quot;: [
</span><span class='line'>                                &quot;&quot;,
</span><span class='line'>                                [
</span><span class='line'>                                    &quot;tcp,22,22,&quot;,
</span><span class='line'>                                    {
</span><span class='line'>                                        &quot;Ref&quot;: &quot;SSHSecurityGroup&quot;
</span><span class='line'>                                    }
</span><span class='line'>                                ]
</span><span class='line'>                            ]
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;IamInstanceProfile&quot;,
</span><span class='line'>                        &quot;Value&quot;: &quot;aws-elasticbeanstalk-ec2-role&quot;
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;SecurityGroups&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;BeanstalkSecurityGroup&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;SecurityGroups&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;VPCDefaultSecurityGroup&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;EC2KeyName&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;KeyName&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:autoscaling:launchconfiguration&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;InstanceType&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;BeanstalkInstanceType&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:ec2:vpc&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;VPCId&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;VPC&quot;
</span><span class='line'>                        }
</span><span class='line'>                    },
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Namespace&quot;: &quot;aws:ec2:vpc&quot;,
</span><span class='line'>                        &quot;OptionName&quot;: &quot;Subnets&quot;,
</span><span class='line'>                        &quot;Value&quot;: {
</span><span class='line'>                            &quot;Ref&quot;: &quot;PrivateSubnet&quot;
</span><span class='line'>                        }
</span><span class='line'>                    }
</span><span class='line'>                ],
</span><span class='line'>                &quot;SolutionStackName&quot;: {
</span><span class='line'>                    &quot;Ref&quot;: &quot;SolutionStackName&quot;
</span><span class='line'>                },
</span><span class='line'>                &quot;Tier&quot;: {
</span><span class='line'>                    &quot;Name&quot;: &quot;WebServer&quot;,
</span><span class='line'>                    &quot;Type&quot;: &quot;Standard&quot;,
</span><span class='line'>                    &quot;Version&quot;: &quot;1.0&quot;
</span><span class='line'>                }
</span><span class='line'>            },
</span><span class='line'>            &quot;Type&quot;: &quot;AWS::ElasticBeanstalk::Environment&quot;
</span><span class='line'>        },
</span><span class='line'>        &quot;SampleDocker2InstanceDNSRecord&quot;: {
</span><span class='line'>            &quot;Properties&quot;: {
</span><span class='line'>                &quot;Comment&quot;: &quot;A record for ac-media instance.&quot;,
</span><span class='line'>                &quot;HostedZoneName&quot;: {
</span><span class='line'>                    &quot;Fn::Join&quot;: [
</span><span class='line'>                        &quot;&quot;,
</span><span class='line'>                        [
</span><span class='line'>                            {
</span><span class='line'>                                &quot;Ref&quot;: &quot;HostedZone&quot;
</span><span class='line'>                            },
</span><span class='line'>                            &quot;.&quot;
</span><span class='line'>                        ]
</span><span class='line'>                    ]
</span><span class='line'>                },
</span><span class='line'>                &quot;Name&quot;: {
</span><span class='line'>                    &quot;Fn::Join&quot;: [
</span><span class='line'>                        &quot;&quot;,
</span><span class='line'>                        [
</span><span class='line'>                            {
</span><span class='line'>                                &quot;Ref&quot;: &quot;HostName&quot;
</span><span class='line'>                            },
</span><span class='line'>                            &quot;.&quot;,
</span><span class='line'>                            {
</span><span class='line'>                                &quot;Ref&quot;: &quot;HostedZone&quot;
</span><span class='line'>                            },
</span><span class='line'>                            &quot;.&quot;
</span><span class='line'>                        ]
</span><span class='line'>                    ]
</span><span class='line'>                },
</span><span class='line'>                &quot;ResourceRecords&quot;: [
</span><span class='line'>                    {
</span><span class='line'>                        &quot;Fn::Join&quot;: [
</span><span class='line'>                            &quot;&quot;,
</span><span class='line'>                            [
</span><span class='line'>                                {
</span><span class='line'>                                    &quot;Ref&quot;: &quot;CNAMEPrefix&quot;
</span><span class='line'>                                },
</span><span class='line'>                                &quot;.&quot;,
</span><span class='line'>                                &quot;elasticbeanstalk.com&quot;,
</span><span class='line'>                                &quot;.&quot;
</span><span class='line'>                            ]
</span><span class='line'>                        ]
</span><span class='line'>                    }
</span><span class='line'>                ],
</span><span class='line'>                &quot;TTL&quot;: &quot;300&quot;,
</span><span class='line'>                &quot;Type&quot;: &quot;CNAME&quot;
</span><span class='line'>            },
</span><span class='line'>            &quot;Type&quot;: &quot;AWS::Route53::RecordSet&quot;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<a name="L........."></a>
<h2>まとめ</h2>

<p>ここまで長々と書いたが、見ての通り、それなりに独自スクリプトを用意したり既存のhooksスクリプトを上書きするなどの対応が必要である。また、上記ではConfig Deployへの対応をしていないし、スケールアウトの安定性の検証は未確認である(ちょっと試した感じだと早いが、実業務で使うような巨大イメージではまだ試していない)。管理コンソールのEventsに表示されるコンテナIDはeb-dockerのままなので、書き換えたスクリプトやnginxの設定ファイルの監視も追加したほうが良いだろう。</p>

<p>結局のところ、既存の設定書き換えやコンテナの停止は割とリスキーである。なぜならAMI（Platform）のバージョン間で同じ設定ないしは同じスクリプトが使われているとは限らないし、以前のバージョンには無かったスクリプトの追加、あるいはスクリプトの仕様変更があるかもしれないからだ。そのため、AMIのバージョンを変える時は<code>/opt/elasticbeanstalk</code>配下のスクリプトを充分に把握しておく必要がある。</p>

<p>敢えてポジティブなことを言えば、カスタムAMIを作りこむことでDocker Wayに則ったシングルインスタンス・マルチサービスが可能になるし、かつ運用に堪えるような設定を施すことができれば、Beanstalkの便利機能（柔軟なスケールアウトやRolling Update、メトリクス管理）を使えるので、かなり嬉しいと思う。とは言え、やはりリスキーには変わりないので、今のところだと、このようなやり方では実運用に耐えないと思う。</p>

<hr />

<p>色々試行錯誤した割に、こう言う結果になって残念…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AnsibleでMySQLをインストールする。]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/02/17/install-mysql-with-ansible/"/>
    <updated>2015-02-17T09:19:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/02/17/install-mysql-with-ansible</id>
    <content type="html"><![CDATA[<p>AWSなんかを使ってると、イチからMySQLなどの基本的なミドルウェアをセットアップすることは減ってくる。そんな中、AnsibleでMySQLをインストールする事になったのだけど、意外と忘れてたりAnsibleで作業するのと手作業で進めることの差異でちょっと詰まったりしたので、ここに備忘しておく。</p>

<!-- more -->


<a name="L.................."></a>
<h2>大まかな手順</h2>

<ol>
<li>最新安定版(MySQL5.6)をインストールするためのリポジトリを設定する。</li>
<li>リポジトリ軽油でインストールする。</li>
<li>初期セットアップを行なう。

<ul>
<li>rootのパスワード初期化</li>
<li>mysql_secure_installationによるMySQLの初期化</li>
<li>諸々の設定</li>
</ul>
</li>
</ol>


<p>たったこれだけなんだけど、Ansibleでこれらの作業を実装するのはちょっと面倒。というのも、mysql_secure_installationはコマンドを実行すると対話的に処理を進めることになるが、これをAnsibleで実行するのがちょっと面倒だったりする。また、rootのパスワード初期化についても考慮が必要で、playbookに直書きするのはもちろん駄目だし、mysql_config_editorはこれまた対話式のコマンドなので、自動化が微妙に難しい。諸々の設定に関して、設定すべき内容は案件などによると思うが、予めいくつかのmy.cnfなどを用意しておいて、それをコピーして使うようすればいいだけなので、あまり問題にはならない。</p>

<p>ということで、rootのパスワード初期化および管理とmysql_secure_installationについて考える。</p>

<a name="root...................................."></a>
<h2>rootのパスワード初期化と管理</h2>

<p>いくつかのブログなどにあるHowTo記事でrootの初期パスワードは.mysql_secretというファイルにある、と書かれていることがある。が、今回MySQL5.6をインストールしてみてもそのようなファイルは無かった。今までも見たことがないので、もしかしたらインストールの方法によってはこのファイルが生成されるのかもしれないが、とにかく無い。なので、パスワードの初期化は基本に忠実に以下のようにMySQLを起動させてからパスワードをSQLで更新した。</p>

<pre><code>/bin/sh /usr/bin/mysqld_safe \
    --datadir=/var/lib/mysql \
    --socket=/var/lib/mysql/mysql.sock \
    --pid-file=/var/run/mysqld/mysqld.pid \
    --basedir=/usr \
    --user=mysql \
    --skip-grant-tables \
    --skip-networking
</code></pre>

<p>この起動コマンドについての詳細は<a href="http://dev.mysql.com/doc/refman/5.1/en/resetting-permissions.html#resetting-permissions-generic">Resetting the Root Password: Generic Instructions</a>を参照。この方法がシンプルで覚えることが少なくて良いと思う。</p>

<p>これでMySQLサーバを起動した後、以下のSQLでパスワードを更新する。パスワードはAnsibleの中で<code>cat /dev/urandom | LC_CTYPE=C tr -dc &lsquo;[:alnum:]&rsquo; | head -c 16 ; echo</code>とかやって適当な文字列を生成してあげれば良いと思う。パスワードをplaybookに直書きするよりかはマシだろう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">UPDATE</span> <span class="n">mysql</span><span class="p">.</span><span class="k">user</span> <span class="k">SET</span> <span class="n">Password</span><span class="o">=</span><span class="n">PASSWORD</span><span class="p">(</span><span class="s1">&#39;NewPassWord&#39;</span><span class="p">)</span> <span class="k">WHERE</span> <span class="k">User</span><span class="o">=</span><span class="s1">&#39;root&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">FLUSH</span> <span class="k">PRIVILEGES</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまでは特段問題が無くて、問題はこのパスワードをどこに保管するか、ということ。結論から言えば、/etc/my.cnf.d配下に管理することに落ち着いた。以下の様なファイルを作っておいて、それを/etc/my.cnf.d配下に配置しておけば良いと思う。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[db-administrator]</span>
</span><span class='line'><span class="na">user</span> <span class="o">=</span> <span class="s">root</span>
</span><span class='line'><span class="na">password</span> <span class="o">=</span> <span class="s">{ { mysql_root_password.stdout }}</span>
</span><span class='line'><span class="na">host</span> <span class="o">=</span> <span class="s">localhost</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>{{ mysql_root_password.stdout }}</code>の部分はAnsible内で設定されるプレースホルダー。また、通常は<code>[client]</code>となっている部分は別の文言に変えている。そうでないと、デフォルトの接続情報として使われるので、注意すること。また、/etc/my.cnf.d配下のファイルが読み込まれるように、/etc/my.cnfには<code>!includedir /etc/my.cnf.d</code>を追加しておくこと。</p>

<a name="Ansible...mysql_secure_installation..........................."></a>
<h2>Ansibleでmysql_secure_installationを如何に行なうか。</h2>

<p>ざっと思いついたのは以下の通り。</p>

<ol>
<li>普通にmysql_secure_installationを実行して、対話的に処理を行う。

<ul>
<li>そもそもAnsibleで行なう必要が無いのと、rootのパスワードなどをどこかにメモすることになるので却下</li>
</ul>
</li>
<li>expectを使って、予め回答を入力しておいて、処理を自動化させる。

<ul>
<li>expectについては、<a href="http://www.math.kobe-u.ac.jp/~kodama/tips-expect.html%E3%81%BE%E3%81%9F%E3%81%AFhttp://linuxjm.sourceforge.jp/html/expect/man1/expect.1.html%E3%81%AA%E3%81%A9%E3%82%92%E5%8F%82%E7%85%A7%E3%80%82">http://www.math.kobe-u.ac.jp/~kodama/tips-expect.html%E3%81%BE%E3%81%9F%E3%81%AFhttp://linuxjm.sourceforge.jp/html/expect/man1/expect.1.html%E3%81%AA%E3%81%A9%E3%82%92%E5%8F%82%E7%85%A7%E3%80%82</a></li>
<li>expectを別途インストールする必要がある。</li>
<li>expcet/Tclの文法などを新たに覚えなければならない、かつあまり使うことがなさそうなので、あんまり覚える気がしない。</li>
<li>試してみたけど微妙だった（予めすべてのパターンの質問を拾って、回答を用意しなければならない）</li>
<li>ということで却下</li>
</ul>
</li>
<li>mysql_secure_installationと同等の処理を実装し、それを実行する。

<ul>
<li>mysql_secure_installationがやっている処理自体はいくつかのSQLを実行しているだけで、実装自体は容易。</li>
<li>ただし、今後のバージョンアップなどでmysql_secure_installationの内容を常に気にしておく必要がある。</li>
<li>1と2の案に比べて、必要な時間が圧倒的に少なく済むので、今回はこの案にした。</li>
</ul>
</li>
</ol>


<p>で、その内容は以下の通り。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># http://dev.mysql.com/doc/refman/5.0/en/resetting-permissions.html#resetting-permissions-unix</span>
</span><span class='line'>
</span><span class='line'><span class="nb">set</span> -xeu
</span><span class='line'>
</span><span class='line'><span class="o">[</span> <span class="k">$(</span>/usr/bin/whoami<span class="k">)</span> <span class="o">=</span> <span class="s1">&#39;root&#39;</span> <span class="o">]</span> <span class="o">||</span> <span class="o">{</span>
</span><span class='line'>    /bin/echo root only
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">init_file</span><span class="o">=</span>/tmp/mysql-init
</span><span class='line'>
</span><span class='line'>/bin/cat <span class="s">&lt;&lt;EOF &gt; ${init_file}</span>
</span><span class='line'><span class="s">-- Set the root password</span>
</span><span class='line'><span class="s">UPDATE mysql.user SET Password=PASSWORD(&#39;${mysql_root_password}&#39;) WHERE User=&#39;root&#39;;</span>
</span><span class='line'><span class="s">FLUSH PRIVILEGES;</span>
</span><span class='line'><span class="s">-- Remove anonymous users</span>
</span><span class='line'><span class="s">DELETE FROM mysql.user WHERE User=&#39;&#39;;</span>
</span><span class='line'><span class="s">-- Disallow remote root login</span>
</span><span class='line'><span class="s">DELETE FROM mysql.user WHERE User=&#39;root&#39; AND Host NOT IN (&#39;localhost&#39;,  &#39;127.0.0.1&#39;,  &#39;::1&#39;);</span>
</span><span class='line'><span class="s">-- Remove test database</span>
</span><span class='line'><span class="s">DROP DATABASE IF EXISTS test;</span>
</span><span class='line'><span class="s">DELETE FROM mysql.db WHERE Db=&#39;test&#39; OR Db=&#39;test\\_%&#39;;</span>
</span><span class='line'><span class="s">-- Reload privilege tables</span>
</span><span class='line'><span class="s">FLUSH PRIVILEGES;</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'>chmod <span class="m">600</span> <span class="k">${</span><span class="nv">init_file</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>nohup /bin/sh /usr/bin/mysqld_safe <span class="se">\</span>
</span><span class='line'>    --datadir<span class="o">=</span>/var/lib/mysql <span class="se">\</span>
</span><span class='line'>    --socket<span class="o">=</span>/var/lib/mysql/mysql.sock <span class="se">\</span>
</span><span class='line'>    --pid-file<span class="o">=</span>/var/run/mysqld/mysqld.pid <span class="se">\</span>
</span><span class='line'>    --basedir<span class="o">=</span>/usr <span class="se">\</span>
</span><span class='line'>    --user<span class="o">=</span>mysql <span class="se">\</span>
</span><span class='line'>    --skip-grant-tables <span class="se">\</span>
</span><span class='line'>    --skip-networking <span class="p">&amp;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> :
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="o">[</span> -r /var/run/mysqld/mysqld.pid <span class="o">]</span> <span class="o">||</span> <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> ps -ef <span class="p">|</span> grep -q <span class="k">$(</span>cat /var/run/mysqld/mysqld.pid<span class="k">)</span> <span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nb">break</span>
</span><span class='line'><span class="nb">    </span><span class="k">fi</span>
</span><span class='line'>    sleep 10
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'>mysql -uroot &lt; <span class="k">${</span><span class="nv">init_file</span><span class="k">}</span> <span class="c"># 実際の処理では--login-pathを指定してrootでログイン、実行としている。</span>
</span><span class='line'>
</span><span class='line'>/etc/init.d/mysqld stop
</span><span class='line'>
</span><span class='line'>rm -f <span class="k">${</span><span class="nv">init_file</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>実際に書いてみると、なんてことは無いコードではある。</p>

<p>あと、他に何か書こうかと思ったけど、忘れたので、とりあえずMySQL56をインストールするためのplaybookを載っけてお茶を濁すことにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>---
</span><span class='line'>- name: Install Official MySQL Repository
</span><span class='line'>  yum: <span class="nv">name</span><span class="o">={</span> <span class="o">{</span> item <span class="p">|</span> quote <span class="o">}}</span> <span class="c"># 実際に使う時はスペースを削除すること</span>
</span><span class='line'>  with_items:
</span><span class='line'>    - http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm
</span><span class='line'>  sudo: yes
</span><span class='line'>  tags:
</span><span class='line'>    - yum
</span><span class='line'>    - mysql
</span><span class='line'>
</span><span class='line'>- name: Disable Official MySQL Repository
</span><span class='line'>  replace: <span class="nv">dest</span><span class="o">=</span><span class="s2">&quot;/etc/yum.repos.d/{ { item }}.repo&quot;</span> <span class="nv">regexp</span><span class="o">=</span><span class="s2">&quot;^enabled *= *1$&quot;</span> <span class="nv">backup</span><span class="o">=</span>yes <span class="nv">replace</span><span class="o">=</span><span class="s1">&#39;enabled=0&#39;</span> <span class="c"># 実際に使う時はスペースを削除すること</span>
</span><span class='line'>  with_items:
</span><span class='line'>    - mysql-community
</span><span class='line'>    - mysql-community-source
</span><span class='line'>  sudo: yes
</span><span class='line'>  tags:
</span><span class='line'>    - yum
</span><span class='line'>    - mysql
</span><span class='line'>
</span><span class='line'>- name: Install MySQL56
</span><span class='line'>  yum: <span class="nv">name</span><span class="o">={</span> <span class="o">{</span> item <span class="p">|</span> quote <span class="o">}}</span> <span class="nv">state</span><span class="o">=</span>latest <span class="nv">enablerepo</span><span class="o">=</span>mysql56-community,remi <span class="c"># 実際に使う時はスペースを削除すること</span>
</span><span class='line'>  with_items:
</span><span class='line'>    - php56-php-mysqlnd <span class="c"># remi</span>
</span><span class='line'>    - mysql-community-client
</span><span class='line'>    - mysql-community-common
</span><span class='line'>    - mysql-community-devel
</span><span class='line'>    - mysql-community-libs
</span><span class='line'>    - mysql-community-server
</span><span class='line'>    - MySQL-python <span class="c"># for remote-host</span>
</span><span class='line'>  sudo: yes
</span><span class='line'>  tags:
</span><span class='line'>    - mysql
</span><span class='line'>
</span><span class='line'>- name: Create root user password
</span><span class='line'>  shell: cat /dev/urandom <span class="p">|</span> <span class="nv">LC_CTYPE</span><span class="o">=</span>C tr -dc <span class="s1">&#39;[:alnum:]&#39;</span> <span class="p">|</span> head -c 16
</span><span class='line'>  register: mysql_root_password
</span><span class='line'>  tags:
</span><span class='line'>    - mysql
</span><span class='line'>
</span><span class='line'>- name: Execute mysql_secure_installation
</span><span class='line'>  script: secure_install.sh <span class="o">{</span> <span class="o">{</span> mysql_root_password.stdout <span class="p">|</span> quote <span class="o">}}</span> <span class="c"># 実際に使う時はスペースを削除すること</span>
</span><span class='line'>  sudo: yes
</span><span class='line'>  register: result
</span><span class='line'>  tags:
</span><span class='line'>    - mysql
</span><span class='line'>
</span><span class='line'>- name: Add Line <span class="k">for</span> include append config
</span><span class='line'>  lineinfile: &gt;
</span><span class='line'>    <span class="nv">dest</span><span class="o">=</span>/etc/my.cnf
</span><span class='line'>    <span class="nv">line</span><span class="o">=</span><span class="s2">&quot;!includedir /etc/my.cnf.d&quot;</span>
</span><span class='line'>    <span class="nv">backup</span><span class="o">=</span>yes
</span><span class='line'>  sudo: yes
</span><span class='line'>  register: result
</span><span class='line'>  tags:
</span><span class='line'>    - mysql
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>- name: Copy my.cnf To /etc/my.cnf.d/login.cnf
</span><span class='line'>  template: &gt;
</span><span class='line'>    <span class="nv">src</span><span class="o">=</span>my.cnf.j2
</span><span class='line'>    <span class="nv">dest</span><span class="o">=</span>/etc/my.cnf.d/login.cnf
</span><span class='line'>    <span class="nv">owner</span><span class="o">=</span>root
</span><span class='line'>    <span class="nv">group</span><span class="o">=</span>root
</span><span class='line'>    <span class="nv">mode</span><span class="o">=</span>0600
</span><span class='line'>  sudo: yes
</span><span class='line'>  tags:
</span><span class='line'>    - mysql
</span><span class='line'>
</span><span class='line'>- name: Add mysqld to StartUps on boot And Be Running
</span><span class='line'>  service: <span class="nv">enabled</span><span class="o">=</span>yes <span class="nv">name</span><span class="o">=</span>mysqld <span class="nv">state</span><span class="o">=</span>running
</span><span class='line'>  sudo: yes
</span><span class='line'>  tags:
</span><span class='line'>    - mysql
</span></code></pre></td></tr></table></div></figure>


<p>あんまりかっこよくないけど、Jekyllyがcodeブロック内の波括弧を解釈しようとして変な風になるので、スペースを入れてごまかしている。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sbtから起動させる処理にコマンドラインから引数を渡す]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/02/15/pass-params-to-sbt-on-cli/"/>
    <updated>2015-02-15T02:02:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/02/15/pass-params-to-sbt-on-cli</id>
    <content type="html"><![CDATA[<p>以下はskinny frameworkをつかって処理を書いているが、sbtからの起動させる際にはskinny frameworkを使ってるかどうかは関係ないはず。</p>

<!-- more -->


<p>こんな処理を書いたとする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">batch</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">MyBatch</span> <span class="k">extends</span> <span class="n">skinny</span><span class="o">.</span><span class="n">logging</span><span class="o">.</span><span class="nc">Logging</span> <span class="k">with</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">runMain</span><span class="o">(</span><span class="n">params</span><span class="k">:</span><span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&quot;start&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">params</span> <span class="n">foreach</span> <span class="n">println</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&quot;end&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">runMain</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>その場合、以下の様に起動させれば良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">$</span> <span class="o">./</span><span class="n">sbt</span> <span class="s">&quot;run-main batch.MyBatch foo bar&quot;</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Loading</span> <span class="n">project</span> <span class="n">definition</span> <span class="n">from</span> <span class="o">/</span><span class="nc">Users</span><span class="o">/</span><span class="n">sgyk</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">script</span><span class="o">/</span><span class="n">scala</span><span class="o">/</span><span class="n">skinny</span><span class="o">-</span><span class="n">blank</span><span class="o">-</span><span class="n">app</span><span class="o">/</span><span class="n">project</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Set</span> <span class="n">current</span> <span class="n">project</span> <span class="n">to</span> <span class="n">skinny</span><span class="o">-</span><span class="n">blank</span><span class="o">-</span><span class="n">app</span><span class="o">-</span><span class="n">dev</span> <span class="o">(</span><span class="n">in</span> <span class="n">build</span> <span class="n">file</span><span class="o">:/</span><span class="nc">Users</span><span class="o">/</span><span class="n">sgyk</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">script</span><span class="o">/</span><span class="n">scala</span><span class="o">/</span><span class="n">skinny</span><span class="o">-</span><span class="n">blank</span><span class="o">-</span><span class="n">app</span><span class="o">/)</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Generating</span> <span class="o">/</span><span class="nc">Users</span><span class="o">/</span><span class="n">sgyk</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">script</span><span class="o">/</span><span class="n">scala</span><span class="o">/</span><span class="n">skinny</span><span class="o">-</span><span class="n">blank</span><span class="o">-</span><span class="n">app</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">scala</span><span class="o">-</span><span class="mf">2.11</span><span class="o">/</span><span class="n">resource_managed</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">rebel</span><span class="o">.</span><span class="n">xml</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Running</span> <span class="n">batch</span><span class="o">.</span><span class="nc">MyBatch</span> <span class="n">foo</span> <span class="n">bar</span>
</span><span class='line'><span class="mi">2014</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">14</span> <span class="mi">18</span><span class="k">:</span><span class="err">43</span><span class="kt">:</span><span class="err">44</span><span class="kt">.</span><span class="err">985</span>  <span class="kt">INFO</span>   <span class="kt">---</span> <span class="o">[</span>     <span class="kt">run-main-</span><span class="err">0</span><span class="o">]</span> <span class="n">batch</span><span class="o">.</span><span class="nc">MyBatch</span><span class="n">$</span>                           <span class="k">:</span> <span class="kt">start</span>
</span><span class='line'><span class="n">foo</span>
</span><span class='line'><span class="n">bar</span>
</span><span class='line'><span class="mi">2014</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">14</span> <span class="mi">18</span><span class="k">:</span><span class="err">43</span><span class="kt">:</span><span class="err">45</span><span class="kt">.</span><span class="err">005</span>  <span class="kt">INFO</span>   <span class="kt">---</span> <span class="o">[</span>     <span class="kt">run-main-</span><span class="err">0</span><span class="o">]</span> <span class="n">batch</span><span class="o">.</span><span class="nc">MyBatch</span><span class="n">$</span>                           <span class="k">:</span> <span class="kt">end</span>
</span><span class='line'><span class="o">[</span><span class="kt">success</span><span class="o">]</span> <span class="nc">Total</span> <span class="n">time</span><span class="k">:</span> <span class="err">1</span> <span class="kt">s</span><span class="o">,</span> <span class="n">completed</span> <span class="mi">2014</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">14</span> <span class="mi">18</span><span class="k">:</span><span class="err">43</span><span class="kt">:</span><span class="err">45</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>run-main ${package-name}.${class-name} arg1 arg2 &hellip;</code>といった感じ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beanstalk管理下のインスタンスを安全に再起動する]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/02/13/dereg-instance-under-beanstalk/"/>
    <updated>2015-02-13T18:40:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/02/13/dereg-instance-under-beanstalk</id>
    <content type="html"><![CDATA[<p>現在のBeanstalkでインスタンスが再起動する場合は主に以下の３つがある。</p>

<ul>
<li>アプリケーションをデプロイするとき</li>
<li>Configuration(JVMのパラメータとか)をデプロイするとき</li>
<li>Management ConsoleなどでRestart Appsを実行した時</li>
</ul>


<p>しかし、運用の中では特定のインスタンスのみを再起動したい場合がある。また、再起動を行う場合、インスタンスを再起動すると自動的にTerminateしてしまうし、インスタンス内部のアプリケーションサーバを再起動すると、ELBからリクエストが来てしまう。ここではこういった点を考慮した安全な再起動の手順を確認する。</p>

<!-- more -->


<a name="L.................."></a>
<h2>大まかな流れ</h2>

<ol>
<li>Auto ScalingのTerminate処理をSuspendにする。</li>
<li>ELBから対象のインスタンスを切り離す。</li>
<li>対象のインスタンス、またはインスタンス内部のアプリケーションサーバを再起動する。</li>
<li>ELBへ対象のインスタンスを再登録する。

<ul>
<li>インスタンスの再起動を行った場合、インスタンスの状態（Auto ScalingでのHealth State)はUnhealthyとなってしまうので、事前にAuto ScalingのSetInstanceHealthで対象のインスタンスをHealthyにしておくこと。</li>
</ul>
</li>
<li>Auto ScalingのTerminate処理をResumeにする。</li>
</ol>


<a name="L..............."></a>
<h3>自動化する</h3>

<p>上述した大まかな流れを自動化する。</p>

<ol>
<li>対象のインスタンスのinstance-idを取得する

<ul>
<li>例えば対象のインスタンスにsshログインして<code>curl <a href="http://169.254.169.254/latest/meta-data/instance-id/">http://169.254.169.254/latest/meta-data/instance-id/</a></code></li>
</ul>
</li>
<li>取得したinstance-idを元に、そのインスタンスが所属するAuto Scaling Groupを特定する。

<ul>
<li><code>aws autoscaling describe-auto-scaling-instances &ndash;instance-ids ${instance_id} | jq &ldquo;.AutoScalingInstances[]|.AutoScalingGroupName&rdquo; -r</code></li>
</ul>
</li>
<li>取得したAuto Scaling GroupをキーにTerminate処理をSuspendにする。

<ul>
<li><code>aws autoscaling suspend-processes &ndash;auto-scaling-group-name ${auto_scaling_group_name} &ndash;scaling-processes Terminate</code></li>
</ul>
</li>
<li>対象のインスタンスが所属するELBのLoadBalancerNameを特定する。

<ul>
<li><code>aws autoscaling describe-auto-scaling-groups &ndash;auto-scaling-group-name ${auto_scaling_group_name} | jq &ldquo;.AutoScalingGroups[]|.LoadBalancerNames[]&rdquo; -r</code></li>
<li>上記のコマンドの返り値を配列などで受け取って、instance-idでフィルタリングする。</li>
<li><code>aws elb describe-instance-health &ndash;load-balancer-name ${load_balancer_name} &ndash;instances ${instance_id}</code></li>
</ul>
</li>
<li>対象のインスタンスをLBから切り離す。

<ul>
<li><code>aws elb deregister-instances-from-load-balancer &ndash;load-balancer-name ${load_balancer_name} &ndash;instances ${instance_id}</code></li>
</ul>
</li>
<li>対象のインスタンスにて再起動処理を実行する。</li>
<li>（アプリケーションサーバではなく）インスタンスの再起動を行った場合はHealthyに変更する。

<ul>
<li><code>aws autoscaling set-instance-health &ndash;instance-id ${instance_id} &ndash;health-status Healthy</code></li>
</ul>
</li>
<li>ELBへ対象のインスタンスを再登録する。

<ul>
<li><code>aws elb register-instances-with-load-balancer &ndash;load-balancer-name ${load_balancer_name} &ndash;instances ${instance_id}</code></li>
</ul>
</li>
<li>取得したAuto Scaling GroupをキーにTerminate処理をResumeにする。

<ul>
<li><code>aws autoscaling resume-processes &ndash;auto-scaling-group-name ${auto_scaling_group_name} &ndash;scaling-processes Terminate</code></li>
</ul>
</li>
</ol>


<a name="L........."></a>
<h2>その他</h2>

<p>今回の手順を整理していく中できづいたこと。</p>

<ul>
<li>ELBからインスタンスを切り離してInService状態のインスタンスがbeanstalk環境に設定している最低稼働台数を下回っても、インスタンスが自動的に追加されることは無い。これはbeanstalkでデフォルトに設定されるAuto ScalingのHealth Check TypeがEC2モードであるためだと思われる。

<ul>
<li>なので、アプリケーションサーバを再起動するだけならAuto ScalingのTerminate処理に対する操作は不要と言える。</li>
</ul>
</li>
</ul>


<a name="L......"></a>
<h3>余談</h3>

<p>てっきりbeanstalkでのインスタンス死活監視はELB管理下のインスタンスがInServiceになっている数で判断されているものと思い込んでた…</p>

<a name="L....................."></a>
<h3>参考にした記事</h3>

<p><a href="http://qiita.com/MasaoDX/items/07e46186c450799c6350">Auto ScalingのSuspend/Resumeを使って、Elastic BeanstalkインスタンスをTerminateしないで停止・再起動する</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[起動に失敗したインスタンスを調査する例]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/02/13/how-to-analysis-unlaunched-instance/"/>
    <updated>2015-02-13T03:43:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/02/13/how-to-analysis-unlaunched-instance</id>
    <content type="html"><![CDATA[<p>先日、とあるサービスで利用しているBeanstalk環境でインスタンスが起動に失敗した。ログを見ると、S3からリソースの取得に失敗していたようだ。<br>ネットワーク接続の状態としては、AWS内のネットワークでは疎通可能だが、インターネットを経由した通信は不可、という状況。具体的には、例えばAWSのインスタンスからはsshログイン可能だが、グローバルからのsshログインはできないといったような感じ。色々調べたけど、不意に調査対象のインスタンスがTerminateしてしまい、結局原因がわからないままになってしまった。</p>

<p>調査はAWS Supportとやりとりしながら行ったのだけれども、色々と情報収集を都度指示されて捗らなかった。<br>なので、ここには次また事象が再発した場合に備えて、障害発生時に取得しておきべきこと、確認すべきことを整理する。</p>

<!-- more -->


<a name="L....................."></a>
<h2>確認すべきこと</h2>

<ul>
<li>対象インスタンスに設定されているSecurityGroup

<ul>
<li>どこからのアクセスを許可しているか</li>
<li>許可しているプロトコルは何か</li>
<li>どのポートを開けているか</li>
</ul>
</li>
<li>通信状態に問題がある場合

<ul>
<li>AWS内ネットワークからアクセス可能か（例えばsshログインなど）</li>
<li>インターネットからアクセス可能か（例えばcurlでのHTTPアクセスなど）</li>
</ul>
</li>
<li>対象インスタンスにログイン可能な場合

<ul>
<li>AWS内ネットワークへのアクセスは可能か（例えば<code>curl <a href="http://169.254.169.254/latest/meta-data/">http://169.254.169.254/latest/meta-data/</a></code>でインスタンスのメタデータが取得可能か）</li>
<li>インターネットへのアクセスは可能か（例えば<code>curl <a href="http://www.google.com">http://www.google.com</a></code>がTimeoutしないか）</li>
</ul>
</li>
<li>対象インスタンスにログインできない場合

<ul>
<li>Management ConsoleのEC2の画面から対象インスタンスを選択 > Actions > Instance Settings > Get System Logで起動時のログを参照できるかを確認する。</li>
<li>確認できた場合はそれをテキストファイルなどにコピーしてSupportへ提供する。</li>
</ul>
</li>
</ul>


<a name="L....................."></a>
<h2>収拾すべき情報</h2>

<p>起動に成功したインスタンスと起動に失敗したインスタンスのそれぞれで収拾を行なうこと。</p>

<ul>
<li>各種設定ファイル

<ul>
<li>/etc/ssh/sshd_config</li>
<li>/etc/resolv.conf</li>
</ul>
</li>
<li>各種コマンドの結果

<ul>
<li>ps -ef</li>
<li>traceroute, nslookup, dig

<ul>
<li>これらのコマンドはsshログインできた端末（例えば踏み台に使ったEC2インスタンス）と、sshログインできなかった端末（例えば対象インスタンスへインターネット経由でsshログインを行った作業者の端末）の両方で行うこと。</li>
<li>www.google.co.jpやrepo.ap-northeast-1.amazonaws.comなど、いくつかのパターンを試すと良い。</li>
</ul>
</li>
<li>tcpdump

<ul>
<li>.cap形式でコマンドの結果を保存してSupportへ提供する。</li>
<li>tcpdump port 80 -w filename.cap</li>
</ul>
</li>
<li>netstat -rn, netstat -an</li>
<li>ssh -vvv</li>
<li>iptablesの起動有無

<ul>
<li>sudo /etc/init.d/iptables status</li>
<li>sudo /etc/init.d/ip6tables status</li>
<li>起動している場合は設定をテキストファイルなどにコピーしてSupportへ提供する。</li>
</ul>
</li>
</ul>
</li>
</ul>


<a name="L.................."></a>
<h2>注意すること</h2>

<p>今回、油断して障害発生した端末が不意にTerminateしてしまい、原因を究明することができなかった。このような障害インスタンスはStanby状態にすることで稼働を維持することができる。具体的にはマニュアルの<a href="http://docs.aws.amazon.com/ja_jp/AutoScaling/latest/DeveloperGuide/TroubleshootingAnAutoScalingInstance.html">Auto Scaling グループのインスタンスのトラブルシューティング</a>を参照すること。Auto ScalingやBeanstalkなどを利用していなければ、勝手にTerminateされることは無いと思うので、Terminate Protectionを設定しておけば大丈夫だと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play!のDB設定について]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/04/09/about-db-configuration-in-play/"/>
    <updated>2014-04-09T00:27:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/04/09/about-db-configuration-in-play</id>
    <content type="html"><![CDATA[<p>自分が開発したわけでもないのだけれど、APIのパフォーマンスをどうにかしろ、チューニングしろと言われた。チューニング対象のAPIは<a href="http://www.playframework.com/">Play!</a>を利用しており、DBのI/Oにパフォーマンスが強く依存するので、まずはDB周りのパラメータをしらべて改善していくことにした。</p>

<!-- more -->


<p>DBの接続周りを改善していくにあたって、Thread Poolへの理解は欠かせないのだけれど、Play!の<a href="http://www.playframework.com/documentation/2.2.x/ThreadPools">ドキュメント</a>だとAkkaとかが出てきて、もう少し基本的な部分からおさらいしたいなーと思ったので、ソースから調べることにした。</p>

<ul>
<li><a href="http://www.playframework.com/documentation/2.2.x/ThreadPools">play-jdbc/src/main/scala/play/api/db/DB.scala</a></li>
</ul>


<p>DB.scalaはPlayのDB接続周りを管理している。<a href="https://github.com/playframework/playframework/blob/master/framework/src/play-jdbc/src/main/scala/play/api/db/DB.scala#L202">class BoneCPPlugin</a>でconfigファイルからDBの設定を取得している。この辺に注目していけばよさそう。このあたりに書かれている設定に関して言えば、基本は言語やフレームワークに依存しない部分なはずなのでこれまでの経験とか勘が活かせるかなーと思った次第。</p>

<p>ということで、今回はこのソースに書かれている設定を整理する。</p>

<a name="L......"></a>
<h3>接続</h3>

<p>ラベルのプレフィクスには<code>db.<em>dbName</em>.</code>がつく。</p>

<table>
<thead>
<tr>
<th style="text-align:left;">ラベル        </th>
<th style="text-align:left;"> 設定値の型     </th>
<th style="text-align:left;"> 概要           </th>
<th style="text-align:left;"> メモ</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">driver</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">DBドライバ名</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">autocommit</td>
<td style="text-align:left;">Boolean</td>
<td style="text-align:left;">autocommitを有効にするかどうか</td>
<td style="text-align:left;"> defaultはtrue</td>
</tr>
<tr>
<td style="text-align:left;">isolation</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">NONE / READ_COMMITTED / READ_UNCOMMITTED / REPEATABLE_READ / SERIALIZABLE</td>
<td style="text-align:left;">大文字</td>
</tr>
<tr>
<td style="text-align:left;">defaultCatalog</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">デフォルトのDBカタログ名</td>
<td style="text-align:left;">Postgresqlなど?DB2かも？</td>
</tr>
<tr>
<td style="text-align:left;">readOnly</td>
<td style="text-align:left;">Boolean</td>
<td style="text-align:left;">読み取り専用アクセスとするか否か</td>
<td style="text-align:left;">defaultはfalse</td>
</tr>
<tr>
<td style="text-align:left;">url</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">DBの接続文字列</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">user</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">DBの接続ユーザ</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">pass</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">DBの接続パスワード</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">password</td>
<td style="text-align:left;">string</td>
<td style="text-align:left;">DBの接続パスワード</td>
<td></td>
</tr>
</tbody>
</table>


<a name="Pool.configuration"></a>
<h3>Pool configuration</h3>

<p>ここの設定項目はBoneCPの設定とほぼ同一だが、初期値の設定が異なっている。<br>
BoneCPの接続数を計算する場合は<code>maxConnectionsPerPartition * partitionCount</code>となることを押さえておけばよさそう。</p>

<p>ラベルのプレフィクスには<code>db.<em>dbName</em>.</code>がつく。</p>

<table>
<thead>
<tr>
<th style="text-align:left;">ラベル        </th>
<th style="text-align:left;"> 設定値の型     </th>
<th style="text-align:left;"> 概要           </th>
<th style="text-align:left;"> メモ</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">partitionCount</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">スレッドプール単体での同時接続数</td>
<td style="text-align:left;">defaultは1。CPUのコア数と揃えたほうが良い。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></td>
</tr>
<tr>
<td style="text-align:left;">maxConnectionsPerPartition</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">partitionごとに作られる最大同時接続数</td>
<td style="text-align:left;">defaultは30。</td>
</tr>
<tr>
<td style="text-align:left;">minConnectionsPerPartition</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">partitionごとに同時接続開始数</td>
<td style="text-align:left;">defaultは5</td>
</tr>
<tr>
<td style="text-align:left;">acquireIncrement</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">接続が切れそうになるとBoneCPが接続を新たに生成する数。partiticonごとに作用する。</td>
<td style="text-align:left;">defaultは1</td>
</tr>
<tr>
<td style="text-align:left;">acquireRetryAttempts</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">接続試行回数</td>
<td style="text-align:left;">defaultは10</td>
</tr>
<tr>
<td style="text-align:left;">acquireRetryDelay</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">接続に失敗して次の試行までの待ち時間</td>
<td style="text-align:left;">defaultは1000。単位はMillSeconds</td>
</tr>
<tr>
<td style="text-align:left;">connectionTimeout</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">getConnetionを呼び出してからタイムアウトするまでの待ち時間</td>
<td style="text-align:left;">defaultは1000。単位はMillSeconds</td>
</tr>
<tr>
<td style="text-align:left;">idleMaxAge</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">接続が閉じられるまで使われていない接続を維持する時間。</td>
<td style="text-align:left;">defaultは1000 * 60 * 10。単位はMillSeconds。つまりdefaultはアイドル時間が10分。</td>
</tr>
<tr>
<td style="text-align:left;">maxConnectionAge</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">接続を強制的に閉じるための判断に使う時間。ここで指定された時間を超えて存在する接続はアイドルであるか否かを問わず閉じられる。プールに戻されるまでは使用中の接続には影響しない</td>
<td style="text-align:left;">defaultは1000 * 60 * 60。単位はMillSeconds。つまりdefaultでは生成から60分を超えた接続は閉じられる。</td>
</tr>
<tr>
<td style="text-align:left;">disableJMX</td>
<td style="text-align:left;">Boolean</td>
<td style="text-align:left;">JMXを有効に<strong>しない</strong>かどうか</td>
<td style="text-align:left;">defaultはtrue。つまり有効にしない。</td>
</tr>
<tr>
<td style="text-align:left;">statisticsEnabled</td>
<td style="text-align:left;">Boolean</td>
<td style="text-align:left;">統計情報の出力を有効にするかどうか(？)</td>
<td style="text-align:left;">defaultはfalse</td>
</tr>
<tr>
<td style="text-align:left;">idleConnectionTestPeriod</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">DBにテストクエリを送出するまで接続のアイドルを維持する時間。</td>
<td style="text-align:left;">defaultは1000 * 60。単位はMillSeconds。つまりdefaultは1分。</td>
</tr>
<tr>
<td style="text-align:left;">disableConnectionTracking</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">connection trackingを有効に<strong>しないか</strong>どうか</td>
<td style="text-align:left;">defaultはtrue</td>
</tr>
<tr>
<td style="text-align:left;">queryExecuteTimeLimit</td>
<td style="text-align:left;">Int</td>
<td style="text-align:left;">クエリをロギングするかどうかの基準となる時間。この指定時間を超えたクエリはロギングされる。</td>
<td style="text-align:left;">defaultはゼロ。つまりどれだけ時間がかかってもロギングしない。単位はMillSeconds</td>
</tr>
</tbody>
</table>


<a name="L.................."></a>
<h3>その他の設定</h3>

<p>初期値が設定されていないが、それはおそらくドライバ依存だからだと思う。</p>

<p>ラベルのプレフィクスには<code>db.<em>dbName</em>.</code>がつく。</p>

<table>
<thead>
<tr>
<th style="text-align:left;">ラベル        </th>
<th style="text-align:left;"> 設定値の型     </th>
<th style="text-align:left;"> 概要           </th>
<th style="text-align:left;"> メモ</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">initSQL</td>
<td style="text-align:left;">String</td>
<td style="text-align:left;">接続が確立されるときに一度だけ実行されるSQL。これは接続ごとに実行される。</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">logStatements</td>
<td style="text-align:left;">Boolean</td>
<td style="text-align:left;">SQLをロギングするかどうか</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">connectionTestStatement</td>
<td style="text-align:left;">String</td>
<td style="text-align:left;">接続テストのために実行されるクエリ</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">jndiName</td>
<td style="text-align:left;">String</td>
<td style="text-align:left;">JNDIネームスペースの指定</td>
<td></td>
</tr>
</tbody>
</table>


<a name="L........."></a>
<h2>おまけ</h2>

<p>DB接続文字列の正規表現</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="nc">PostgresFullUrl</span> <span class="k">=</span> <span class="s">&quot;^postgres://([a-zA-Z0-9_]+):([^@]+)@([^/]+)/([^\\s]+)$&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="k">val</span> <span class="nc">MysqlFullUrl</span> <span class="k">=</span> <span class="s">&quot;^mysql://([a-zA-Z0-9_]+):([^@]+)@([^/]+)/([^\\s]+)$&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="k">val</span> <span class="nc">MysqlCustomProperties</span> <span class="k">=</span> <span class="s">&quot;.*\\?(.*)&quot;</span><span class="o">.</span><span class="n">r</span>
</span><span class='line'><span class="k">val</span> <span class="n">H2DefaultUrl</span> <span class="k">=</span> <span class="s">&quot;^jdbc:h2:mem:.+&quot;</span><span class="o">.</span><span class="n">r</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/playframework/playframework/blob/master/framework/src/play-jdbc/src/main/scala/play/api/db/DB.scala#L344-L347">ここで使われている</a></p>

<p>MySQLの場合は以下が自動的に付与される</p>

<pre><code>?useUnicode=yes&amp;characterEncoding=UTF-8&amp;connectionCollation=utf8_general_ci
</code></pre>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://stackoverflow.com/questions/14445129/a-better-explanation-for-partitioncount-in-bonecp">A better explanation for partitionCount in BoneCP</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['-rwxr-sr-x'というパーミッション設定]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/04/01/whats-is-rwxr-sr-x/"/>
    <updated>2014-04-01T19:26:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/04/01/whats-is-rwxr-sr-x</id>
    <content type="html"><![CDATA[<p>とある事情でサーバの調査をしていたら、以下の様なパーミッション設定を見かけた。</p>

<pre><code>$ ls -l /usr/sbin/sendmail.sendmail
-rwxr-sr-x 1 root smmsp 825704  3月 14  2013 /usr/sbin/sendmail.sendmail
</code></pre>

<!-- more -->


<p>本来（というか、いつもは）&#8221;s&#8221;のところは&#8221;-&ldquo;か&#8221;x&#8221;のはずなので、不思議に思って調べたところ、以下の記事に説明があった。</p>

<ul>
<li><a href="http://www.mukuan.org/basic/permission.html#zone6">特殊なパーミッション</a></li>
<li><a href="http://kazmax.zpp.jp/linux_beginner/setgroupid.html">SGID（Set Group ID） - 特殊なアクセス権</a></li>
</ul>


<p>これらの記事によると、ここで言うところの&#8221;s&#8221;は<code>SGID(Set Group ID)</code>と呼ばれるもので、この設定がなされている実行ファイルを実行すると、ファイルに設定された所有グループの権限でコマンドが実行されるとのこと。</p>

<pre><code>$ ls -l /usr/sbin/sendmail.sendmail
-rwxr-sr-x 1 root smmsp 825704  3月 14  2013 /usr/sbin/sendmail.sendmail
</code></pre>

<p>上記の例で言えば、sendmailを実行すると、smtpグループの権限で実行することになる。</p>

<p>使い道があまりパッと出てこないけど、グループの管理がちょっと楽になるぐらい？日常的な運用で使うことはなさそう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LAST_INSERT_ID()の返り値の型はバージョンによって違う]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/03/02/about-last-insert-id-with-mysql5-dot-5-5-dot-6/"/>
    <updated>2014-03-02T07:30:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/03/02/about-last-insert-id-with-mysql5-dot-5-5-dot-6</id>
    <content type="html"><![CDATA[<p>昨日、MySQLのバージョンを5.5.27から5.6.13に上げてテストしてたら<code>LAST_INSERT_ID</code>を使っているとこでエラーが出た。それで、ドキュメントを見ていたら以下の様な記述があった。</p>

<!-- more -->


<p><a href="http://dev.mysql.com/doc/refman/5.5/en/information-functions.html#function_last-insert-id">http://dev.mysql.com/doc/refman/5.5/en/information-functions.html#function_last-insert-id</a>より。</p>

<blockquote><p>The value has a type of BIGINT UNSIGNED as of MySQL 5.5.29,  BIGINT (signed) before that.</p></blockquote>

<p>5.5.27ではsigned BIGINTが返る模様。</p>

<p><a href="http://dev.mysql.com/doc/refman/5.6/en/information-functions.html#function_last-insert-id">http://dev.mysql.com/doc/refman/5.6/en/information-functions.html#function_last-insert-id</a>より。</p>

<blockquote><p>The value has a type of BIGINT UNSIGNED as of MySQL 5.6.9,  BIGINT (signed) before that.</p></blockquote>

<p>5.6.13ではunsigned BIGINTが返る模様。</p>

<p>で、これの何が問題になったのかというと、例えばunsignedなBIGINTを<code>java.lang.Long</code>に変換しようとしたら有効桁数が変わってしまうということ。<br>ドキュメント<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>によると、signed BIGINTは</p>

<ul>
<li>min:-9223372036854775808</li>
<li>max:9223372036854775807</li>
</ul>


<p>で、これは<code>java.lang.Long</code>の定義<a href="" title="http://docs.oracle.com/javase/7/docs/api/java/lang/Long.html">^2</a>と一致するんだけど、MySQLのunsigned BIGINTは</p>

<ul>
<li>min:0</li>
<li>max:18446744073709551615</li>
</ul>


<p>となる。なので、<code>java.lang.Long</code>じゃなくて、<code>java.math.BigDecimal</code>に変換するようにしないといけないんじゃないかなと。どう対応したかまでは知らないんでアレなんだけど。</p>

<p>以下は一応の検証結果。</p>

<pre><code>mysql [localhost] {msandbox} (test) &gt; select version();
+-----------+
| version() |
+-----------+
| 5.5.27    |
+-----------+
1 row in set (0.00 sec)

mysql [localhost] {msandbox} (test) &gt; create table t1(c1 int);
Query OK, 0 rows affected (0.01 sec)

mysql [localhost] {msandbox} (test) &gt; insert into t1 values(1);
Query OK, 1 row affected (0.00 sec)

mysql [localhost] {msandbox} (test) &gt; create table t2 select last_insert_id() as c2 from t1;
Query OK, 1 row affected (0.00 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql [localhost] {msandbox} (test) &gt; desc t2;
+-------+------------+------+-----+---------+-------+
| Field | Type       | Null | Key | Default | Extra |
+-------+------------+------+-----+---------+-------+
| c2    | bigint(21) | NO   |     | 0       |       |
+-------+------------+------+-----+---------+-------+
1 row in set (0.00 sec)


mysql [localhost] {msandbox} (test) &gt; select version();
+-----------+
| version() |
+-----------+
| 5.6.13    |
+-----------+
1 row in set (0.00 sec)

mysql [localhost] {msandbox} ((none)) &gt; use test;
Database changed
mysql [localhost] {msandbox} (test) &gt; create table t1(c1 int);
Query OK, 0 rows affected (0.01 sec)

mysql [localhost] {msandbox} (test) &gt; insert into t1 values(1);
Query OK, 1 row affected (0.00 sec)

mysql [localhost] {msandbox} (test) &gt; create table t2 select last_insert_id() as c2 from t1;
Query OK, 1 row affected (0.02 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql [localhost] {msandbox} (test) &gt; desc t2;
+-------+---------------------+------+-----+---------+-------+
| Field | Type                | Null | Key | Default | Extra |
+-------+---------------------+------+-----+---------+-------+
| c2    | bigint(21) unsigned | NO   |     | 0       |       |
+-------+---------------------+------+-----+---------+-------+
1 row in set (0.01 sec)
</code></pre>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>https://dev.mysql.com/doc/refman/5.6/en/integer-types.html<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdownをプレビューする]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/03/01/how-to-preview-markdown-on-cli/"/>
    <updated>2014-03-01T09:43:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/03/01/how-to-preview-markdown-on-cli</id>
    <content type="html"><![CDATA[<p>Macではプレビュー機能があるけど、markdownだとレンダリングされずにそのままが表示される。 ので、ちゃんとレンダリングされた状態でプレビューできるようにする。また、いつもvimを使って作業しているので、コマンドラインからプレビューできるようにする。</p>

<p>ただ、今回はlynxを使ってプレビューするので、あまり一般的なやり方ではないと思う。</p>

<!-- more -->


<ul>
<li>markdownをhtmlに変換するツール

<ul>
<li>今回は<a href="http://daringfireball.net/projects/markdown/">http://daringfireball.net/projects/markdown/</a>を使う。</li>
<li><code>PATH</code>が通っている所にスクリプトを配置して、実行権限をつけておく。</li>
</ul>
</li>
<li>lynx

<ul>
<li><code>brew install lynx</code>でOK。</li>
</ul>
</li>
</ul>


<p>随時実行できるように以下のような関数を<code>~/.zshrc</code>とかに登録しておく。</p>

<pre><code># markdown preview
markdown_preview() {
    case $1 in
        -d | -dump | --dump )
            shift
            /usr/local/bin/Markdown.pl $1 | lynx -stdin -raw -dump
            ;;
        * )
            /usr/local/bin/Markdown.pl $1 | lynx -stdin -raw
            ;;
    esac
}
</code></pre>

<p>lynxのオプションに<code>-raw</code>を付けないと、日本語が化けてしまうのでつけておいたほうが良いと思う。あとは、このコマンドをvimから呼び出せるようにすればいいんだろうけど、うまくバッファの中で表示される方法がわからなかったので早々に諦めた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sudoでulimitをしたら「sudo: ulimit -Sn: コマンドが見つかりません」と言われた]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/02/05/sudo-ulimit/"/>
    <updated>2014-02-05T20:26:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/02/05/sudo-ulimit</id>
    <content type="html"><![CDATA[<p>elasticsearchの調子が悪かったので、いろいろ調べていた。その途中でnofilesの上限を調べようと思って、以下のようにコマンドを叩いたらコマンドが見つからないって言われた。</p>

<!-- more -->


<pre><code>$ sudo -E -u elasticsearch 'ulimit -Sn'
sudo: ulimit -Sn: コマンドが見つかりません
</code></pre>

<p>で、あれ？って思っておもむろに確認してみたら、ulimitは<code>cd</code>とか<code>echo</code>のようなビルトイン関数だった。</p>

<pre><code>$ which ulimit
/usr/bin/which: no ulimit in (~/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/aws/bin:/home/fujishima/bin)
$ whereis ulimit
ulimit: /usr/include/ulimit.h /usr/share/man/man1/ulimit.1.gz /usr/share/man/man3p/ulimit.3p.gz /usr/share/man/man1p/ulimit.1p.gz /usr/share/man/man3/ulimit.3.gz
</code></pre>

<p>なので、以下のようにして実行した。</p>

<pre><code>$ sudo -u elasticsearch /bin/bash -c 'ulimit -n'
32000
</code></pre>

<p>というメモでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ITフォーラムセッション 「ビッグデータ活用実務フォーラム」に行ってきた。]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/02/04/big-data-forum/"/>
    <updated>2014-02-04T11:39:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/02/04/big-data-forum</id>
    <content type="html"><![CDATA[<p><a href="http://www.ipsj.or.jp/event/sj/sj2014/itforum_big_data_program.html?utm_content=buffer1396a&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">ITフォーラムセッション 「ビッグデータ活用実務フォーラム」</a>に行ってきた。短い時間に対して、とても豪華なスピーカーだったので、これは行くしかないなーという感じで行ってきた。各セッション30分なので、とても密度が濃かった。</p>

<p>以下はメモ。聞きながらなので、乱文乱筆ご容赦。</p>

<!-- more -->


<a name="L..............................................................................................................................................................."></a>
<h2>「ビッグデータ活用実務フォーラムの概要紹介」、および「医療、農学、環境分野におけるビッグデータ分析の実際」</h2>

<p>スピーカーは石井　一夫 （東京農工大学 農学府農学部 特任教授）さん。</p>

<ul>
<li>だれか女子部つくって</li>
<li><p>ナンパじゃなくてガチで硬派なスタイル</p></li>
<li><p>ビッグデータはゲームや広告だけじゃない</p></li>
<li>ゲノム科学におけるビッグデータ分析</li>
<li>次世代シーケンサーによりヒトゲノムが数日から数週間で読み取れるようになった</li>
<li>プログラムにはshellとかawkとかsedとかLLとか</li>
<li>Hadoopももちろん使ってるよ</li>
<li>インフラはAWSとかのクラウド</li>
<li>解析のソフトウェアで言うと、Crossbowってのがある。</li>
</ul>


<p>ここから事例</p>

<ul>
<li>次世代シーケンサーから出力されるデータのクォリティチェック</li>
<li>いっぺんに数億個のデータが出てくる</li>
<li>モンテカルロ法</li>
<li>Rでゴニョゴニョやってる</li>
<li>ヒストグラムとかヒートマップ、箱ひげ図での評価</li>
</ul>


<p>２つ目の事例</p>

<ul>
<li>進化系統樹</li>
<li>データを比較的短い時間で捌けるようになった。それをどう使うか。</li>
<li>ほぼ無限の組み合わせをモンテカルロ法を用いて絞込？を行って組み合わせを試す</li>
<li>447個の遺伝子から４つを取り出して組み合わせを試す

<ul>
<li>それでも16億パターンぐらいある</li>
</ul>
</li>
<li>これらのパターンから進化系統樹を最適化する</li>
</ul>


<p>３つ目の事例</p>

<ul>
<li>精神疾患に関する調査</li>
<li>糖尿病よりも精神疾患の患者が多く、癌による死者の２倍以上</li>
<li>精神神経疾患系の構築の試み

<ul>
<li>経験的診断からの脱却を図る</li>
</ul>
</li>
<li>採取したDNA、RNAを採取して網羅的ゲノム解析を行う</li>
<li>色々やってモデルを作る。</li>
<li>感度と特異度を用いて完全な診断を行う。</li>
</ul>


<a name="L..............................................................................................................................................................."></a>
<h2>「ビッグデータ活用実務フォーラムの概要紹介」、および「医療、農学、環境分野におけるビッグデータ分析の実際」</h2>

<p>スピーカーは當仲寛哲（USP研究所 代表取締役所長）さん。</p>

<ul>
<li>ユニケージ手法とはUNIXの基本的な機能だけで実現する開発手法</li>
<li>枯れた技術をとことん使い倒す</li>
<li>とは言え、シェルだけではなくてCとかPythonで作った高速なライブラリを用いている</li>
<li>DLできるみたいなこと言ってた</li>
<li>行儀の良い開発作法の研究</li>
<li>数千万件ぐらいまでのデータ規模であれば、30-40個ぐらいのコマンドで１台の端末でさばくことができる。</li>
<li>どちらかというと、システム部門よりも業務部門向けに展開していることが多い。</li>
<li>テキストでデータがあればいいので、データ設計というか、何をキーとするかなどをあまり考えなくてよくなる。</li>
<li>COBOLやSQLバッチの置き換え</li>
<li>BIツールの置き換え</li>
<li>どのくらい早くなる？

<ul>
<li>COBOLで15時間だったのが2時間弱になった</li>
<li>3645ステップから981ステップへ</li>
<li>想定3ヶ月間ぐらいなのに対して13日の期間でここまで改善された。</li>
</ul>
</li>
<li>幅広く使うのではなく、道具を絞り込んでそれを使い倒すという思想</li>
<li>Java + SQLで90分ぐらいが90秒ぐらいになった。</li>
<li>OSネイティブに作りこむことでオーバヘッドを減らす</li>
<li>Firewallのログ解析に2400分かかってた処理を60分に短縮することができた。</li>
<li>usp BOAとかいうクラスタシステムを使うことで100億件のデータは数秒でできる</li>
<li>ゲノム解析でのクォリティチェック、バスの運行情報のリアルタイム集計</li>
<li>R言語の関数をC言語で書き換えて</li>
</ul>


<a name="L...........................One.to.one.............................."></a>
<h2>ビッグデータ時代のOne to oneマーケティングの実際</h2>

<p>スピーカーは山川義介（ALBERT 代表取締役会長）さん。</p>

<ul>
<li>One to Oneって？

<ul>
<li>販売機会 to 顧客→実務的には最小顧客セグメント</li>
<li>このセグメントを最適化するのが大事</li>
</ul>
</li>
<li>一番注目されているのは行動履歴データ

<ul>
<li>特に購買履歴は精度データが高い</li>
<li>属性データはほとんど使わない</li>
<li>人口統計的データや心理的データはもう分析の現場では使われなくなりつつ有る。</li>
</ul>
</li>
<li>アンケートデータは非常に密であるが、購買データはsparse（疎、まばら）

<ul>
<li>こうゆうデータは従来の秀峰では非常に難しい</li>
<li>３次元的に分析する</li>
</ul>
</li>
<li>sparse対策

<ul>
<li>POSデータをカテゴリ単位に分析する</li>
<li>SKU単位の相関よりカテゴリ単位の相関のほうがはるかにパワフルで精緻な購買予測が可能になる</li>
<li>分析に適したカテゴリ付を行なうことが必要</li>
</ul>
</li>
<li>CTB分析

<ul>
<li>Category, Taste, Brand</li>
</ul>
</li>
<li>従来のクラスター分析の手法の問題点

<ul>
<li>k-means法でとにかく似ているクラスターを作る。</li>
<li>ユークリッド距離</li>
<li>コサイン類似度</li>
<li>クラスター分析における距離に関する疑問がある</li>
<li>ALBERT距離という概念

<ul>
<li>特許出願中らしい</li>
</ul>
</li>
</ul>
</li>
<li>cos距離だと原点から放射前条に広がる</li>
<li>ユークリッド距離だと比較的均一に広がる</li>
<li>ALBERT距離だと軸や平面付近とそれ以外に分割される</li>
<li>ALBERT距離を使って、ロイヤルカスタマー可への応用を図っている

<ul>
<li>今までRFM分析におけるロイヤルカスタマーだと何を買ったかは考慮していない</li>
<li>購入カテゴリを考慮したロイヤルカスタマー化</li>
</ul>
</li>
</ul>


<a name="L......................................................................................."></a>
<h2>機械学習と検索の融合が実現するリアルタイムビッグデータ分析</h2>

<p>スピーカーは西川徹（Preferred Infrastructure 代表取締役最高経営責任者）さん。</p>

<ul>
<li>Hadoopの先のBigDataアプリケーション

<ul>
<li>Collection, Reporting, Analytics, Actionのうちデータサイエンティストがカバーしている後半２つがPFIの事業領域</li>
</ul>
</li>
<li>機械学習技術を活用することでデータに対する深い分析の実現を目指す

<ul>
<li>人間の学習過程をコンピュータ上で実現する</li>
</ul>
</li>
<li><a href="http://jubat.us/en/">Jubatus</a>

<ul>
<li>広告配信とかに使われているらしい</li>
</ul>
</li>
<li>集計から深い分析へ, 構造化から非構造化へ, バッチからリアルタイムへ

<ul>
<li>リアルタイムにログを収集して分析できる世界へ</li>
</ul>
</li>
<li>Sedue for BigData

<ul>
<li>リアルタイムに動画を分析して自動的にタグ付けを行う, とか</li>
</ul>
</li>
<li>ビッグデータの先を目指して

<ul>
<li>今のでデータは人が生み出したものがほとんど</li>
<li>トランザクションとかSNSとか</li>
<li>人のクロック数が上がらない限り、データの増加量は頭打ちになるよね</li>
<li>そこで監視カメラ、スマホのセンサーデータとかの機械由来のデータは今後爆発的に増えていくというか、増やすことはどうにでもできることに着目</li>
<li>こういったデータはすでにエッジ（縁）に存在している</li>
</ul>
</li>
<li>データを集約するアプローチは近い将来うまくいかなくなる

<ul>
<li>物理的、地理的な制約によるエッジデバイスの普及とのギャップ</li>
<li>エッジヘビーコンピューティング

<ul>
<li>データを貯めない、一箇所に集めないということを前提にしたアーキテクチャ</li>
<li>エッジ側がもっとintelligentになった階層型のアーキテクチャ</li>
<li>中央に集めなくても良いデータとかあるしね</li>
</ul>
</li>
<li>だからJubatusがアツい

<ul>
<li>ノード間で学習の差分を交換しあう</li>
<li>Loose Model Sharing</li>
<li>Jubatusはクラウド上だけじゃなくてネットワーク機器とかエッジデバイスにも埋め込んでそれおれが互いに強調してより深い分析や判断を行えるようにする.</li>
</ul>
</li>
</ul>
</li>
<li>Data in Motion API

<ul>
<li>監視カメラの映像をData in Montion APIを通じて収集してそれをJubatusとかSedueでアレコレしていい感じにしている（聞き損ねた</li>
</ul>
</li>
<li>機械学習と検索技術のリアルタイム化は必須で、中央ではなくエッジで処理するアプローチ</li>
</ul>


<a name="L............................................................"></a>
<h1>ビッグデータ」の業務利用の夢と現実と絶望</h1>

<p>スピーカーは神林飛志（ノーチラス・テクノロジーズ 代表取締役社長）さん。</p>

<ul>
<li>ビッグデータとは

<ul>
<li>データ爆発の文脈から出てきた言葉</li>
<li>大前提としてPetaByteクラス</li>
<li>ビッグデータって英語で言うと、large amount of data</li>
</ul>
</li>
<li>なんで「ビッグデータ」が流行ったの？

<ul>
<li>モバイル以降のネタが欲しいVCとマスコミ</li>
<li>そこに評論家、政治家とかが乗っかってきた</li>
<li>「ビッグデータ」という市場を作りたい思惑</li>
</ul>
</li>
<li>「ナノテク」というトレンド

<ul>
<li>今は完全に下火</li>
<li>「ビッグデータ」もそうなる？歴史は繰り返すのか？</li>
</ul>
</li>
<li>ビジネスからみた「ビッグデータ」はビジネスになっていない

<ul>
<li>大手SIerですら10数件あればいいほう</li>
<li>実は非常に限られたデータ領域</li>
</ul>
</li>
<li>M2Mはどうなの？

<ul>
<li>実はすでにだいぶ昔からやってる話</li>
<li>プラントとか原発とか</li>
<li>車の制御とか</li>
</ul>
</li>
<li>結局のところ、「ビッグデータ」市場は当初の予想よりずっと小さい

<ul>
<li>CRMとかは健全に成長している</li>
</ul>
</li>
<li>ビッグデータで商売にするには

<ul>
<li>ビッグデータって言わない</li>
<li>バズワードは禁句</li>
<li>データの細粒度化に焦点を当てる</li>
<li>虱潰し</li>
<li>組み合わせの爆発にどう対応するか</li>
<li>これまでのトレンドとは違う技術

<ul>
<li>並列処理とか</li>
</ul>
</li>
</ul>
</li>
<li>技術から見たら？

<ul>
<li>非常に有望な技術が生まれつつある</li>
<li>スケールアウト</li>
<li>分散・並列クエリー</li>
<li>分散トランザクション</li>
<li>複数DC間の整合性確保</li>
<li>主役はGoogleやAMazon</li>
</ul>
</li>
<li>研究から実業への落とし込み

<ul>
<li>分散・並列</li>
<li>既存技術

<ul>
<li>MapReduce</li>
<li>NoSQL</li>
<li>現状では当たり前すぎて、もはやどうでもよいレベル</li>
</ul>
</li>
<li>NWコストの低下によってこれまでとは違うアプローチができるようになった</li>
</ul>
</li>
<li>で、日本は？

<ul>
<li>マスコミ、評論家がよって集まって「データが大きくなくても良い」という風潮をつくった</li>
<li>大事なのはアプリケーションでしょ？</li>
<li>それはそうなんだけど、失われた基盤技術</li>
</ul>
</li>
<li>技術屋としては？

<ul>
<li>最低限のNoSQLやHadoopの知識</li>
<li>Try &amp; Errorができる環境</li>
<li>トレンドを追いかける</li>
<li>VCに踊らされない</li>
<li>データを絞るのではなくて、分散とか並列とかで潰していく</li>
</ul>
</li>
<li>人から見た

<ul>
<li>リアルタイムって処理が早いことじゃなくて、マイクロセカンドからナノセカンドへ</li>
<li>プレゼンテーションが「シリコンバレーのVC向け」</li>
</ul>
</li>
<li>データサイエンスの矛盾

<ul>
<li>統計手法はビッグデータのための手法じゃない。むしろ逆。</li>
<li>データサイエンスとビッグデータとの矛盾</li>
<li>そもそもデータ解析には普通の歴史がある。

<ul>
<li>金融、バイオ、流通…</li>
<li>すでにプロが居るんだから、データサイエンスと名乗ることの苦悩</li>
</ul>
</li>
<li>本当にビッグデータに関わりたいのであれば、日本からでていくこと

<ul>
<li>無いものを無理やりつくろうとした。</li>
<li>正常な進化ができなくなった日本IT</li>
<li>ビジネスとしては旧来市場に参入するしかない

<ul>
<li>レッドオーシャン</li>
</ul>
</li>
</ul>
</li>
<li>海外

<ul>
<li>正面からビッグデータに取り組む</li>
<li>インフラを含めた基礎技術の改変に取り組む</li>
<li>よって進む技術革新</li>
<li>いままで出来なかったことができるようになる

<ul>
<li>ブルーオーシャン</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQLのALTERで'The table '#sql-xxxx' is full'と言われたら]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/01/28/table-is-full-when-alter/"/>
    <updated>2014-01-28T09:44:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/01/28/table-is-full-when-alter</id>
    <content type="html"><![CDATA[<p>とりあえず、DBの空き容量とALTERしようとしているテーブルの容量を確認する。</p>

<!-- more -->


<p><a href="http://dev.mysql.com/doc/refman/5.5/en/alter-table.html">公式マニュアル</a>には以下のようにある。</p>

<blockquote><p>In most cases,  ALTER TABLE makes a temporary copy of the original table.</p></blockquote>

<p>いくつかの例外はあるものの、カラムを追加したり削除したりする場合は一時テーブルが作られる模様。なので、対象テーブル分の空き容量が必要となる。とは言え、実際の容量分だけあればよいかというと、そうでも無いみたいで、目安として大体<code>ALTERしようとしているテーブルの容量 * 2</code>ぐらいの空き容量が必要なので、足りてない場合はそんな感じで容量を増やせば良い。</p>

<a name="L........."></a>
<h2>おまけ</h2>

<p>テーブルの容量を調べたい場合は、こちらのブログを参考にすると良い。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/sho-yamasaki/20120405/1333640589">データベースとテーブルのサイズを確認する方法</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
