<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | sgykfjsm.github.com]]></title>
  <link href="http://sgykfjsm.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://sgykfjsm.github.io/"/>
  <updated>2015-11-04T00:43:01+09:00</updated>
  <id>http://sgykfjsm.github.io/</id>
  <author>
    <name><![CDATA[sgykfjsm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ginkgo 基本的な使い方編]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/09/24/ginkgo-getting-start/"/>
    <updated>2015-09-24T22:51:20+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/09/24/ginkgo-getting-start</id>
    <content type="html"><![CDATA[<p>最近、golangでプログラムを書く機会が増えてきた。golangでTDDをする場合、標準の<a href="https://golang.org/pkg/testing/">testingパッケージ</a>を使うのが一般的なようだ。ただし、標準パッケージだけだとちょっとテストが書きづらいので、<a href="https://github.com/stretchr/testify">stretchr/testify</a>を使っている人も多いと思う。</p>

<p>関数のテストをしたいときは標準パッケージなりtestifyを使うなりで良いのだけど、振る舞いをテストしたい、つまりBDDをしたいなーと思った時にちょっと調べらたら<a href="http://onsi.github.io/ginkgo/">Ginkgo</a>というのが良さ気だったので、ちょっと試してみる。</p>

<!-- more -->


<a name="Ginkgo......"></a>
<h2>Ginkgoとは</h2>

<p>表現力があって包括的なテストを効率良く書くためのBDDスタイルのテストフレームワーク。<a href="http://github.com/onsi/gomega">Gomega</a>というMatcherライブラリと併用すると良い感じらしいけど、単体でも充分使えるらしい。</p>

<p>今回はドキュメントに従い、GinkgoだけでなくGomegaもインストールした。</p>

<a name="L.................."></a>
<h2>インストール</h2>

<p><code>go get</code>するだけ。ginkgoの実行バイナリが<code>${GOPATH}/bin</code>に、ソースコードはgomegaとともに<code>$GOPATH/src/github.com/onsi</code>にインストールされていることが確認できる。</p>

<pre><code>$ go get github.com/onsi/ginkgo/ginkgo
$ go get github.com/onsi/gomega
$ ls -l $GOPATH/bin
...
-rwxr-xr-x   1 sgyk  staff  11747788  9 24 23:00 ginkgo*
$ ls -l $GOPATH/src/github.com/onsi
...
drwxr-xr-x  16 sgyk  staff  544  9 24 23:00 ginkgo/
drwxr-xr-x  17 sgyk  staff  578  9 24 23:01 gomega/
</code></pre>

<a name="L........."></a>
<h2>始め方</h2>

<p>こんなかんじで<code>ginkgo bootstrap</code>をすると、テストスイートを生成してくれる。</p>

<pre><code>$ mkdir ginkgo-study
$ cd $_
$ ginkgo bootstrap
Generating ginkgo test suite bootstrap for ginkgo_study in:
        ginkgo_study_suite_test.go
$ cat ginkgo_study_suite_test.go
package ginkgo_study_test

import (
        . "github.com/onsi/ginkgo"
        . "github.com/onsi/gomega"

        "testing"
)

func TestGinkgoStudy(t *testing.T) {
        RegisterFailHandler(Fail)
        RunSpecs(t, "GinkgoStudy Suite")
}
</code></pre>

<p>自動生成されたファイルは<code>ginkgo</code>でテストを走らせることができるし、Ginkgoは標準パッケージであるtestingにフックしているので、<code>go test</code>で実行させることも出来る。</p>

<pre><code>$ ginkgo
Running Suite: GinkgoStudy Suite
================================
Random Seed: 1443106503
Will run 0 of 0 specs


Ran 0 of 0 Specs in 0.000 seconds
SUCCESS! -- 0 Passed | 0 Failed | 0 Pending | 0 Skipped PASS

Ginkgo ran 1 suite in 3.234616229s
Test Suite Passed
</code></pre>

<pre><code>$ go test
Running Suite: GinkgoStudy Suite
================================
Random Seed: 1443106514
Will run 0 of 0 specs


Ran 0 of 0 Specs in 0.000 seconds
SUCCESS! -- 0 Passed | 0 Failed | 0 Pending | 0 Skipped PASS
ok      github.com/sgykfjsm/ginkgo-study        0.077s
</code></pre>

<a name="L..................................................."></a>
<h3>自動生成されたテストスイートの確認</h3>

<p>まずは１行目。</p>

<pre><code>package ginkgo_study_test
</code></pre>

<p>このパッケージ名は<code>ginkgo bootstrap</code>が実行されたディレクトリ名を元に設定されている。今回は<code>ginkgo-study</code>というディレクトリの中で実行したので、<code>ginkgo_study_test</code>となっている。もちろん敢えて<code>ginkgo_study</code>など、別名に修正することは可能だが、テストコードと実コードとの切り分けの観点からすると、このままで良いだろう。</p>

<p>続いて3行目から8行目について。</p>

<pre><code>import (
        . "github.com/onsi/ginkgo"
        . "github.com/onsi/gomega"

        "testing"
)
</code></pre>

<p>ドットインポートを使うことでginkgoとgomegaをtop levelでインポート、つまり修飾子なしで各パッケージの関数を使えるようにしている。詳しくはSOの<a href="http://stackoverflow.com/a/6478990">What does the &lsquo;.&rsquo; (dot or period) in a go import statement do?の回答</a>と公式ドキュメントの<a href="https://golang.org/ref/spec#Import_declarations">Import declarations</a>を参照のこと。</p>

<p>ドットインポートをしたくない場合は、bootstrap実行時にオプション<code>--nodot</code>をつけることで回避できる。</p>

<p>では最後に自動生成されたテスト関数を確認する。</p>

<pre><code>func TestGinkgoStudy(t *testing.T) {
        RegisterFailHandler(Fail)
        RunSpecs(t, "GinkgoStudy Suite")
}
</code></pre>

<p><code>TestGinkgoStudy</code>はもちろんただの関数名。引数に<code>t *testing.T</code>があることからわかるように<code>go test</code>でこの関数を実行することが出来る。</p>

<p>11行目の<code>RegisterFailHandler</code>は、Ginkgoの<code>Fail</code>関数を引数にすることで、テストが失敗した際にGomegaへGinkgoの<code>Fail</code>関数を渡している。この<code>RegisterFailHandler</code>はGinkgoとGomegaの間の唯一の接点となっている。</p>

<p>12行目の<code>RunSpec</code>でテストのスペック、つまりテストの内容を設定する。</p>

<p>ドキュメントに沿って細かく見ていったけど、全体的に難しいことはあまり無いように見える。Ginkgo(に限らずBDD全般がそうだと思うけど)ではテストをどう実装するか、よりもどのようにテストを設計するかに注力しやすくなっている。</p>

<a name="L.............................."></a>
<h2>テストスペックを作る</h2>

<p>テストスペックはテストスイートと同様にコマンドで自動生成出来る。と言っても、雛形だけど。</p>

<pre><code>$ ginkgo generate ginkgo_study
Generating ginkgo test for GinkgoStudy in:
  ginkgo_study_test.go

$ cat ginkgo_study_test.go
package ginkgo_study_test

import (
        . "github.com/sgykfjsm/ginkgo-study"

        . "github.com/onsi/ginkgo"
        . "github.com/onsi/gomega"
)

var _ = Describe("GinkgoStudy", func() {

})
</code></pre>

<p><code>ginkgo generate</code>にパッケージ名を渡せば良い。</p>

<a name="L..................................................."></a>
<h3>自動生成されたテストスペックの確認</h3>

<p>１行目については特に言うことはないと思うけど、<code>ginkgo generate</code>の引数が設定される。</p>

<pre><code>package ginkgo_study_test
</code></pre>

<p>3行目から7行目にかけてはテストスイートと違いがある。1つはテスト対象のパッケージが設定されていること、もう1つはtestingパッケージがimportされていないこと。前者については特に疑問はないと思うけど、後者についてはちょっと違和感があるかもしれない。というのも、一般的にgolangを使ったプログラム開発では、テストコードは<code>xxx_test.go</code>というネーミングが推奨されており、そのファイル内ではtestingパッケージをimportすることがほとんどだが、これはそういった慣習と異なっている。まぁ慣れの問題かもしれないが、ginkgoを使ったテストコードだということを知らないと違和感があると思う。</p>

<pre><code>import (
        . "github.com/sgykfjsm/ginkgo-study"

        . "github.com/onsi/ginkgo"
        . "github.com/onsi/gomega"
)
</code></pre>

<p>以降のコードは&#8221;コンテナ&#8221;と捉えることができ、スペックを記述(=格納)するクロージャとなる。開発者はこのコンテナの中にスペックを記述することになる。</p>

<pre><code>var _ = Describe("GinkgoStudy", func() {

})
</code></pre>

<p>ところで、<code>var _ = ...</code>という記述は今回初めて見かけた。ドキュメントによると、<code>var _ = ...</code>と書くことで、<code>func init(){}</code>無しにトップレベルで(つまりは初期処理として)<code>Describe</code>が評価されることができるらしい。</p>

<a name="L.............................."></a>
<h2>テストスペックを書く</h2>

<p>では実際にテストスペックを書いてみる。今回は以下の様なモデルと、その振る舞いを書いた。</p>

<pre><code>package ginkgo_study

type Grade struct {
    Subject   string
    Score     int
    Mandatory bool
}

func (g *Grade) IsPass() bool {
    if g.Score &gt; 60 {
        return true
    }
    return false
}
</code></pre>

<p>…まぁこれについては特にいうことは無いと思う。つぎに、対応するスペックを以下のようにした。</p>

<pre><code>package ginkgo_study_test

import (
    . "github.com/sgykfjsm/ginkgo-study"

    . "github.com/onsi/ginkgo"
    . "github.com/onsi/gomega"
)

var _ = Describe("GinkgoStudy", func() {

    var (
        goodGrade Grade
        badGrade  Grade
    )

    BeforeEach(func() {
        goodGrade = Grade{
            Subject:   "Math",
            Score:     61,
            Mandatory: true,
        }

        badGrade = Grade{
            Subject:   "History",
            Score:     60,
            Mandatory: false,
        }
    })

    Describe("Criteria of pass or not", func() {
        Context("With more than 60", func() {
            It("should be passed", func() {
                Expect(goodGrade.IsPass()).To(Equal(true))
            })
        })

        Context("With less than 60", func() {
            It("should be failed", func() {
                Expect(badGrade.IsPass()).To(Equal(false))
            })
        })
    })

})
</code></pre>

<a name="L.............................."></a>
<h3>テストスペックの解説</h3>

<p>先にも説明したように、開発者は<code>Describe</code>のクロージャで表現されたコンテナの中にスペックを書けば良い。</p>

<p><code>BeforeEach</code>はいわゆる<code>setup</code>にあたる処理。スペックが実行される度に、<code>BeforeEach</code>で定義した&#8221;状態&#8221;が作られる。また、ここで定義した&#8221;状態&#8221;は後述する<code>It</code>の中で使うことが出来る。</p>

<p><code>Describe</code>と<code>Context</code>を使って、スペックの内容を表現豊かに記述することができ、<code>It</code>でスペックを指定する。<code>BeforeEach</code>と<code>It</code>で&#8221;状態&#8221;を共有するためには、コンテナの中のトップレベルで変数を定義すれば良い。</p>

<p><code>It</code>の中で使っている<code>Expect</code>はGomega由来のもの。これを使って評価したい内容を記述すれば良い。</p>

<a name="L......................................."></a>
<h2>テストスペックを実行する。</h2>

<p>このテストスペックを実行してみる。実行方法は先述の通り、普通に<code>go test</code>すれば良い。</p>

<pre><code>$ go test -v -cover
=== RUN TestGinkgoStudy
Running Suite: GinkgoStudy Suite
================================
Random Seed: 1443114232
Will run 2 of 2 specs

••
Ran 2 of 2 Specs in 0.000 seconds
SUCCESS! -- 2 Passed | 0 Failed | 0 Pending | 0 Skipped --- PASS: TestGinkgoStudy (0.00 seconds)
PASS
coverage: 100.0% of statements
ok      github.com/sgykfjsm/ginkgo-study        0.073s
</code></pre>

<p>見ての通り、<code>-cover</code>で同時にカバレッジを出すことができる。また、テストに失敗すると、以下の様になる。</p>

<pre><code>$ go test -v -cover
=== RUN TestGinkgoStudy
Running Suite: GinkgoStudy Suite
================================
Random Seed: 1443114347
Will run 2 of 2 specs

• Failure [0.004 seconds]
GinkgoStudy
/Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:45
  Criteria of pass or not
  /Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:43
    With more than 60
    /Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:36
      should be passed [It]
      /Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:35

      Expected
          &lt;bool&gt;: false
      to equal
          &lt;bool&gt;: true

      /Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:34
------------------------------
•

Summarizing 1 Failure:

[Fail] GinkgoStudy Criteria of pass or not With more than 60 [It] should be passed
/Users/sgyk/local/script/golang/src/github.com/sgykfjsm/ginkgo-study/ginkgo_study_test.go:34

Ran 2 of 2 Specs in 0.004 seconds
FAIL! -- 1 Passed | 1 Failed | 0 Pending | 0 Skipped --- FAIL: TestGinkgoStudy (0.00 seconds)
FAIL
exit status 1
FAIL    github.com/sgykfjsm/ginkgo-study        0.071s
</code></pre>

<p>見ての通り、かなり丁寧に失敗箇所を教えてくれる。ちなみに、Ginkgoの出力は色付きであり、一部はグレーで表示されるので、ここで見るほど冗長には感じないものと思われる。</p>

<a name="L........."></a>
<h2>まとめ</h2>

<p>以上、ごくごく簡単にGinkgoの使い方を示した。といっても、内容的には公式ドキュメントの冒頭をなぞっただけだが…。</p>

<p>ただ、見ての通り、かなり使いやすいことがわかると思う。コマンドによるボイラープレートや雛形の生成により、開発者は集中すべきことだけに集中できるし、他のBDDフレームワークと同様に自然言語に近い感覚でテストを書くことができる。</p>

<p>また、テスト失敗時に細かい出力をしてくれるのも地味に嬉しい。標準のtestingパッケージやtestifyなどはシンプルな出力しかしてくれないのでデバッグコードが必要になる時があるが、Ginkgoだとその必要はだいぶ減らすことができるだろう。とはいえ、やや丁寧すぎる気がしないでもないが。</p>

<p>個人的な感覚としてはGinkgoはとても開発者フレンドリーだし、比較的活発に開発されているので、注目すべきライブラリだと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins上でgolangのプロジェクトをCIするときに気をつけなければならないこと]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/09/06/ci-with-golng-on-jenkins/"/>
    <updated>2015-09-06T20:03:54+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/09/06/ci-with-golng-on-jenkins</id>
    <content type="html"><![CDATA[<p>JenkinsでgolangプロジェクトをCIするときに少しハマったので、同じミスをしないで済むようにここにメモする。</p>

<!-- more -->


<a name="Jenkins...golang.............................."></a>
<h2>Jenkinsでgolangを使えるようにする。</h2>

<p>何はともあれ、これをしないことには始まらない。特に理由が無ければ、Jenkinsのプラグインを使うのが良い。</p>

<p>&ldquo;Jenkinsの管理&rdquo; > &ldquo;プラグインの管理&rdquo; > &ldquo;利用可能&#8221;タブ へ進み、フィルターで&#8221;golang&#8221;と入力すれば、<a href="https://wiki.jenkins-ci.org/display/JENKINS/Go+Plugin">Go plugin</a>が見つかる。チェックを入れた後、&#8221;ダウンロードして再起動後にインストール&#8221;を押下する。</p>

<p>再起動後、&#8221;Jenkinsの管理&#8221; > &ldquo;システムの設定&#8221;へ進むと、&#8221;Go&#8221;のセクションが追加されていることが確認できるはず。</p>

<ul>
<li>もしシステムの管理で&#8221;ロード中&#8221;から復帰しない場合、&#8221;Jenkinsの管理&#8221; > &ldquo;プラグインの管理&rdquo; > &ldquo;高度な設定&#8221;タブ へ進み、画面右下の&#8221;更新&#8221;ボタンを押すと回復する場合がある。</li>
<li>それでもダメならいくつかプラグインをアップデートしてから、再度&#8221;更新&#8221;ボタンを押すと回復することがある。</li>
<li>FYI: <a href="https://issues.jenkins-ci.org/browse/JENKINS-27499">Global config page is broken when loaded before the tool installer data has been fetched</a></li>
</ul>


<p>その後、使いたいバージョンを設定して&#8221;適用&#8221;ボタンを押下後に&#8221;保存&#8221;ボタンを押下すれば良い。</p>

<a name="Job...golang..........................."></a>
<h2>Jobでgolangを使うようにする。</h2>

<p>Jenkinsのプラグインを入れたあと、ジョブの設定画面の&#8221;ビルド環境&#8221;に&#8221;Set up Go programming language tools&#8221;が表示されていることを確認する。ここで使いたいバージョンを選択すれば、あとはPluginが指定したところからバイナリをダウンロードしてして、<code>${JENKINS_HOME}/tools/org.jenkinsci.plugins.golang.GolangInstallation/</code>以下にバイナリを設置する。</p>

<p>Go Pluginを使うと、環境変数に<code>GOROOT</code>が設定されて、<code>PATH</code>にgolangのバイナリが追加されていることが確認できる。</p>

<pre><code class="shell"># Jenkinsのジョブで`env`を実行した出力結果の一部
BUILD_DISPLAY_NAME=#1
BUILD_ID=1
...
EXECUTOR_NUMBER=1
GOROOT=/var/lib/jenkins/tools/org.jenkinsci.plugins.golang.GolangInstallation/v1.5
HOME=/var/lib/jenkins
...
PATH=/var/lib/jenkins/tools/org.jenkinsci.plugins.golang.GolangInstallation/v1.5/bin:/sbin:/usr/sbin:/bin:/usr/bin
...
Finished: SUCCESS
</code></pre>

<p>しかし、<code>GOPATH</code>が設定されていない。これに気をつけなければハマることになる。</p>

<a name="L................................................"></a>
<h2>カスタムワークスペースを設定する</h2>

<p>おそらく、通常のgolang開発では、GOPATH以下にソースを置いて開発しているのではないかと思う(少なくとも自分の場合はそうしている)。</p>

<p>例えば、<code>github.com/sgykfjsm/hello-golang</code>というプロジェクトの開発をしている場合、コーディングしている端末でのパスは<code>${GOPATH}/src/github.com/sgykfjsm/hello-golang</code>というパスになっているはず。</p>

<p>よって、Jenkinsのジョブ実行時にもこのパスを再現しなければならない。そうしないと、Git Pluginなどでソースを取得すると、普通に<code>${JENKINS_HOME}/workspace/${JOB_NAME}</code>直下にソースが配置されてしまい、<code>go get</code>や<code>go install</code>などに失敗するからだ。</p>

<p>というわけで、Jenkins上でも同じパス構成を再現するためにはカスタムワークスペースを使って、ワークスペースの設定を修正しなければならない。</p>

<p>カスタムワークスペースの設定箇所は、非常にわかりづらいが、ジョブの設定画面の&#8221;プロジェクトの高度なオプション&#8221;に隠れており、&#8221;高度な設定&hellip;&ldquo;を押下して表示しなければならない。押下後、&#8221;カスタムワークスペースを使用&#8221;にチェックを入れて、&#8221;ディレクトリ&#8221;のテキストボックスを表示させる。このテキストボックスに入力すべき設定値は<code>${JENKINS_HOME}</code>から下のパスにすれば良い。例えば、<code>workspace/${JOB_NAME}/src/github.com/sgykfjsm/hello-golang</code>のようにすれば良い。</p>

<a name="GOPATH..............."></a>
<h2>GOPATHを設定する</h2>

<p>その後、ビルドで&#8221;シェルの実行&#8221;を選択し、<code>export GOPATH=${JENKINS_HOME}/workspace/${JOB_NAME}</code>を実行してから諸々の処理を行うようにしてあげれば良い。また、<code>export PATH=${PATH}:${GOPATH}/bin</code>も追加しておくと良い。</p>

<a name="L........."></a>
<h2>まとめ</h2>

<p>要は<code>GOPATH</code>をちゃんと設定しようねっていうだけ。</p>
]]></content>
  </entry>
  
</feed>
