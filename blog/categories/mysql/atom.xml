<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | sgykfjsm.github.com]]></title>
  <link href="http://sgykfjsm.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://sgykfjsm.github.io/"/>
  <updated>2017-09-11T22:47:56+09:00</updated>
  <id>http://sgykfjsm.github.io/</id>
  <author>
    <name><![CDATA[sgykfjsm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AnsibleでMySQLをインストールする。]]></title>
    <link href="http://sgykfjsm.github.io/blog/2015/02/17/install-mysql-with-ansible/"/>
    <updated>2015-02-17T09:19:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2015/02/17/install-mysql-with-ansible</id>
    <content type="html"><![CDATA[<p>AWSなんかを使ってると、イチからMySQLなどの基本的なミドルウェアをセットアップすることは減ってくる。そんな中、AnsibleでMySQLをインストールする事になったのだけど、意外と忘れてたりAnsibleで作業するのと手作業で進めることの差異でちょっと詰まったりしたので、ここに備忘しておく。</p>

<!-- more -->


<a name="L.................."></a>
<h2>大まかな手順</h2>

<ol>
<li>最新安定版(MySQL5.6)をインストールするためのリポジトリを設定する。</li>
<li>リポジトリ軽油でインストールする。</li>
<li>初期セットアップを行なう。

<ul>
<li>rootのパスワード初期化</li>
<li>mysql_secure_installationによるMySQLの初期化</li>
<li>諸々の設定</li>
</ul>
</li>
</ol>


<p>たったこれだけなんだけど、Ansibleでこれらの作業を実装するのはちょっと面倒。というのも、mysql_secure_installationはコマンドを実行すると対話的に処理を進めることになるが、これをAnsibleで実行するのがちょっと面倒だったりする。また、rootのパスワード初期化についても考慮が必要で、playbookに直書きするのはもちろん駄目だし、mysql_config_editorはこれまた対話式のコマンドなので、自動化が微妙に難しい。諸々の設定に関して、設定すべき内容は案件などによると思うが、予めいくつかのmy.cnfなどを用意しておいて、それをコピーして使うようすればいいだけなので、あまり問題にはならない。</p>

<p>ということで、rootのパスワード初期化および管理とmysql_secure_installationについて考える。</p>

<a name="root...................................."></a>
<h2>rootのパスワード初期化と管理</h2>

<p>いくつかのブログなどにあるHowTo記事でrootの初期パスワードは.mysql_secretというファイルにある、と書かれていることがある。が、今回MySQL5.6をインストールしてみてもそのようなファイルは無かった。今までも見たことがないので、もしかしたらインストールの方法によってはこのファイルが生成されるのかもしれないが、とにかく無い。なので、パスワードの初期化は基本に忠実に以下のようにMySQLを起動させてからパスワードをSQLで更新した。</p>

<pre><code>/bin/sh /usr/bin/mysqld_safe \
    --datadir=/var/lib/mysql \
    --socket=/var/lib/mysql/mysql.sock \
    --pid-file=/var/run/mysqld/mysqld.pid \
    --basedir=/usr \
    --user=mysql \
    --skip-grant-tables \
    --skip-networking
</code></pre>

<p>この起動コマンドについての詳細は<a href="http://dev.mysql.com/doc/refman/5.1/en/resetting-permissions.html#resetting-permissions-generic">Resetting the Root Password: Generic Instructions</a>を参照。この方法がシンプルで覚えることが少なくて良いと思う。</p>

<p>これでMySQLサーバを起動した後、以下のSQLでパスワードを更新する。パスワードはAnsibleの中で<code>cat /dev/urandom | LC_CTYPE=C tr -dc &lsquo;[:alnum:]&rsquo; | head -c 16 ; echo</code>とかやって適当な文字列を生成してあげれば良いと思う。パスワードをplaybookに直書きするよりかはマシだろう。</p>

<pre><code class="sql">UPDATE mysql.user SET Password=PASSWORD('NewPassWord') WHERE User='root';
FLUSH PRIVILEGES;
</code></pre>

<p>ここまでは特段問題が無くて、問題はこのパスワードをどこに保管するか、ということ。結論から言えば、/etc/my.cnf.d配下に管理することに落ち着いた。以下の様なファイルを作っておいて、それを/etc/my.cnf.d配下に配置しておけば良いと思う。</p>

<pre><code class="ini">[db-administrator]
user = root
password = { { mysql_root_password.stdout }}
host = localhost
</code></pre>

<p><code></code>の部分はAnsible内で設定されるプレースホルダー。また、通常は<code>[client]</code>となっている部分は別の文言に変えている。そうでないと、デフォルトの接続情報として使われるので、注意すること。また、/etc/my.cnf.d配下のファイルが読み込まれるように、/etc/my.cnfには<code>!includedir /etc/my.cnf.d</code>を追加しておくこと。</p>

<a name="Ansible...mysql_secure_installation..........................."></a>
<h2>Ansibleでmysql_secure_installationを如何に行なうか。</h2>

<p>ざっと思いついたのは以下の通り。</p>

<ol>
<li>普通にmysql_secure_installationを実行して、対話的に処理を行う。

<ul>
<li>そもそもAnsibleで行なう必要が無いのと、rootのパスワードなどをどこかにメモすることになるので却下</li>
</ul>
</li>
<li>expectを使って、予め回答を入力しておいて、処理を自動化させる。

<ul>
<li>expectについては、<a href="http://www.math.kobe-u.ac.jp/~kodama/tips-expect.html%E3%81%BE%E3%81%9F%E3%81%AFhttp://linuxjm.sourceforge.jp/html/expect/man1/expect.1.html%E3%81%AA%E3%81%A9%E3%82%92%E5%8F%82%E7%85%A7%E3%80%82">http://www.math.kobe-u.ac.jp/~kodama/tips-expect.html%E3%81%BE%E3%81%9F%E3%81%AFhttp://linuxjm.sourceforge.jp/html/expect/man1/expect.1.html%E3%81%AA%E3%81%A9%E3%82%92%E5%8F%82%E7%85%A7%E3%80%82</a></li>
<li>expectを別途インストールする必要がある。</li>
<li>expcet/Tclの文法などを新たに覚えなければならない、かつあまり使うことがなさそうなので、あんまり覚える気がしない。</li>
<li>試してみたけど微妙だった（予めすべてのパターンの質問を拾って、回答を用意しなければならない）</li>
<li>ということで却下</li>
</ul>
</li>
<li>mysql_secure_installationと同等の処理を実装し、それを実行する。

<ul>
<li>mysql_secure_installationがやっている処理自体はいくつかのSQLを実行しているだけで、実装自体は容易。</li>
<li>ただし、今後のバージョンアップなどでmysql_secure_installationの内容を常に気にしておく必要がある。</li>
<li>1と2の案に比べて、必要な時間が圧倒的に少なく済むので、今回はこの案にした。</li>
</ul>
</li>
</ol>


<p>で、その内容は以下の通り。</p>

<pre><code class="bash">#!/bin/bash
# http://dev.mysql.com/doc/refman/5.0/en/resetting-permissions.html#resetting-permissions-unix

set -xeu

[ $(/usr/bin/whoami) = 'root' ] || {
    /bin/echo root only
    exit 1
}

init_file=/tmp/mysql-init

/bin/cat &lt;&lt;EOF &gt; ${init_file}
-- Set the root password
UPDATE mysql.user SET Password=PASSWORD('${mysql_root_password}') WHERE User='root';
FLUSH PRIVILEGES;
-- Remove anonymous users
DELETE FROM mysql.user WHERE User='';
-- Disallow remote root login
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost',  '127.0.0.1',  '::1');
-- Remove test database
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
-- Reload privilege tables
FLUSH PRIVILEGES;
EOF
chmod 600 ${init_file}

nohup /bin/sh /usr/bin/mysqld_safe \
    --datadir=/var/lib/mysql \
    --socket=/var/lib/mysql/mysql.sock \
    --pid-file=/var/run/mysqld/mysqld.pid \
    --basedir=/usr \
    --user=mysql \
    --skip-grant-tables \
    --skip-networking &amp;

while :
do
    [ -r /var/run/mysqld/mysqld.pid ] || continue

    if ps -ef | grep -q $(cat /var/run/mysqld/mysqld.pid) ; then
        break
    fi
    sleep 10
done

mysql -uroot &lt; ${init_file} # 実際の処理では--login-pathを指定してrootでログイン、実行としている。

/etc/init.d/mysqld stop

rm -f ${init_file}

exit
</code></pre>

<p>実際に書いてみると、なんてことは無いコードではある。</p>

<p>あと、他に何か書こうかと思ったけど、忘れたので、とりあえずMySQL56をインストールするためのplaybookを載っけてお茶を濁すことにする。</p>

<pre><code>---
- name: Install Official MySQL Repository
  yum: name={ { item | quote }} # 実際に使う時はスペースを削除すること
  with_items:
    - http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm
  sudo: yes
  tags:
    - yum
    - mysql

- name: Disable Official MySQL Repository
  replace: dest="/etc/yum.repos.d/{ { item }}.repo" regexp="^enabled *= *1$" backup=yes replace='enabled=0' # 実際に使う時はスペースを削除すること
  with_items:
    - mysql-community
    - mysql-community-source
  sudo: yes
  tags:
    - yum
    - mysql

- name: Install MySQL56
  yum: name={ { item | quote }} state=latest enablerepo=mysql56-community,remi # 実際に使う時はスペースを削除すること
  with_items:
    - php56-php-mysqlnd # remi
    - mysql-community-client
    - mysql-community-common
    - mysql-community-devel
    - mysql-community-libs
    - mysql-community-server
    - MySQL-python # for remote-host
  sudo: yes
  tags:
    - mysql

- name: Create root user password
  shell: cat /dev/urandom | LC_CTYPE=C tr -dc '[:alnum:]' | head -c 16
  register: mysql_root_password
  tags:
    - mysql

- name: Execute mysql_secure_installation
  script: secure_install.sh { { mysql_root_password.stdout | quote }} # 実際に使う時はスペースを削除すること
  sudo: yes
  register: result
  tags:
    - mysql

- name: Add Line for include append config
  lineinfile: &gt;
    dest=/etc/my.cnf
    line="!includedir /etc/my.cnf.d"
    backup=yes
  sudo: yes
  register: result
  tags:
    - mysql


- name: Copy my.cnf To /etc/my.cnf.d/login.cnf
  template: &gt;
    src=my.cnf.j2
    dest=/etc/my.cnf.d/login.cnf
    owner=root
    group=root
    mode=0600
  sudo: yes
  tags:
    - mysql

- name: Add mysqld to StartUps on boot And Be Running
  service: enabled=yes name=mysqld state=running
  sudo: yes
  tags:
    - mysql
</code></pre>

<p>あんまりかっこよくないけど、Jekyllyがcodeブロック内の波括弧を解釈しようとして変な風になるので、スペースを入れてごまかしている。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LAST_INSERT_ID()の返り値の型はバージョンによって違う]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/03/02/about-last-insert-id-with-mysql5-dot-5-5-dot-6/"/>
    <updated>2014-03-02T07:30:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/03/02/about-last-insert-id-with-mysql5-dot-5-5-dot-6</id>
    <content type="html"><![CDATA[<p>昨日、MySQLのバージョンを5.5.27から5.6.13に上げてテストしてたら<code>LAST_INSERT_ID</code>を使っているとこでエラーが出た。それで、ドキュメントを見ていたら以下の様な記述があった。</p>

<!-- more -->


<p><a href="http://dev.mysql.com/doc/refman/5.5/en/information-functions.html#function_last-insert-id">http://dev.mysql.com/doc/refman/5.5/en/information-functions.html#function_last-insert-id</a>より。</p>

<blockquote><p>The value has a type of BIGINT UNSIGNED as of MySQL 5.5.29,  BIGINT (signed) before that.</p></blockquote>

<p>5.5.27ではsigned BIGINTが返る模様。</p>

<p><a href="http://dev.mysql.com/doc/refman/5.6/en/information-functions.html#function_last-insert-id">http://dev.mysql.com/doc/refman/5.6/en/information-functions.html#function_last-insert-id</a>より。</p>

<blockquote><p>The value has a type of BIGINT UNSIGNED as of MySQL 5.6.9,  BIGINT (signed) before that.</p></blockquote>

<p>5.6.13ではunsigned BIGINTが返る模様。</p>

<p>で、これの何が問題になったのかというと、例えばunsignedなBIGINTを<code>java.lang.Long</code>に変換しようとしたら有効桁数が変わってしまうということ。<br>ドキュメント<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>によると、signed BIGINTは</p>

<ul>
<li>min:-9223372036854775808</li>
<li>max:9223372036854775807</li>
</ul>


<p>で、これは<code>java.lang.Long</code>の定義<a href="" title="http://docs.oracle.com/javase/7/docs/api/java/lang/Long.html">^2</a>と一致するんだけど、MySQLのunsigned BIGINTは</p>

<ul>
<li>min:0</li>
<li>max:18446744073709551615</li>
</ul>


<p>となる。なので、<code>java.lang.Long</code>じゃなくて、<code>java.math.BigDecimal</code>に変換するようにしないといけないんじゃないかなと。どう対応したかまでは知らないんでアレなんだけど。</p>

<p>以下は一応の検証結果。</p>

<pre><code>mysql [localhost] {msandbox} (test) &gt; select version();
+-----------+
| version() |
+-----------+
| 5.5.27    |
+-----------+
1 row in set (0.00 sec)

mysql [localhost] {msandbox} (test) &gt; create table t1(c1 int);
Query OK, 0 rows affected (0.01 sec)

mysql [localhost] {msandbox} (test) &gt; insert into t1 values(1);
Query OK, 1 row affected (0.00 sec)

mysql [localhost] {msandbox} (test) &gt; create table t2 select last_insert_id() as c2 from t1;
Query OK, 1 row affected (0.00 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql [localhost] {msandbox} (test) &gt; desc t2;
+-------+------------+------+-----+---------+-------+
| Field | Type       | Null | Key | Default | Extra |
+-------+------------+------+-----+---------+-------+
| c2    | bigint(21) | NO   |     | 0       |       |
+-------+------------+------+-----+---------+-------+
1 row in set (0.00 sec)


mysql [localhost] {msandbox} (test) &gt; select version();
+-----------+
| version() |
+-----------+
| 5.6.13    |
+-----------+
1 row in set (0.00 sec)

mysql [localhost] {msandbox} ((none)) &gt; use test;
Database changed
mysql [localhost] {msandbox} (test) &gt; create table t1(c1 int);
Query OK, 0 rows affected (0.01 sec)

mysql [localhost] {msandbox} (test) &gt; insert into t1 values(1);
Query OK, 1 row affected (0.00 sec)

mysql [localhost] {msandbox} (test) &gt; create table t2 select last_insert_id() as c2 from t1;
Query OK, 1 row affected (0.02 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql [localhost] {msandbox} (test) &gt; desc t2;
+-------+---------------------+------+-----+---------+-------+
| Field | Type                | Null | Key | Default | Extra |
+-------+---------------------+------+-----+---------+-------+
| c2    | bigint(21) unsigned | NO   |     | 0       |       |
+-------+---------------------+------+-----+---------+-------+
1 row in set (0.01 sec)
</code></pre>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>https://dev.mysql.com/doc/refman/5.6/en/integer-types.html<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQLのALTERで'The table '#sql-xxxx' is full'と言われたら]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/01/28/table-is-full-when-alter/"/>
    <updated>2014-01-28T09:44:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/01/28/table-is-full-when-alter</id>
    <content type="html"><![CDATA[<p>とりあえず、DBの空き容量とALTERしようとしているテーブルの容量を確認する。</p>

<!-- more -->


<p><a href="http://dev.mysql.com/doc/refman/5.5/en/alter-table.html">公式マニュアル</a>には以下のようにある。</p>

<blockquote><p>In most cases,  ALTER TABLE makes a temporary copy of the original table.</p></blockquote>

<p>いくつかの例外はあるものの、カラムを追加したり削除したりする場合は一時テーブルが作られる模様。なので、対象テーブル分の空き容量が必要となる。とは言え、実際の容量分だけあればよいかというと、そうでも無いみたいで、目安として大体<code>ALTERしようとしているテーブルの容量 * 2</code>ぐらいの空き容量が必要なので、足りてない場合はそんな感じで容量を増やせば良い。</p>

<a name="L........."></a>
<h2>おまけ</h2>

<p>テーブルの容量を調べたい場合は、こちらのブログを参考にすると良い。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/sho-yamasaki/20120405/1333640589">データベースとテーブルのサイズを確認する方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon RDSのMySQLでオンラインメンテをどうやればいいかを調べた]]></title>
    <link href="http://sgykfjsm.github.io/blog/2014/01/26/online-maintenance-on-rds-mysql/"/>
    <updated>2014-01-26T20:28:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2014/01/26/online-maintenance-on-rds-mysql</id>
    <content type="html"><![CDATA[<p>RDSのMySQLでオンラインメンテ、つまり無停止でのスキーマ変更などをどうやれば良いか、という話。 今までは色々小細工をして生のALTER文を発行していたけど、さすがにロック時間とかが気になり始めたので調べた次第。 ざっとググると、<a href="http://www.percona.com/doc/percona-toolkit/2.1/pt-online-schema-change.html">pt-online-schema-change</a>というツールを使うと良さそうだったので、ここにその作業ログを残す。 以下は参考にしたブログ記事など。</p>

<ul>
<li><a href="http://blog.livedoor.jp/sasata299/archives/51983526.html">pt-online-schema-changeを利用して無停止でスキーマ変更</a></li>
<li><a href="https://twitter.com/frsyuki/statuses/291713629177405441">@frsyukiさんのツイート</a></li>
<li><a href="http://stackoverflow.com/questions/8919907/can-i-create-trigger-in-an-rds-db">Can I CREATE TRIGGER in an rds DB?</a></li>
</ul>


<!-- more -->


<p>なお、別のツールで<a href="http://openarkkit.googlecode.com/svn/trunk/openarkkit/doc/html/oak-online-alter-table.html">oak-online-alter-table</a>というものがある。oak-online-alter-tableに関する記事は以下が参考になる。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/sh2/20100703">MySQLでサービス停止のないALTER TABLEの検討</a></li>
</ul>


<a name="L............"></a>
<h2>事前準備</h2>

<p>pt-online-schema-changeの実行に必要なモジュールがあるかを確認する。</p>

<pre><code>$ perl -MDBD::mysql
Can't locate DBD/mysql.pm in @INC (@INC contains: /Library/Perl/5.12/darwin-thread-multi-2level /Library/Perl/5.12 /Network/Library/Perl/5.12/darwin-thread-multi-2level /Network/Library/Perl/5.12 /Library/Perl/Updates/5.12.5 /System/Library/Perl/5.12/darwin-thread-multi-2level /System/Library/Perl/5.12 /System/Library/Perl/Extras/5.12/darwin-thread-multi-2level /System/Library/Perl/Extras/5.12 .).
BEGIN failed--compilation aborted.
</code></pre>

<p>今回は上記の通り、DBD::mysqlがなかったので、cpanmでインストールした。</p>

<p>pt-online-schema-changeを入手する。</p>

<pre><code>$ wget percona.com/get/pt-online-schema-change
$ chmod a+x pt-online-schema-change
</code></pre>

<p>今回は以下の様な感じでテスト用のインスタンスを作った。意図せずv5.6になった…。</p>

<pre><code>$ rds-create-db-instance --db-instance-identifier sbtest --db-instance-class db.m1.small --db-name db_sbtest --engine MySQL --allocated-storage 10 --master-username sbtest_user --master-user-password sbtest_passwd
  DBINSTANCE  sbtest  db.m1.small  mysql  10  sbtest_user  creating  1  ****  n  5.6.13  general-public-license  y
        SECGROUP  default  active
        PARAMGRP  default.mysql5.6  in-sync
        OPTIONGROUP  default:mysql-5-6  in-sync
</code></pre>

<a name="RDS........................"></a>
<h2>RDSへの対応について</h2>

<p>チューニングを行っていない場合、Parameter Groupはデフォルトのままなので、pt-online-schemaを使うためには以下の対応を行う必要がある。</p>

<ul>
<li>メンテナンス用のパラメータグループを作る。(<a href="http://docs.aws.amazon.com/AmazonRDS/latest/CommandLineReference/CLIReference-cmd-CreateDBParameterGroup.html">rds-create-db-parameter-group</a>)</li>
<li>メンテナンス用のパラメータグループの設定を行う。<code>name=log_bin_trust_function_creators,value=true</code>を指定する。(<a href="http://docs.aws.amazon.com/AmazonRDS/latest/CommandLineReference/CLIReference-cmd-ModifyDBParameterGroup.html">rds-modify-db-parameter-group</a>)</li>
<li>メンテナンス対象のDBインスタンスのパラメータグループをメンテナンス用のものに変更する。(<a href="http://docs.aws.amazon.com/AmazonRDS/latest/CommandLineReference/CLIReference-cmd-ModifyDBInstance.html">rds-modify-db-instance</a>)</li>
</ul>


<p>コマンドで言うと、以下の様なことを行なう。</p>

<pre><code>$ rds-create-db-parameter-group --db-parameter-group-family mysql5.6 --db-parameter-group-name maintenace-pramas-group --description 'parameter group for maintenace '
DBPARAMETERGROUP  maintenace-pramas-group  mysql5.6  parameter group for maintenace
rds-modify-db-parameter-group --db-parameter-group-name maintenace-pramas-group --region us-east --parameters 'name=log_bin_trust_function_creators, value=true, method=immediate'
$ rds-modify-db-parameter-group --db-parameter-group-name maintenace-pramas-group --parameters 'name=log_bin_trust_function_creators,value=true,method=immediate'
DBPARAMETERGROUP  maintenace-pramas-group
$ rds-modify-db-instance --db-instance-identifier sbtest --db-parameter-group-name maintenace-pramas-group --apply-immediately true
DBINSTANCE  sbtest  2014-01-22T13:52:26.982Z  db.m1.small  mysql  10  sbtest_user  available  sbtest.cfscsg6f7tbd.us-east-1.rds.amazonaws.com  3306  us-east-1a  1  n  5.6.13  general-public-license  y
      SECGROUP  default  active
      PARAMGRP  maintenace-pramas-group  applying
      OPTIONGROUP  default:mysql-5-6  in-sync
$ rds-describe-db-instances sbtest
DBINSTANCE  sbtest  2014-01-22T13:52:26.982Z  db.m1.small  mysql  10  sbtest_user  available  sbtest.cfscsg6f7tbd.us-east-1.rds.amazonaws.com  3306  us-east-1a  1  n  5.6.13  general-public-license  y
      SECGROUP  default  active
      PARAMGRP  maintenace-pramas-group  pending-reboot
      OPTIONGROUP  default:mysql-5-6  in-sync
</code></pre>

<p><code>pending-reboot</code>と出ているので、インスタンスを再起動する。</p>

<pre><code>$ rds-reboot-db-instance sbtest
DBINSTANCE  sbtest  2014-01-22T13:52:26.982Z  db.m1.small  mysql  10  sbtest_user  rebooting  sbtest.cfscsg6f7tbd.us-east-1.rds.amazonaws.com  3306  us-east-1a  1  n  5.6.13  general-public-license  y
      SECGROUP  default  active
      PARAMGRP  maintenace-pramas-group  pending-reboot
      OPTIONGROUP  default:mysql-5-6  in-sync
$ rds-describe-db-instances sbtest
DBINSTANCE  sbtest  2014-01-22T13:52:26.982Z  db.m1.small  mysql  10  sbtest_user  rebooting  sbtest.cfscsg6f7tbd.us-east-1.rds.amazonaws.com  3306  us-east-1a  1  n  5.6.13  general-public-license  y
      SECGROUP  default  active
      PARAMGRP  maintenace-pramas-group  in-sync
      OPTIONGROUP  default:mysql-5-6  in-sync
</code></pre>

<p><code>in-sync</code>となっていることを確認する。</p>

<a name="L......"></a>
<h2>実行</h2>

<p>pt-online-schemaを実行する際に、alter文で列のrenameを行なうとき（あるいはchange columnを行なうとき？）には以下のログが出る。</p>

<pre><code>The tool should handle this correctly, but you should test it first because if it fails the renamed columns' data will be lost!  Specify --no-check-alter to disable this check and perform the --alter.
</code></pre>

<p>今回は<code>&ndash;alter=&lsquo;change column pad new_pad char(60),add column pad char(60)&rsquo;</code>という風に、列名の変更と変更前の列の再作成を行なうために実行の際には<code>&ndash;no-check-alter</code>を付与した。こんな感じでオプションに引数を与えておけばOK。</p>

<pre><code>./pt-online-schema-change --alter='change column pad new_pad char(60),add column pad char(60)' h=sbtest.cfscsg6f7tbd.us-east-1.rds.amazonaws.com,P=3306,D=db_sbtest,t=sbtest,u=sbtest_user,p=sbtest_passwd --statistics --recursion-method processlist --print --execute --no-check-alter
</code></pre>

<p>生のalter文との処理に比べて、さすがに時間はかかる。ただ、CPU利用率は抑えられるし、何よりオンラインでalter文を発行できるメリットは大きい。とはいえ、MySQL5.6からalterはオンラインに対応するようにはなっているので、MySQL5.5以前のバージョンを使っている場合は利用を検討する価値はあるように思う。</p>

<a name="L........."></a>
<h2>おまけ</h2>

<p>cpanmでDBD::mysqlをインストールしようとしたら、以下の様なエラーが出て失敗した。</p>

<pre><code>t/10connect.t ........................ Bailout called.  Further testing stopped:  ERROR: Access denied for user 'root'@'localhost' (using password: NO)
</code></pre>

<p>ログを調べると以下のように出ていた。</p>

<pre><code>You can also optionally set the user to run 'make test' with:

perl Makefile.PL --testuser=username
</code></pre>

<p>なので、rootでlocalhostのmysqlにアクセスできるようにするための設定を行ってあげればOK。</p>

<pre><code>$ sudo perl Makefile.PL --testuser=root --testpassword=root_password
Password:
I will use the following settings for compiling and testing:

  cflags        (mysql_config ) = -I/usr/local/Cellar/mysql/5.6.10/include  -Os -g -fno-strict-aliasing
  embedded      (mysql_config ) =
  ldflags       (mysql_config ) =
  libs          (mysql_config ) = -L/usr/local/Cellar/mysql/5.6.10/lib -lmysqlclient
  mysql_config  (guessed      ) = mysql_config
  nocatchstderr (default      ) = 0
  nofoundrows   (default      ) = 0
  ssl           (guessed      ) = 0
  testdb        (default      ) = test
  testhost      (default      ) =
  testpassword  (User's choice) = root_password
  testport      (default      ) =
  testsocket    (default      ) =
  testuser      (User's choice) = root

To change these settings, see 'perl Makefile.PL --help' and
'perldoc DBD::mysql::INSTALL'.

Using DBI 1.622 (for perl 5.016002 on darwin-thread-multi-2level) installed in /System/Library/Perl/Extras/5.16/darwin-thread-multi-2level/auto/DBI/
Writing Makefile for DBD::mysql
Writing MYMETA.yml and MYMETA.json
</code></pre>

<p>あとは<code>make &amp;&amp; make test &amp;&amp; sudo make install</code>しておけばOK。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Cluster Casual Talksに行ってきた]]></title>
    <link href="http://sgykfjsm.github.io/blog/2013/09/27/mysql-cluster-casual-talk/"/>
    <updated>2013-09-27T05:04:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2013/09/27/mysql-cluster-casual-talk</id>
    <content type="html"><![CDATA[<p>MySQL Casual Talkと勘違いしてたけど、とても勉強になった。
以下はメモ。</p>

<!--more-->


<a name="MySQL.Cluster......................5.6........................5.6............"></a>
<h3>MySQL Cluster大地に立つ！ 「5.6とは違うのだよ、5.6とは！」</h3>

<p>@RKajiyamaさん</p>

<p>MySQLクラスタとは</p>

<ul>
<li>MySQL Cluster

<ul>
<li>独立した製品</li>
<li>MySQLのクラスタリングのことではない</li>
<li>v7.3

<ul>
<li>MySQL Serverとは違う。共通点はあるけど。</li>
</ul>
</li>
<li>MySQL Serverとの最大の違いは分散型DBであること。

<ul>
<li>共有ディスクはいらない</li>
<li>メモリが豊富で性能の優れたディスクを持つサーバ</li>
</ul>
</li>
<li>全ノードがアクティブ</li>
<li>シェアードナッシング

<ul>
<li>共有ディスクは不要</li>
</ul>
</li>
<li>全オード多重化</li>
<li>ノードを増やすことで負荷分散と多重化を図ることが可能

<ul>
<li>多重化はRAID0と同じ</li>
</ul>
</li>
<li>アプリケーションレイヤから見るとACID KVSとして利用可能

<ul>
<li>MySQL Serverを経由せずにアプリケーションから直接Clusterにアクセスできる。</li>
<li>ACIDを維持しても20M updates sec</li>
</ul>
</li>
<li>主要な利用企業はzynga, NEC, at&amp;t, paypal, ericsson, cisco, vodafon, US Navyなど

<ul>
<li>PayPalは基盤をすべてMySQLで構築しているらしい</li>
</ul>
</li>
<li>NoSQLとしてのMySQL

<ul>
<li>アプリケーションからはNoSQLのように見えるが、内部的にはコンテナテーブルによりデータがテーブルや絡むとマッピングされて、内部的にはRDBとして動作する。</li>
</ul>
</li>
<li>Apps -> JPA -> Cluster JPA -> Cluster J -> JNI -> NDB API -> データレイヤがJavaのアクセス経路

<ul>
<li>ただしJOINなどの場合は自動的にJDBCに振り分けがされる。</li>
</ul>
</li>
</ul>
</li>
</ul>


<a name="MySQL.Cluster.........................................."></a>
<h3>MySQL Clusterをカジュアルに使ってみよう！</h3>

<p>@nippondanjiさん</p>

<p>MySQL Clusterとは！</p>

<ul>
<li>MySQLのストレージエンジンとして使える

<ul>
<li>create table hoge (&hellip;) engnie ndb;</li>
</ul>
</li>
<li>トランザクション対応</li>
<li>並列分散型のDB</li>
<li>HA機能</li>
<li>ハイパフォーマンス</li>
<li>コミュニティ版はGPLv2</li>
<li>アプリケーションとデータノードの間にSQLノードをぶら下げる

<ul>
<li>255ノードまでぶら下げることが可能</li>
<li>データノードは最大48ノード</li>
</ul>
</li>
<li>速いか？

<ul>
<li>１台の性能ではInnoDBのほうが↑

<ul>
<li>NDB APIは爆速</li>
</ul>
</li>
<li>ノードを並べてナンボ

<ul>
<li>データノード

<ul>
<li>負荷分散</li>
<li>データ量の増加</li>
</ul>
</li>
<li>SQLノード

<ul>
<li>SQL解析の負荷分散</li>
</ul>
</li>
</ul>
</li>
<li>ちょっとしか参照しない処理ではノードを増やしても性能は上がらない</li>
</ul>
</li>
<li>高可用性

<ul>
<li>SPOFの排除</li>
<li>HA機能搭載</li>
<li>遠隔地へのレプリケーション</li>
</ul>
</li>
<li>コモディティなハードウェアでも搭載可能</li>
<li>ノードは３種類

<ul>
<li>管理ノード</li>
<li>データノード</li>
<li>SQLノード/APIノード</li>
</ul>
</li>
<li>シェアードナッシング

<ul>
<li>同じノードグループ内でミラーリングし合う</li>
<li>ミラーの相手側が落ちたとしても相手のプライマリや自分の中にレプリケーションデータを作成する</li>
</ul>
</li>
<li>インストールのデモ

<ul>
<li>確かにカジュアルに使えそうにみえるが…</li>
</ul>
</li>
<li>パフォーマンス・チューニング

<ul>
<li>最新バージョンを使う！</li>
<li>バージョンが上がるほど高速化している</li>
<li>v6.2 → SQLノードからデータノードへの接続を複数可</li>
<li>V6.3 → スレッドのバインディング、TC選択のロジックを改善</li>
<li>v7.0 → データノードがマルチスレッド化、メッセージ通信の改善、データノードのオンライン拡張</li>
<li>v7.1 → ndbinfo, BLOBへのアクセス高速化</li>
<li>v7.2 → MySQL5.5、pushdown join、memcachedの追加</li>
<li>v7.3 → MysQL5.6 外部キー、NDB APIのボトルネック解消、Semi Joinの最適化</li>
</ul>
</li>
<li>データノード数は最大48台

<ul>
<li>主キーを使った検索は速い、スケールする</li>
<li>範囲検索（スキャン）は苦手、スケールしない（しづらい）

<ul>
<li>フェッチするレコード数が少ないと遅い</li>
<li>フェッチするレコード数が多いとデータノードで並列処理がされるので、思ったより速い</li>
</ul>
</li>
<li>ユーザ定義パーティションによりスキャンを克服する

<ul>
<li>外部キーを設定するイメージ</li>
<li>スキャンがスケール</li>
<li>特定のデータノードに問い合わせれば良くなるためJOINもスケールする</li>
</ul>
</li>
<li>レプリケーションによるスケールアウト

<ul>
<li>レプリケーション先をInnoDBとすることでスキャンもスケールさせることができる</li>
</ul>
</li>
</ul>
</li>
<li>MySQL Clusterはインメモリデータベースだけれども

<ul>
<li>データの永続性のために沢山のI/Oが発生する

<ul>
<li>REDOログ</li>
<li>LCP(local check point)</li>
</ul>
</li>
</ul>
</li>
<li>ディスク型テーブル

<ul>
<li>ディスクの性能に大きく影響する</li>
<li>ベンチマーク上はHDDを利用するとスケールしなくなる</li>
<li>インメモリ型だとCPUが貧弱でもスケールする</li>
</ul>
</li>
<li>BLOBは苦手

<ul>
<li>内部的にBLOB用のテーブルが作成される

<ul>
<li>JOINが増えるのと同じ</li>
<li>varcharで頑張ってみる。でもなるべく使わないほうが良い</li>
</ul>
</li>
</ul>
</li>
<li>NoSQLインターフェース

<ul>
<li>SQLよりも数段速い

<ul>
<li>NDB API</li>
<li>Cluster J</li>
<li>memcached</li>
<li>java用のバインディング</li>
</ul>
</li>
</ul>
</li>
<li>MySQL Clusterは以下の場合に向いている

<ul>
<li>更新をスケールしたい</li>
<li>HA機能が欲しい</li>
<li>超絶高速なJOINが欲しい</li>
<li>得意、不得意を踏まえて適切なスケールアウト戦略を選ぶべし</li>
<li>NoSQL APIが豊富</li>
</ul>
</li>
<li>管理ノードはSPOF？

<ul>
<li>管理ノードは２つ用意することが出来ない</li>
<li>管理ノードは落ちても動作には影響しない</li>
<li>SQLノードが管理ノードの代わりを果たす？←ちゃんと聞き取れなかった&hellip;</li>
</ul>
</li>
</ul>


<a name="MySQL.Cluster.....................................................................Version.7.3..............................................................."></a>
<h3>MySQL Clusterと丸４年の付き合いを振り返ってのよもやま話と、Version 7.3への期待（もっとユーザが増えるといいな～）</h3>

<p>@tsakuradaさん</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26575773" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/TakeshiSakurada/mcct20130926-tsakuradac" title="MCCT20130926 tsakuradac" target="_blank">MCCT20130926 tsakuradac</a> </strong> from <strong><a href="http://www.slideshare.net/TakeshiSakurada" target="_blank">Takeshi Sakurada</a></strong> </div></p>

<p>なぜMySQL Clusterを使うか？</p>

<ul>
<li>インメモリ型であること

<ul>
<li>確かに速いがioDrive + InnoDBの組み合わせでかなり高い性能がでるので、優位性は揺らぎつつ有るかも？</li>
</ul>
</li>
<li>コモディティなサーバでもOK

<ul>
<li>結局メモリが必要なので安価でOKとは限らない</li>
<li>スケールアウトが難しいケースはやはりある</li>
</ul>
</li>
<li>高可用性

<ul>
<li>今でも優位性を保っているが、ポイントを押さえておかないと無意味になる。</li>
</ul>
</li>
</ul>


<p>改めて主張したい優位点</p>

<ul>
<li>GPLv2</li>
<li>MySQL(InnoDB)との互換性がv7.3以降でかなり向上した</li>
</ul>


<p>導入 - どう使うか</p>

<ul>
<li>SQLノード、MGMノード、データノードの構成が設計のキモ</li>
<li>それぞれを単体にしても動くけど、SPOFを排除するためには各ノードを複数配置するのが普通</li>
<li>データ量が増えた

<ul>
<li>データノードのメモリを増やすか、データノードの数を増やす</li>
<li>スケールアウトを考えてデータノードを増やすようにしたほうが良い</li>
</ul>
</li>
<li>アクセス増えた

<ul>
<li>SQLノードを増やす</li>
</ul>
</li>
<li>高可用性を活かすためには

<ul>
<li>ハードウェア構成上SPOFが無い様に２重化する</li>
<li>多重化障害にどこまで対応するかは悩ましい</li>
<li>実行中のクエリをキャンセルされた時には、エラーをキャッチして後続処理を適切に作りこむ必要がある

<ul>
<li>条件に応じた適切な処理をアプリケーションに実装するのがキモ</li>
</ul>
</li>
</ul>
</li>
<li>InnoDBと同じ感覚でテーブル設計していいのか？

<ul>
<li>やってみるのが一番</li>
<li>いろんなかたちでベンチマークを取ってみる</li>
</ul>
</li>
<li>バッチ処理のことも考えてInnoDBと組み合わせたい

<ul>
<li>高潰瘍性のレベルがInnoDB側に引っ張られることになる</li>
<li>NDBとInnoDBはトランザクションの分離レベルが違うので、その点でも注意する必要がある。</li>
</ul>
</li>
</ul>


<p>運用 - 何が起きるか</p>

<p>ハマりどころ</p>

<ul>
<li>GCP Stop!

<ul>
<li>Global check point</li>
<li>これが無いと永続性が保たれなくなる</li>
<li>これが何らかの理由で停止されるとデータノードがシャットダウンされてしまう</li>
<li>一度のコミットにかかる時間が一定のしきい値を超過した場合にGCP Stopが発生してしまう。</li>
<li>アプリ側でコミットにかかる時間を把握してクエリを発行する必要がある</li>
<li>最新バージョンではこの閾値を無制限に指定できるので、それで逃げる必要がある。ただ、本当に以上が発生した場合にはDBが固まってしまうので、リスクとのトレードオフ。</li>
</ul>
</li>
<li>ローリングリスタート

<ul>
<li>NDBのパラメータ変更を反映するためにデータノードの再起動が必要になる場合がある。</li>
<li>再起動中にミラーリング相手が落ちてしまうと障害が発生してしまう。</li>
<li>データノードが保有するデータ量が多いと再起動に時間がかかるため、多重障害の発生確率が高まってしまう。</li>
<li>オンラインでのローリングリスタートはやはり怖い</li>
<li>リスタート中はDDL文が発行できないなどの仕様上の制約がある。</li>
<li>最新のバージョンでは起動も拘束しているが、メモリ上にデータを展開してインデックスの構築に時間がかかる。</li>
</ul>
</li>
<li>ボトルネックが見えづらい

<ul>
<li>vmstatやiostatでは見えないところでボトルネックが発生していることがある。</li>
<li>Slowログに主キーでのselectが出てくることがある。</li>
<li>見えづらいというよりかは、確認ポイントが多い

<ul>
<li>データノードは？</li>
<li>SQLノードは？</li>
<li>NWは？</li>
<li>ndbinfoは？</li>
</ul>
</li>
</ul>
</li>
<li>データのライフサイクルをどうするか？

<ul>
<li>メモリの節約のためにDELETE文を発行する必要があるが、DELETE文はやはりオソい</li>
<li>DELETE文で空いた領域はデータノードを再起動しない限りは同じテーブル内でしか再利用できない。DROP TABLEしちゃえば良いらしい。</li>
</ul>
</li>
<li>バックアップは良いけどリストアが…

<ul>
<li>NDBには専用のオンライン・バックアップ機能がある</li>
<li>100GBぐらいをリストアすると半日以上かかる</li>
</ul>
</li>
</ul>


<p>まとめ</p>

<ul>
<li>高可用性システムを構築する上でMysQL Clusterはいい選択</li>
<li>ただ色々考慮するポイントがある</li>
</ul>


<p>MySQL Cluster Auto Installerのデモ</p>

<ul>
<li>GUIでセットアップする Auto Installerがv7.3が付属するようになった</li>
<li>マルチホストサポート</li>
</ul>


<hr />

<p>うっかり間違えて参加したけど、とても勉強になるいい回だった。発表者はプレゼンなれしてるなーって感じでわかりやすかったし。<br>
MySQL Clusterは話を聞いてると確かにCasualに使えそうだけど、改めてCasualをアピールしてるってことは実際には結構運用が大変なんだろーなーということは想像がつく。けど、面白そうだしこうゆう製品を扱う経験はエンジニアなら一度はしたいところ。</p>
]]></content>
  </entry>
  
</feed>
