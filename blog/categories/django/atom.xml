<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: django | sgykfjsm.github.com]]></title>
  <link href="http://sgykfjsm.github.io/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://sgykfjsm.github.io/"/>
  <updated>2017-09-21T23:53:42+09:00</updated>
  <id>http://sgykfjsm.github.io/</id>
  <author>
    <name><![CDATA[sgykfjsm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DjangoをTango with Djangoで学ぶ - 1 -]]></title>
    <link href="http://sgykfjsm.github.io/blog/2017/09/07/djangowotango-with-djangodexue-bu-1/"/>
    <updated>2017-09-07T00:12:56+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2017/09/07/djangowotango-with-djangodexue-bu-1</id>
    <content type="html"><![CDATA[<p>仕事でDjangoアプリケーションを扱うことになったのでDjangoについて勉強を始めた。参考書として<a href="http://www.tangowithdjango.com/">Tango With Django</a>を購入した。古いバージョンなら無料で入手できるっぽいけど大して高価な本というわけでもないし購入したほうが良いかなと思って買った。</p>

<p>さて、最初は環境の準備を行い、それからViewの基本とURLマッピングについての学習だ。</p>

<!-- more -->


<a name="L......"></a>
<h1>準備</h1>

<p>これはTango With Djangoに書いてあるやり方ではなくて、いつも自分がPython環境を構築するときのやり方だ。要はDjangoを指定のPythonバージョンで動かせばよいわけだから、いつものやり方で良い。</p>

<a name="L..............."></a>
<h2>必要なもの</h2>

<p><a href="https://github.com/pyenv/pyenv">pyenv</a>と<a href="https://github.com/pyenv/pyenv-virtualenv">pyenv-virtualenv</a>がinstallされていること。</p>

<a name="L......"></a>
<h2>手順</h2>

<p>pyenvにバージョン3.5.3をインストールする。</p>

<pre><code>$ pyenv install 3.5.3
Downloading Python-3.5.3.tar.xz...
-&gt; https://www.python.org/ftp/python/3.5.3/Python-3.5.3.tar.xz
Installing Python-3.5.3...
Installed Python-3.5.3 to /Users/sgyk/.pyenv/versions/3.5.3
</code></pre>

<p>作業用Pythonの設定をする。</p>

<pre><code>$ eval "$(pyenv init -)"
$ eval "$(pyenv virtualenv-init -)"
$ pyenv virtualenv 3.5.3 tango-with-django-env
$ pyenv activate tango-with-django-env
$ python --version
Python 3.5.3
</code></pre>

<a name="Django...install................................."></a>
<h2>Djangoをinstallしてプロジェクトを作る</h2>

<pre><code>$ pip install django
# Confirm django is installed as expected
$ python
Python 3.5.3 (default, Sep  4 2017, 22:33:15)
[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import django
&gt;&gt;&gt; django.get_version()
'1.11.4'
&gt;&gt;&gt; exit()
# $ cd ${YOUR_WORKSPACE}
$ cd tango_with_django_project
$ django-admin.py startproject tango_with_django_project
$ cd tango_with_django_project/
$ ls -l
total 4
drwxr-xr-x 4 sgyk 136  9  4 22:40 ./
drwxr-xr-x 9 sgyk 306  9  4 22:40 ../
-rwxr-xr-x 1 sgyk 823  9  4 22:40 manage.py*
drwxr-xr-x 6 sgyk 204  9  4 22:40 tango_with_django_project/   # &lt;- project configuration directrory
</code></pre>

<p>ここまでで準備は完了。とりあえず起動してみる</p>

<pre><code>$ python manage.py runserver
Performing system checks...

System check identified no issues (0 silenced).

You have 13 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.

....
</code></pre>

<p>warningが出ているが、これはDBを使うようになるまで放置で良い。<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> にアクセスして&#8221;It worked!&ldquo;が表示されることを確認すること。</p>

<a name="L................................."></a>
<h2>アプリケーションの準備</h2>

<p>ここまではプロジェクトの準備。ここからはアプリケーションの準備を始める。今回はテキストに則ってrangoというアプリケーションを作成する。アプリケーションの準備は以下の通りにコマンドを叩けば良い。</p>

<pre><code>$ python manage.py startapp rango
</code></pre>

<p><code>startapp</code>コマンドはプロジェクトディレクトリのルートに新しいディレクトリを作成する。</p>

<pre><code>$ ls -l
total 16
drwxr-xr-x 6 sgyk   204  9  4 22:58 ./
drwxr-xr-x 9 sgyk   306  9  4 22:40 ../
-rw-r--r-- 1 sgyk 12288  9  4 22:52 db.sqlite3
-rwxr-xr-x 1 sgyk   823  9  4 22:40 manage.py*
drwxr-xr-x 9 sgyk   306  9  4 22:58 rango/
drwxr-xr-x 7 sgyk   238  9  4 22:52 tango_with_django_project/
</code></pre>

<p><code>db.sqlite3</code>と<code>rango</code>ディレクトリが作成されたことが確認できる。<code>rango</code>ディレクトリの中身は以下の通り。</p>

<pre><code>$ ls -l ./rango/
total 20
drwxr-xr-x 9 sgyk 306  9  4 22:58 ./
drwxr-xr-x 6 sgyk 204  9  4 22:58 ../
-rw-r--r-- 1 sgyk   0  9  4 22:58 __init__.py
-rw-r--r-- 1 sgyk  63  9  4 22:58 admin.py
-rw-r--r-- 1 sgyk  85  9  4 22:58 apps.py
drwxr-xr-x 3 sgyk 102  9  4 22:58 migrations/
-rw-r--r-- 1 sgyk  57  9  4 22:58 models.py
-rw-r--r-- 1 sgyk  60  9  4 22:58 tests.py
-rw-r--r-- 1 sgyk  63  9  4 22:58 views.py
</code></pre>

<p>Djangoの開発では主に<code>views.py</code>と<code>models.py</code>を扱う。Djangoのmodel, viewsそしてtemplatesがどのように関連しているかは <a href="https://docs.djangoproject.com/en/1.11/intro/overview/">https://docs.djangoproject.com/en/1.11/intro/overview/</a> を参照すると良い。</p>

<p>なお、このあたりで<code>git init</code>しておくと良い。</p>

<a name="L..............."></a>
<h2>最後の準備</h2>

<p>これでアプリケーションの準備ができたので開発を始めることができると思いきや、まだしなければならないことがある。それは、Djangoにこれから開発するアプリケーションについて教えてあげないといけない。具体的には<code>tango_with_django_project/settings.py</code>にこれから追加するアプリケーションの情報を追加しなければならない。</p>

<pre><code class="diff">$ git diff
diff --git a/tango_with_django_project/settings.py b/tango_with_django_project/settings.py
index 63c1c9a..8d38aa9 100644
--- a/tango_with_django_project/settings.py
+++ b/tango_with_django_project/settings.py
@@ -37,6 +37,7 @@ INSTALLED_APPS = [
     'django.contrib.sessions',
     'django.contrib.messages',
     'django.contrib.staticfiles',
+    'rango',
 ]

 MIDDLEWARE = [
</code></pre>

<p>上記を追加したら<code>python manage.py runserver</code>を実行し、先ほどと同じようにサーバーが起動することを確認する。</p>

<a name="View....................."></a>
<h1>Viewの開発の１歩目</h1>

<p>Viewの開発を始める。まずは既存のviews.pyを以下の様に書き換えてみる。</p>

<pre><code class="diff">$ git diff
diff --git a/rango/views.py b/rango/views.py
index 91ea44a..117afb3 100644
--- a/rango/views.py
+++ b/rango/views.py
@@ -1,3 +1,5 @@
-from django.shortcuts import render
+from django.http import HttpResponse

-# Create your views here.
+
+def index(request):
+    return HttpResponse("Rango says hey there partner!")
</code></pre>

<p>ここからわかることは、Viewの仕事は基本的に<code>HttpResponse</code>を返すことだ。</p>

<p><code>index</code>が受け取っている<code>request</code>とは簡単に言うとRequestオブジェクトである。この中に様々なリクエスト情報が含まれているが、ここでは使っていない。そのため、引数<code>request</code>を削除しても良いかと思うかもしれないが、これは残しておかないと次に設定するURLのマッピング処理に失敗するので、残しておくこと。</p>

<p>すでに触れたが、上記のviews.pyの修正だけでは、<code>index</code>の処理にアクセスすることはできない。なぜならば、Djangoに<code>index</code>へのアクセスするルートを教えていないからだ。このURLマッピング処理は以下の通りに行えば良い。</p>

<pre><code class="diff">$ git diff tango_with_django_project/urls.py
diff --git a/tango_with_django_project/urls.py b/tango_with_django_project/urls.py
index af5caa3..c385489 100644
--- a/tango_with_django_project/urls.py
+++ b/tango_with_django_project/urls.py
@@ -15,7 +15,9 @@ Including another URLconf
 """
 from django.conf.urls import url
 from django.contrib import admin
+from rango import views

 urlpatterns = [
+    url(r'^$', views.index, name='index'),
     url(r'^admin/', admin.site.urls),
 ]
</code></pre>

<p><code>url(r'^$', views.index, name='index')</code>が意味するのは、URLのルートにアクセスしたら(<code>r'^$'</code>), <code>views.index</code>にリクエスト情報を渡して処理をさせる、この処理の名前を<code>index</code>とする(<code>name='index'</code>)、ということだ。<code>name='index'</code>は一見すると無意味な設定に見えるかもしれないが、DjangoのWarningに使われたりするので、いざという時に重要な情報となる。また、Djangoの<a href="https://docs.djangoproject.com/en/1.11/topics/http/urls/#reverse-resolution-of-urls">Reverse URL Matching</a>にも利用される。よって、設定しておくのが良い。</p>

<a name="URL............................................."></a>
<h2>URLのマッピングに関するテクニック</h2>

<p>上述したようにURLを一つずつ設定していくことによって、URLとViewを対応付けることができる。しかし、設定したファイルは<code>tango_with_django_project</code>というプロジェクトの全体設定ファイルである。今は良いが、今後開発が進んでチームで開発するようになることを考えると、いつまでも全体設定ファイルを扱うことはあまり好ましくない。なぜならば、変更の衝突などが発生しうるからだ。これを避けるためには、以下の様にアプローチすれば良い。</p>

<ol>
<li>全体設定ファイルにはアプリケーションのURLのプレフィックスを設定する。</li>
<li>設定したプレフィックスに該当するURLが参照するURLマッピング設定ファイルをアプリケーションのディレクトリ以下に配置する。</li>
</ol>


<p>これにより、アプリケーションとURLマッピング設定ファイルを１：１対応させることができ、アプリケーション開発者は他のアプリケーション設定に関して気にしなくて良くなる。具体的には以下の様に設定すれば良い。</p>

<pre><code class="diff">$ git diff
diff --git a/tango_with_django_project/urls.py b/tango_with_django_project/urls.py
index c385489..85abbc4 100644
--- a/tango_with_django_project/urls.py
+++ b/tango_with_django_project/urls.py
@@ -15,9 +15,11 @@ Including another URLconf
 """
 from django.conf.urls import url
 from django.contrib import admin
+from django.conf.urls import include
 from rango import views

 urlpatterns = [
     url(r'^$', views.index, name='index'),
+    url(r'^rango/', include('rango.urls')),
     url(r'^admin/', admin.site.urls),
 ]
</code></pre>

<p><code>url(r'^rango/', include('rango.urls'))</code>の重要な部分は<code>include('rango.urls')</code>だ。これは<code>rango/</code>から始まるURLのマッピング処理を<code>rango.urls</code>に任せる、という意味になる。<code>rango.urls</code>とは言うまでもなく、rangoアプリケーションの下にある<code>urls</code>というモジュール（あるいは<code>rango/urls.py</code>と言い換えることもできる）のことだ。この設定に従い、rangoディレクトリに<code>urls.py</code>というファイルを作成する。<code>tango_with_django_project/urls.py</code>をコピペして作ればよい。具体的には以下のようになる。</p>

<pre><code class="python">$ cat rango/urls.py
from django.conf.urls import url

from rango import views

urlpatterns = [
    url(r'^$', views.index, name='rango_index'),
]
</code></pre>

<p>記述内容は先述したとおりなので、ここでは割愛する。重要なのは<code>r'^$'</code>だ。<code>include('rango.urls')</code>によってリクエスト情報が渡されるわけだが、<strong>マッチングするURLから<code>rango/</code>が削除される</strong>。例えば、<code>rango/my-page</code>というURLがリクエストされたとすると、<code>rango.urls</code>が処理するURLは<code>my-page/</code>となる。この点に注意すること。</p>
]]></content>
  </entry>
  
</feed>
