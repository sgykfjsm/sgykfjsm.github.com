<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: openssl | sgykfjsm.github.com]]></title>
  <link href="http://sgykfjsm.github.io/blog/categories/openssl/atom.xml" rel="self"/>
  <link href="http://sgykfjsm.github.io/"/>
  <updated>2017-09-26T01:32:46+09:00</updated>
  <id>http://sgykfjsm.github.io/</id>
  <author>
    <name><![CDATA[sgykfjsm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GoでSSL証明書の情報を取得したい]]></title>
    <link href="http://sgykfjsm.github.io/blog/2017/09/13/godesslzheng-ming-shu-falseqing-bao-woqu-de-sitai/"/>
    <updated>2017-09-13T23:49:31+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2017/09/13/godesslzheng-ming-shu-falseqing-bao-woqu-de-sitai</id>
    <content type="html"><![CDATA[<p>タイトルの通り。GoでSSL証明書の検証を行う簡単なコードを書く必要が出てきたので、それを実現するための検証の記録を残す。</p>

<p>ここでいう「検証」というのは、有効期限が現在より未来かどうかを調べるやり方を意味する。</p>

<!-- more -->


<a name="L......................................................"></a>
<h2>検証材料のため、自己発行証明書を作る</h2>

<p>自己発行証明書は以下のコマンドで簡単に発行できる。</p>

<pre><code class="shell">$ openssl req -x509 -nodes -newkey rsa:2048 -keyout server.rsa.key -out server.rsa.crt -days 3650 -batch
</code></pre>

<p>コマンドの詳細は割愛するけど、とりあえずコレで10年間利用できる（もちろん正当な証明書としては利用できない）証明書を発行することができる。</p>

<p>これを実行しても良いけど、せっかくなのでgopherっぽくやるなら、以下のような感じになる。</p>

<pre><code class="shell">$ go run $GOROOT/src/crypto/tls/generate_cert.go -host $(hostname)
2017/09/21 23:25:18 written cert.pem
2017/09/21 23:25:18 written key.pem
</code></pre>

<p>ログの通りにファイルが生成されている。</p>

<pre><code class="console">$ ls
total 24
drwxr-xr-x   5 sgyk  staff   170  9 21 23:48 ./
drwxr-xr-x  13 sgyk  staff   442  9 21 23:05 ../
-rw-r--r--   1 sgyk  staff  1099  9 21 23:25 cert.pem
-rw-------   1 sgyk  staff  1675  9 21 23:25 key.pem
</code></pre>

<p>念のために検証しておく。まずは鍵の確認。</p>

<pre><code class="console">$ openssl rsa -in key.pem -check -noout
RSA key ok
</code></pre>

<p>証明書の確認</p>

<pre><code class="console">$ openssl x509 -in ./cert.pem -text -noout
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            9c:4e:90:ec:b8:f2:ac:91:91:04:19:e3:2c:d0:cf:b6
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: O=Acme Co
        Validity
            Not Before: Sep 13 15:05:11 2017 GMT
            Not After : Sep 13 15:05:11 2018 GMT
(snip)
</code></pre>

<p>とりあえず大丈夫そう。</p>

<a name="L......"></a>
<h2>実践</h2>

<p>こんな記事を書いといてアレなんだけど、色々試行錯誤した結果、大変泥臭いやり方になった。というのも、有効期限(notAfterの日付)をスマートに取り出すことができなかった。GoのOpenSSLバインディングだと <a href="https://github.com/spacemonkeygo/openssl">https://github.com/spacemonkeygo/openssl</a> が良さそうだけど、これだと取り出される情報に日付が含まれていなかった。</p>

<p>ということで、結局、以下のようにシェルコマンドで<code>notAfter</code>の日付を取り出して整形するというやり方になった。</p>

<p>シェルで表現するとこうなる。</p>

<pre><code class="shell"># $ openssl x509 -in ./cert.pem -noout -enddate
# notAfter=Sep 21 14:25:18 2018 GMT
$ openssl x509 -in ./cert.pem -noout -enddate | cut -d'=' -f2
Sep 21 14:25:18 2018 GMT
</code></pre>

<p>これと同じことをGoでやると、だいたいこうなる</p>

<pre><code class="go">package main

import (
    "bytes"
    "fmt"
    "log"
    "os/exec"
    "strings"
    "time"
)

func main() {
    line := strings.Split("openssl x509 -in ./cert.pem -noout -enddate", " ")
    cmd := exec.Command(line[0], line[1:]...)
    out, err := cmd.CombinedOutput()
    if err != nil {
        log.Fatal(err)
    }
    out = bytes.Trim(out, "notAfter=")
    out = bytes.TrimSpace(out)

    const layout = "Jan 2 15:04:05 2006 MST"
    notAfter, err := time.Parse(layout, string(out))
    if err != nil {
        log.Fatal(err)
    }

    fmt.Println("notAfter is", notAfter)
    if notAfter.After(time.Now()) {
        fmt.Println("Certification is valid")
    } else {
        fmt.Println("Certification is invalid")
    }
}
</code></pre>

<p>うーん長い。果たしてコレはどうなのか…でもまぁとりあえずはコレで目的は達成できるので、まぁ良しとしよう。</p>

<a name="L......"></a>
<h1>参考</h1>

<ul>
<li><a href="https://www.sslshopper.com/article-most-common-openssl-commands.html">https://www.sslshopper.com/article-most-common-openssl-commands.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
