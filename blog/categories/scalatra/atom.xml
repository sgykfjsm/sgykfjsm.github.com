<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scalatra | sgykfjsm.github.com]]></title>
  <link href="http://sgykfjsm.github.io/blog/categories/scalatra/atom.xml" rel="self"/>
  <link href="http://sgykfjsm.github.io/"/>
  <updated>2015-03-16T03:40:50+09:00</updated>
  <id>http://sgykfjsm.github.io/</id>
  <author>
    <name><![CDATA[sgykfjsm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scalatraでいろいろやる その３]]></title>
    <link href="http://sgykfjsm.github.io/blog/2013/03/17/scalatra-tutorial-003/"/>
    <updated>2013-03-17T23:37:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2013/03/17/scalatra-tutorial-003</id>
    <content type="html"><![CDATA[<p>今までServlet内にベタ書きしていたHTMLを外出しする。</p>

<!-- more -->


<p>Scalatraの場合は<a href="http://scalate.fusesource.org/index.html">Scalate</a>を導入することで<a href="http://scalate.fusesource.org/documentation/user-guide.html#Template_Languages">以下のテンプレートエンジン</a>を使うことができる。</p>

<ul>
<li><a href="http://scalate.fusesource.org/documentation/ssp-reference.html">Ssp (Scala Server Pages)</a>
<a href="http://velocity.apache.org/">Verocity</a>とかJSPみたいな記述が可能。他のテンプレートエンジンとくらべて一番HTMLっぽい。</li>
<li><a href="http://scalate.fusesource.org/documentation/scaml-reference.html">Scaml (Scala Markup Language)</a>
<a href="http://haml.info/">Haml</a>のScala版。</li>
<li><a href="http://scalate.fusesource.org/documentation/jade.html">Jade</a>
Scamlに似てるけど変数に%シンボルがつかないのでちょっと読みやすい。</li>
<li><a href="http://scalate.fusesource.org/documentation/mustache.html">Mustache</a>
本家は<a href="http://mustache.github.com/">こちら</a>。実際に使ってなのでよくわかってないが、テンプレート内には制御文を入れないで、テンプレートに値を渡すServlet内でロジックを記述する形式っぽい。</li>
</ul>


<a name="L....................."></a>
<h2>基本的な使い方</h2>

<p>これらのテンプレートエンジンを使うためにはServletに<code>ScalatraSupport</code>をmix inする必要がある。</p>

<pre><code class="scala">class MyFirstScalatraServlet extends ScalatraTestStack with ScalateSupport {
</code></pre>

<p>例えばsspを使いたい場合は以下のようにする。</p>

<pre><code class="scala">get("/") {
  contentType="text/html"
  ssp("index.ssp")
}
</code></pre>

<p><code>ssp(&ldquo;index.ssp&rdquo;)</code>は<code>src/main/webapp/WEB-INF/templates/views/index.ssp</code>を指している。<br>
また、ベースのレイアウトとなるのは、<code>src/main/webapp/WEB-INF/templates/layouts/defaluts.ssp</code>となる。<br>
レイアウトファイルではServletが返すレスポンスボディを受け取るように記述しなければならない。</p>

<pre><code class="scala">&lt;%@ val body: String %&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;Scaltra Sample&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
  &lt;%= unescape(body) %&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p><code>uneascape</code>は出力するHTMLをエスケープしないようにする。これをエスケープするとHTML文がそのままでるので、注意。</p>

<a name="L................................."></a>
<h2>テンプレートに値を渡す</h2>

<p>Servletからテンプレートに値を渡したいことはよくあることで、Scalateでは以下のようにやれば良い。</p>

<pre><code class="scala">get("/get/:param") {
  contentType="text/html"
  ssp("get/param.ssp", "param" -&gt; params("param"))
}
</code></pre>

<p>第2引数以降に<code>&ldquo;テンプレート内で使う変数名&rdquo; -> &ldquo;割り当てたい値&rdquo;</code>のようにすれば良い。</p>

<p>View側は以下のようになる。</p>

<p>&#8220;`html
&lt;%@ val param: String %></p>

<h1>Scalatra POST Tutorial</h1>


<p><p>You submitted: &lt;%= param %></p>
<hr/>
<a href="http://sgykfjsm.github.io/">Beck To Index</a>
&#8220;`</p>

<p>一行目でServletから受け取る値を宣言して、それを<code>&lt;%= 変数名 %></code>で使用する。</p>

<a name="L.........................................."></a>
<h2>コンパイルされるとどうなるか</h2>

<p>テンプレートのViewファイルはコンパイルされるとどうなるかは<code>target/scala-2.10/src_managed/main/scalate/templates/views</code>を見ると良い。例えば、上記で変数を受け取ったテンプレートの場合だと以下のようになる。</p>

<pre><code class="scala">/* NOTE this file is autogenerated by Scalate : see http://scalate.fusesource.org/ */
package templates.views.post

object $_scalate_$param_ssp {
  def $_scalate_$render($_scalate_$_context: _root_.org.fusesource.scalate.RenderContext): Unit = {
    ;{
      val context: _root_.org.fusesource.scalate.RenderContext = $_scalate_$_context.attribute("context")
      import context._


      ;{
        val param: String = $_scalate_$_context.attribute("param")
        $_scalate_$_context &lt;&lt; ( "&lt;h1&gt;Scalatra POST Tutorial&lt;/h1&gt;\n&lt;p&gt;You submitted: " );
        $_scalate_$_context &lt;&lt;&lt; (          param
 );
        $_scalate_$_context &lt;&lt; ( "&lt;/p&gt;\n&lt;hr/&gt;\n&lt;a href=\"/\"&gt;Beck To Index&lt;/a&gt;\n" );
      }
    }
  }
}


class $_scalate_$param_ssp extends _root_.org.fusesource.scalate.Template {
  def render(context: _root_.org.fusesource.scalate.RenderContext): Unit = $_scalate_$param_ssp.$_scalate_$render(context)
}
</code></pre>

<p>コンパイルされているのでちょっと見にくいが、Servletから受け取った値を<code>$_scalate_$_context.attribute(&ldquo;param&rdquo;)</code>で取り出して、あとは記述されたHTMLなどと一緒に<code>$_scalate_$_context</code>に流し込んでいる様子が見て取れる。</p>

<a name="L.................."></a>
<h2>制御文を使う</h2>

<p>ここから先はSspのお話。</p>

<p>Sspでは<code>${}</code>か<code>&lt;%= %></code>内に書かれたコードが評価されて出力される。加えて、Velocity形式として<code>#{}</code>による制御文もサポートしており、いわゆるifやforももちろん使えて、一般的なテンプレートエンジンと同じ使い勝手を持っている。<br>
以下Sspと出力されるHTMLコードを比較する。</p>

<pre><code class="scala">&lt;p&gt;&lt;%= List("hello,", "World!").mkString(" ") %&gt;&lt;/p&gt;
&lt;p&gt;#{
    import java.util.Date
    val now = new Date
    List("hello,", "Ssp on Scalate!").mkString(" ")
}#&lt;/p&gt;
&lt;p&gt;the time is ${now}&lt;/p&gt;
&lt;p&gt;${ "1 + 2 =" + (1+2)}&lt;/p&gt;
&lt;%
    var foo = "this"
    foo +=  " is"
    foo +=  " is a pen."
%&gt;
&lt;p&gt;${foo}&lt;/p&gt;
</code></pre>

<pre><code class="html">&lt;p&gt;hello, World!&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;the time is 2013年3月17日&lt;/p&gt;
&lt;p&gt;1 + 2 =3&lt;/p&gt;
&lt;p&gt;this is is a pen.&lt;/p&gt;
</code></pre>

<p>Scalaのコードは<code>&lt;%= %></code>または<code>${}</code>あるいは<code>#{}</code>内に記述する。<br>
しかし、出力されるHTMLをみてみると、標準出力されるものはHTMLに出力されていないことがわかる。<br>
コンパイルされたソースを見てみよう。</p>

<pre><code class="scala">object $_scalate_$Ssp_ssp {
  def $_scalate_$render($_scalate_$_context: _root_.org.fusesource.scalate.RenderContext): Unit = {
    ;{
      val context: _root_.org.fusesource.scalate.RenderContext = $_scalate_$_context.attribute("context")
      import context._


      $_scalate_$_context &lt;&lt; ( "&lt;p&gt;" );
      $_scalate_$_context &lt;&lt;&lt; (        List("hello, ", "World!").mkString(" ")
 );
      $_scalate_$_context &lt;&lt; ( "&lt;/p&gt;\n&lt;p&gt;" );

    import java.util.Date
    val now = new Date
    List("hello,", "Ssp on Scalate!").mkString(" ")


      $_scalate_$_context &lt;&lt; ( "&lt;/p&gt;\n&lt;p&gt;the time is " );
      $_scalate_$_context &lt;&lt;&lt; (       now
 );
      $_scalate_$_context &lt;&lt; ( "&lt;/p&gt;\n&lt;p&gt;" );
      $_scalate_$_context &lt;&lt;&lt; (        "1 + 2 =" + (1+2)
 );
      $_scalate_$_context &lt;&lt; ( "&lt;/p&gt;\n\n" );
</code></pre>

<p>後半は割愛しているが、<code>#{}</code>に記述したコードは<code>$_scalate_$_context</code>に流し込まれていないことがわかる。<br>
どうやら<code>#{}</code>に記述したコードはimport文や変数の格納などに使うようだ。</p>

<p>続いて、forとかif文。</p>

<pre><code class="scala">&lt;ul&gt;
#for(i &lt;- 1 to 15)
    #if (i % 15 == 0)
    &lt;li&gt;${i}: FIzzBuzz&lt;/li&gt;
    #elseif (i % 5 == 0)
    &lt;li&gt;${i}: Buzz&lt;/li&gt;
    #elseif (i % 3 == 0)
    &lt;li&gt;${i}: Fizz&lt;/li&gt;
    #else
    &lt;li&gt;${i}: -&lt;/li&gt;
    #end
#end
&lt;/ul&gt;

&lt;ul&gt;
    #for(i &lt;- 1 to 5; j &lt;- 1 to 2)
    &lt;li&gt;(${i}, ${j})&lt;/li&gt;
    #end
&lt;/ul&gt;
</code></pre>

<pre><code class="html">&lt;ul&gt;
    &lt;li&gt;1: -&lt;/li&gt;
    &lt;li&gt;2: -&lt;/li&gt;
    &lt;li&gt;3: Fizz&lt;/li&gt;
    &lt;li&gt;4: -&lt;/li&gt;
    &lt;li&gt;5: Buzz&lt;/li&gt;
    &lt;li&gt;6: Fizz&lt;/li&gt;
    &lt;li&gt;7: -&lt;/li&gt;
    &lt;li&gt;8: -&lt;/li&gt;
    &lt;li&gt;9: Fizz&lt;/li&gt;
    &lt;li&gt;10: Buzz&lt;/li&gt;
    &lt;li&gt;11: -&lt;/li&gt;
    &lt;li&gt;12: Fizz&lt;/li&gt;
    &lt;li&gt;13: -&lt;/li&gt;
    &lt;li&gt;14: -&lt;/li&gt;
    &lt;li&gt;15: FIzzBuzz&lt;/li&gt;
    &lt;/ul&gt;

&lt;ul&gt;
        &lt;li&gt;(1, 1)&lt;/li&gt;
        &lt;li&gt;(1, 2)&lt;/li&gt;
        &lt;li&gt;(2, 1)&lt;/li&gt;
        &lt;li&gt;(2, 2)&lt;/li&gt;
        &lt;li&gt;(3, 1)&lt;/li&gt;
        &lt;li&gt;(3, 2)&lt;/li&gt;
        &lt;li&gt;(4, 1)&lt;/li&gt;
        &lt;li&gt;(4, 2)&lt;/li&gt;
        &lt;li&gt;(5, 1)&lt;/li&gt;
        &lt;li&gt;(5, 2)&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p><hr /></p>

<p>ざっとだが、Scalatraでのテンプレートエンジンの使い方を概観した。<br>
リファレンス見ながら以上を見てきたわけだが、Scalateというか、テンプレート側にもう少し機能があるかなぁとは思ったが、そんなことはなかった…。<a href="http://twig.sensiolabs.org/">Twig</a>ぐらいは機能を持ってるかと思ったんだけどなぁ。調べ方が足りなかったかな？<br>とはいえ、他のテンプレートエンジンはまた別の機能を持っているを持っていたりするので、用途に合わせて使い分けていけばいいのだろうと思う。</p>

<p>まぁとりあえずということで、次はDBとの接続を試すことにする。試すならSlickかなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scalatraでいろいろやる その２]]></title>
    <link href="http://sgykfjsm.github.io/blog/2013/02/26/scalatra-tutorial-002/"/>
    <updated>2013-02-26T00:40:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2013/02/26/scalatra-tutorial-002</id>
    <content type="html"><![CDATA[<p><a href="http://sgykfjsm.github.com/blog/2013/02/22/scalatra-tutorial-001/">前回</a>ので簡単な環境設定を終えたので、今回は簡単にGET/POSTを試す</p>

<!-- more -->


<a name="ROUTING"></a>
<h3>ROUTING</h3>

<p>まずは以下のような感じにする。</p>

<pre><code class="scala">get("/") {
  &lt;html&gt;this is index&lt;/html&gt;
}
get("/get") {
  &lt;html&gt;this is submit by get method test&lt;/html&gt;
}

get("/get/:param") {
  &lt;html&gt;this is get prameter test&lt;/html&gt;
}

get("/post") {
  &lt;html&gt;this is submit by post method test&lt;/html&gt;
}

post("/post") {
  &lt;html&gt;this is post prameter test&lt;/html&gt;
}
</code></pre>

<p>パスの前に付いている<code>get</code>や<code>post</code>はHTTPメソッドに対応している。</p>

<a name="ACTION...VIEW"></a>
<h3>ACTION + VIEW</h3>

<p>今回はまだテンプレートエンジンを採用していないので、とりあえずということでインラインでアクションの部分やHTMLを書いていく。<br/>長くなるので、一部を抜粋する形で解説を入れる。</p>

<pre><code class="scala">  get("/get") {
    params.get("param") match {
      case Some(x) =&gt; redirect("/get/" + x)
      case None =&gt;
        contentType="text/html"
        &lt;html&gt;
          &lt;body&gt;
            &lt;h1&gt;Scalatra GET Tutorial&lt;/h1&gt;
            &lt;form action="./get" method="get" &gt;
              &lt;input type="text" name="param" value="" /&gt;
              &lt;input type="submit" value="送信" /&gt;
            &lt;/form&gt;
            &lt;hr/&gt;
            &lt;a href="http://sgykfjsm.github.io/"&gt;Beck To Index&lt;/a&gt;
          &lt;/body&gt;
        &lt;/html&gt;
    }
  }

  get("/get/:param") {
    contentType="text/html"
    &lt;html&gt;
      &lt;body&gt;
        &lt;h1&gt;Scalatra GET Tutorial&lt;/h1&gt;
        &lt;p&gt;You submitted: {params("param")}&lt;/p&gt;
        &lt;hr/&gt;
        &lt;a href="http://sgykfjsm.github.io/"&gt;Beck To Index&lt;/a&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  }
</code></pre>

<p>中身のHTML自体はどうでもいいと思う。
ここでのポイントは以下の２つ。</p>

<ul>
<li><code>/get</code>でのパターンマッチをしていること。</li>
<li><code>/get/:param</code>でのパラメータを受け取るようにしていること。</li>
</ul>


<a name="L.........................................."></a>
<h4>パターンマッチによる振り分け</h4>

<pre><code class="scala">    params.get("param") match {
      case Some(x) =&gt; redirect("/get/" + x)
      case None =&gt; { ... }
</code></pre>

<p>パラメータ名<code>param</code>があるかをチェックして、なければそのままHTMLをレンダリング、あれば<code>/get/:param</code>にリダイレクトさせている。<br/><code>get(&ldquo;/get/:param&rdquo;)</code>では<code>params</code>でパラメータ名を指定して値を取得している。</p>

<p>postの場合はすでにメソッドで分かれているので、このようなパターンマッチは必要ない。</p>

<a name="L........."></a>
<h2>まとめ</h2>

<ul>
<li>HTTPメソッドに応じて、<code>get(&ldquo;/path&rdquo;)</code>などでルーティングを行うことができる。もちろん<code>PUT</code>や<code>DELETE</code>にも対応している。</li>
<li>パラメータの有無でルーティングの振り分けを行いたい場合はパターンマッチを使えば良い。</li>
<li>同じURLでもHTTPメソッドが異なれば自動的に振り分けができる。</li>
</ul>


<p>ここまでのソースコードを<a href="https://gist.github.com/sgykfjsm/5030812">gist</a>にあげた。</p>

<a name="L......"></a>
<h2>宿題</h2>

<ul>
<li><code>/get/</code>のようなURLでアクセスすると404エラーとなる。その場合の対処法。</li>
</ul>


<hr/>


<p>というわけで、とても簡単にだけどGET/POSTのやり方を確認した。<br />正直このエントリが必要だったかどうか怪しいぐらいの内容だけど、今は手探り状態で色々確認しているので、多少内容がアレでも目をつむる。もっといいやり方があれば、随時反映していく方針で。次はテンプレートエンジンを適用する方法を確認する予定。見た目が良くないとつまらんので。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scalatraでいろいろやる その１]]></title>
    <link href="http://sgykfjsm.github.io/blog/2013/02/22/scalatra-tutorial-001/"/>
    <updated>2013-02-22T00:08:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2013/02/22/scalatra-tutorial-001</id>
    <content type="html"><![CDATA[<a name="Set.up"></a>
<h2>Set up</h2>

<p>Scaltraをインストールする前に以下の4つがインストールされていることを確認する。</p>

<ol>
<li>JDK</li>
<li>SBT</li>
<li>conscript</li>
<li>giter8</li>
</ol>


<!-- more -->


<a name="JDK"></a>
<h3>JDK</h3>

<p>いつものコマンドで確認。</p>

<pre>[sgyk@fujishima] 13-02-21 22:48:43 ~/local/tmp
$ java -version
java version "1.7.0_15"
Java(TM) SE Runtime Environment (build 1.7.0_15-b03)
Java HotSpot(TM) 64-Bit Server VM (build 23.7-b01, mixed mode)</pre>


<p>JDKが入ってなければ、<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java SE Development Kit 7 Downloads</a>からダウンロードして入れておく。</p>

<a name="SBT"></a>
<h3>SBT</h3>

<p>Scalaやってれば入ってるはず。自分の場合は起動してみたらdeprecatedって言われた。</p>

<pre>
[sgyk@fujishima] 13-02-21 22:34:01 ~
$ sbt
[warn] Alternative project directory .sbt (/Users/sgyk/.sbt) has been deprecated since sbt 0.12.0.
[warn]   Please use the standard location: /Users/sgyk/project
[info] Loading project definition from /Users/sgyk/.sbt
[info] Set current project to default-bf7818 (in build file:/Users/sgyk/)
</pre>


<p>のでbrewで入れなおした。</p>

<pre>sgyk@fujishima] 13-02-21 22:34:44 ~
$ brew uninstall sbt
Uninstalling /usr/local/Cellar/sbt/0.12.1...
[sgyk@fujishima] 13-02-21 22:34:51 ~
$ brew install sbt
==> Downloading http://typesafe.artifactoryonline.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/0.12.2/sbt-launch.jar
######################################################################## 100.0%
==> Caveats
You can use $SBT_OPTS to pass additional JVM options to SBT.
For convenience, this can specified in `~/.sbtconfig`.

For example:
    SBT_OPTS="-XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M"
==> Summary
🍺  /usr/local/Cellar/sbt/0.12.2: 3 files, 1.1M, built in 9 seconds</pre>


<a name="Conscript"></a>
<h3>Conscript</h3>

<p><a href="https://github.com/n8han/conscript">Conscript</a>はScalaとかその関連ツールをインストールしたりアップデートするツールらしい。</p>

<blockquote><ul>
<li>Queries a github project for launch configurations</li>
<li>Writes these to your local filesystem, with a personalized boot path</li>
<li>Creates scripts to execute the launch configurations</li>
</ul>
</blockquote>

<p><br>で、このあとにインストールするgiter8がこれに依存してるのでインストールする必要がある。</p>

<p><code>curl <a href="https://raw.github.com/n8han/conscript/master/setup.sh">https://raw.github.com/n8han/conscript/master/setup.sh</a> | sh</code>でインストールすればOK。</p>

<a name="giter8"></a>
<h3>giter8</h3>

<p>giter8については、<a href="http://blog.twiwt.org/e/f12c0f">ここ</a>を読めば、色々書いているけど、要はテンプレートを作ってれるツールらしい。</p>

<blockquote><p>Giter8 は github 上に公開されたテンプレートからアプリケーションのひな形を作成するコマンドラインツールだ。 Scala で実装されており、 sbt のランチャー を使って起動するが、様々な用途に使える。</p></blockquote>

<p>とりあえず <code>cs n8han/giter8</code>でインストール。<br />なんか色々落としてくるので、ちょっと時間がかかる。無事にインストールができたら確認。</p>

<pre>[sgyk@fujishima] 13-02-21 22:49:13 ~
$ which g8
/Users/sgyk/bin/g8
</pre>


<a name="first.project"></a>
<h2>first project</h2>

<p>そんなこんなセットアップが終わったら、早速Scalatraのプロジェクトを作る。</p>

<a name="Build.Project"></a>
<h3>Build Project</h3>

<p><code>g8 scalatra/scalatra-sbt </code>を<em>プロジェクトを作りたいディレクトリ位置</em>で実行する。</p>

<pre>[sgyk@fujishima] 13-02-21 22:56:51 ~/local/script/scala
$ g8 scalatra/scalatra-sbt
organization [com.example]: com.sgykfjsm
package [com.example.app]: com.sgykfjsm.app
name [My Scalatra Web App]: Scalatra Test
scalatra_version [2.2.0]:
servlet_name [MyScalatraServlet]: MyFirstScalatraServlet
scala_version [2.10.0]:
version [0.1.0-SNAPSHOT]:

Template applied in ./scalatra-test
</pre>


<p>色々聞かれるけど適当に答えておけば良い。未入力部分は[]部分のデフォルトが適用されるんだと思う。</p>

<p>出来上がったプロジェクトに入ると以下の様な構成になっている。</p>

<pre>[sgyk@fujishima] 13-02-21 22:58:06 ~/local/script/scala
$ cd scalatra-test/
[sgyk@fujishima] 13-02-21 22:58:12 ~/local/script/scala/scalatra-test
$ ls -l
total 48
drwxr-xr-x   7 sgyk  staff    238  2 21 22:57 .
drwxr-xr-x  20 sgyk  staff    680  2 21 22:58 ..
-rw-r--r--   1 sgyk  staff    756  2 21 22:57 .gitignore
-rw-r--r--   1 sgyk  staff    224  2 21 22:57 README.md
drwxr-xr-x   5 sgyk  staff    170  2 21 22:57 project
-rw-r--r--   1 sgyk  staff  14321  2 21 22:57 sbt
drwxr-xr-x   4 sgyk  staff    136  2 21 22:57 src</pre>


<p>色々な依存関係を開発前に解決しておきたいので、sbtに実行権限をつけて、sbtを実行しておく。<br />ここでも時間がちょっとかかるので、しばし待つこと。回線が細いと大変かもしれない。</p>

<p>sbtが無事に起動したら、プロンプトがそのまま生きているので、試しにScalatraを起動してみる。</p>

<pre>> container:start
[info] Generating /Users/sgyk/local/script/scala/scalatra-test/target/scala-2.10/resource_managed/main/rebel.xml.
[info] Compiling Templates in Template Directory: /Users/sgyk/local/script/scala/scalatra-test/src/main/webapp/WEB-INF/templates
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
[info] Compiling 5 Scala sources to /Users/sgyk/local/script/scala/scalatra-test/target/scala-2.10/classes...
[info] jetty-8.1.8.v20121106
[info] NO JSP Support for /, did not find org.apache.jasper.servlet.JspServlet
Null identity service, trying login service: null
Finding identity service: null
[info] started o.e.j.w.WebAppContext{/,[file:/Users/sgyk/local/script/scala/scalatra-test/src/main/webapp/]}
[info] started o.e.j.w.WebAppContext{/,[file:/Users/sgyk/local/script/scala/scalatra-test/src/main/webapp/]}
23:11:49.785 [pool-6-thread-5] INFO  o.scalatra.servlet.ScalatraListener - Initializing life cycle class: ScalatraBootstrap
[info] started o.e.j.w.WebAppContext{/,[file:/Users/sgyk/local/script/scala/scalatra-test/src/main/webapp/]}
23:11:50.061 [pool-6-thread-5] INFO  o.f.s.servlet.ServletTemplateEngine - Scalate template engine using working directory: /var/folders/9_/ggs_d8vd48z5ht76s3cwc7qr0000gn/T/scalate-7636222796467281743-workdir
[info] Started SelectChannelConnector@0.0.0.0:8080
[success] Total time: 13 s, completed 2013/02/21 23:11:50</pre>


<p>途中になんか失敗してるけど、まぁ気にしない。 <a href="http://localhost:8080">http://localhost:8080</a> にアクセスしてみると、以下の様な画面が表示されるはず。
<img src="https://dl.dropbox.com/s/tw6w2o3i0y07vt0/2013-02-21%2023.15.45.png?m" alt="screen shot" /></p>

<a name="sbt-idea"></a>
<h3>sbt-idea</h3>

<p>ここまででも結構時間かかってる…。僕はScalaはいつもIntelliJ IDEAで開発してるので、以下のコードを<code>project/plugins.sbt</code>に追加して、それ用のプラグインもインストールしておく。</p>

<pre>addSbtPlugin("com.github.mpeltonen" % "sbt-idea" % "1.2.0")</pre>


<p>で、またsbtを起動して<code>gen-idea</code>を実行しておく。</p>

<p>締めに<code>git init</code>でもしとけばいいんじゃないでしょうか。<br />このあとは簡単なアプリケーションを作ってみる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scalatraについて調べた]]></title>
    <link href="http://sgykfjsm.github.io/blog/2013/02/20/scalatra-introduction/"/>
    <updated>2013-02-20T23:19:00+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2013/02/20/scalatra-introduction</id>
    <content type="html"><![CDATA[<p>最近、PHPの<a href="http://silex.sensiolabs.org/">Silex</a>を再び触り始めたこともあって、Scalaのマイクロフレームワークをちょっと探してみたら、<a href="http://www.scalatra.org/">Scalatra</a>というものを見つけた。</p>

<blockquote><p>Scalatra is a simple, accessible and free web micro-framework.</p>

<p>It combines the power of the JVM with the beauty and brevity of Scala, helping you quickly build high-performance web sites and APIs.</p></blockquote>

<!-- more -->


<a name="Scalatra........."></a>
<h2>Scalatraの特徴</h2>

<p>InfoQの記事<a href="http://www.infoq.com/jp/news/2010/10/scalatra">&ldquo;Scalatra: Sinatraに似たScalaのウェブフレームワーク&rdquo;</a>および公式の&#8221;Why would you want to use Scalatra?&ldquo;より。超訳。</p>

<ul>
<li>RubyのSinatraの原則を踏襲している。</li>
<li>マイクロフレームワーク。</li>
<li>Restfulでステートレス。</li>
<li><a href="http://bbc.co.uk/">BBC</a>とか<a href="http://www.linkedin.com/">LinkedIn</a>、<a href="http://www.guardian.co.uk/">Guardin newspaper</a>とかで使われてるらしい。</li>
<li>手軽にハイ・パフォーマンスでスケーラブルなHTTP APIをWeb用やモバイル用に作れるらしい。</li>
<li><a href="http://backbonejs.org/">backbone.js</a>とか<a href="http://emberjs.com/">ember.js</a>とか<a href="http://angularjs.org/">angular.js</a>とかと相性が良いらしい。</li>
<li><a href="http://www.scala-lang.org/">Scala</a>を学ぶのにいいんじゃない？</li>
<li>16コアをフルに使うことができるので、<a href="http://akka.io/">Akka Actors</a>を楽に使えるよ。</li>
</ul>


<p>後は<a href="http://www.scalatra.org/2.2/guides/scalatra-philosophy.html">Scalatra&rsquo;s philosophy</a>を見とけば良いのかな。</p>

<a name="L.................."></a>
<h2>ライブラリ類</h2>

<p>公式が主に使ってそうなやつをデファクトのライブラリだとして、
<a href="https://github.com/scalatra/scalatra">scalatra / scalatra</a>を見て勝手に判断した。</p>

<a name="Test.Framework"></a>
<h3>Test Framework</h3>

<p><a href="">Specs2</a>を使っている模様（<a href="https://github.com/scalatra/scalatra/tree/develop/test/src/test/scala/org/scalatra/test">※</a>）。
ただ、ちょっとテストコードが少ないような…他にもある？</p>

<a name="Template.Engine"></a>
<h3>Template Engine</h3>

<p><a href="http://scalate.fusesource.org/">Scalate</a>を<a href="https://github.com/scalatra/scalatra/tree/develop/example/src/main/scala/org/scalatra">Example</a>で使っている。<br/>一方で、<a href="https://github.com/scalatra/scalatra-website-examples">scalatra-website-examples</a>では、<a href="https://github.com/spray/twirl">twirl</a>を使ってたりするので、どちらかを使えればいいのだろう。なお、twirlは<a href="http://www.playframework.com/">Play Framework</a>で採用でされているようなので、こっちを使えるようになっておくと潰しが効くかもしれない。</p>

<a name="Database.Access"></a>
<h3>Database Access</h3>

<p>DBアクセスというかは、永続層的なアレ。</p>

<p>公式の<a href="https://github.com/scalatra/scalatra-website-examples">scalatra-website-examples</a>では<a href="https://github.com/scalatra/scalatra-website-examples/tree/master/2.2/persistence/scalatra-slick">scalatra-slick</a>として紹介されているが、要は普通に<a href="http://slick.typesafe.com/">Slick</a>も使えますよ、ということ。
一方、<a href="">Squeryl</a>も<a href="https://github.com/futurechimp/ScalatraSqueryl">紹介されている</a>が、このへんはやっぱりSlickがType Safe社謹製なので、Slickを素直に使うほうが無難っぽい。</p>

<a name="L........."></a>
<h2>おまけ</h2>

<p>ちょっと古いけど、UstにScalatraの解説動画があった。</p>

<iframe width="480" height="392" src="http://www.ustream.tv/embed/recorded/20640292?v=3&amp;wmode=direct" scrolling="no" frameborder="0" style="border: 0px none transparent;">    </iframe>


<p><br /><a href="http://www.ustream.tv/" style="padding: 2px 0px 4px; width: 400px; background: #ffffff; display: block; color: #000000; font-weight: normal; font-size: 10px; text-decoration: underline; text-align: center;" target="_blank">Video streaming by Ustream</a></p>

<p>同じ人が<a href="http://seratch.hatenablog.jp/entry/20120219/1329641786">ブログ上でソースコードリーディング</a>してた。必読。</p>

<hr/>


<p>他にも押さえないといけないことはあると思うが、とりあえずはこんなところでそろそろScalatraを触ってみようと思う。
個人的にはOAuthあたりを標準でサポートしてくれると嬉しいんだけど、そのへんは自分で実装するしかないかなー。</p>
]]></content>
  </entry>
  
</feed>
