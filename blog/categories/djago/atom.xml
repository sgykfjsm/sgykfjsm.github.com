<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: djago, | sgykfjsm.github.com]]></title>
  <link href="http://sgykfjsm.github.io/blog/categories/djago/atom.xml" rel="self"/>
  <link href="http://sgykfjsm.github.io/"/>
  <updated>2017-09-26T01:32:46+09:00</updated>
  <id>http://sgykfjsm.github.io/</id>
  <author>
    <name><![CDATA[sgykfjsm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DjangoをTango with Djangoで学ぶ - 2 -]]></title>
    <link href="http://sgykfjsm.github.io/blog/2017/09/21/djangowotango-with-djangodexue-bu-2/"/>
    <updated>2017-09-21T00:19:39+09:00</updated>
    <id>http://sgykfjsm.github.io/blog/2017/09/21/djangowotango-with-djangodexue-bu-2</id>
    <content type="html"><![CDATA[<p><a href="http://sgykfjsm.github.io/blog/2017/09/07/djangowotango-with-djangodexue-bu-1/">DjangoをTango with Djangoで学ぶ - 1 -</a>の続き</p>

<p>これまでは表示するHTML（ただのテキストだけど）をviews.pyに直接記載していたが、Djangoでも他のWebフレームワークと同様にテンプレートシステムを備えている。</p>

<p>テンプレートシステムとは簡単に言うと、独自のシンタックスとHTMLを混ぜておきて、独自シンタックスの部分をサーバーサイドで指定された文字列などに置き換えたりすることだ。場合によっては多少の制御構文を備えており、ループ文やIF文を提供するテンプレートシステムも多い。</p>

<!-- more -->


<p>Djangoでテンプレートシステムを利用する場合、<code>${workspace}/tango_with_django_project/templates/${application}</code>というフォルダを作ればよい。今回の場合だと以下の様になる。</p>

<pre><code class="console">$ ls -la
total 20
drwxr-xr-x  9 sgyk   306  9  6 09:40 ./
drwxr-xr-x  9 sgyk   306  9  4 22:40 ../
drwxr-xr-x 12 sgyk   408  9  6 09:35 .git/
-rw-r--r--  1 sgyk  3329  9  4 23:09 .gitignore
drwxr-xr-x 12 sgyk   408  9  6 09:35 .idea/
-rw-r--r--  1 sgyk 12288  9  4 22:52 db.sqlite3
-rwxr-xr-x  1 sgyk   823  9  4 22:40 manage.py*
drwxr-xr-x 11 sgyk   374  9  4 23:50 rango/
drwxr-xr-x  8 sgyk   272  9  6 09:40 tango_with_django_project/

$ ls -la tango_with_django_project/
total 12
drwxr-xr-x 8 sgyk  272  9  6 09:40 ./
drwxr-xr-x 9 sgyk  306  9  6 09:40 ../
-rw-r--r-- 1 sgyk    0  9  4 22:40 __init__.py
drwxr-xr-x 6 sgyk  204  9  4 23:39 __pycache__/
-rw-r--r-- 1 sgyk 3166  9  4 23:10 settings.py
drwxr-xr-x 3 sgyk  102  9  6 09:40 templates/
-rw-r--r-- 1 sgyk  930  9  4 23:39 urls.py
-rw-r--r-- 1 sgyk  428  9  4 22:40 wsgi.py

$ ls -la tango_with_django_project/templates/
total 0
drwxr-xr-x 3 sgyk 102  9  6 09:40 ./
drwxr-xr-x 8 sgyk 272  9  6 09:40 ../
drwxr-xr-x 2 sgyk  68  9  6 09:40 rango/
</code></pre>

<p>次にDjangoに<code>tango_with_django_project/templates/rango</code>あるテンプレートを利用するということを教えてあげる必要がある。具体的には<code>tango_with_django_project/settings.py</code>に以下に設定を追加する必要がある。</p>

<pre><code class="python">...
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # &lt;-- ここにテンプレートのパスを追加する
        'APP_DIRS': True,
...
</code></pre>

<p>早速追加したいところだけど注意点がある。それは、<code>DIRS</code>に追加するパスは<strong>絶対パス</strong>でなければならないということだ。しかし、通常、開発時のテンプレートのパスとプロダクション環境で動作させるときに配置されるテンプレートのパスは異なるはず。異なる部分はワークスペース部分のパスになる。例えば、開発時は<code>/Users/you/workspace</code>がワークスペースかもしれないが、デプロイ時のパスは<code>/home/production/application</code>となるかもしれない。この違いの吸収するようにしないといけない。</p>

<p>もちろん、各環境ごとのパスを１つずつハードコーディングするのはダメである。一方、<code>tango_with_django_project/settings.py</code>をよく見てみると、次の１文に気づくはずだ。</p>

<pre><code class="python"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
</code></pre>

<p><code>BASE_DIR</code>は<code>tango_with_django_project/settings.py</code>の絶対パスを取得して、２つ上のディレクトリパスを取得している。もし<code>/Users/you/workspace/tango_with_django_project/settings.py</code>だとすると、<code>BASE_DIR</code>には<code>/Users/you/workspace</code>が格納される。</p>

<pre><code class="python">$ python
Python 3.5.3 (default, Sep  4 2017, 22:33:15)
[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.dirname(os.path.dirname("/Users/you/workspace/tango_with_django_project/settings.py"))
'/Users/you/workspace'
</code></pre>

<p>ということで、<code>/Users/you/workspace/tango_with_django_project/templates/rango</code>のようにパスをハードコートするのではなく、<code>BASE_DIR</code>を利用して以下の様に設定すれば良いことになる。</p>

<pre><code class="diff">$ git diff
diff --git a/tango_with_django_project/settings.py b/tango_with_django_project/settings.py
index 8d38aa9..3b12343 100644
--- a/tango_with_django_project/settings.py
+++ b/tango_with_django_project/settings.py
@@ -52,10 +52,12 @@ MIDDLEWARE = [

 ROOT_URLCONF = 'tango_with_django_project.urls'

+TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')
+
 TEMPLATES = [
     {
         'BACKEND': 'django.template.backends.django.DjangoTemplates',
-        'DIRS': [],
+        'DIRS': [TEMPLATE_DIR, ],
         'APP_DIRS': True,
         'OPTIONS': {
             'context_processors': [
</code></pre>

<p>テンプレートの場所の設定が済んだので実際にテンプレートファイルを記述していく。ここでは以下のようなファイルを<code>rango/templates/index.html</code>として用意する。</p>

<p>templates/rango/index.html</p>

<p>&#8220;`html
&lt;!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Rango says&hellip;</title>
</head>
<body></p>

<h1>Rango says&#8230;</h1>


<div>
  hey there parther!<br />
  <strong></strong><br />
</div>


<div>
  <a href="http://sgykfjsm.github.io/rango/about/">About</a>
</div>


<p></body>
</html>
&#8220;`</p>

<p>ほとんどはただのHTMLファイルだが、<code></code>をプレースホルダーとして設定している。AnsibleやJinja2などを経験しているならわかるが、このプレースホルダーがサーバーサイドで任意の変数に置き換えられる。</p>

<p>次にレンダリング処理を記述する。記述する箇所はもちろん<code>rango/views.py</code>だ。</p>

<pre><code class="diff">$ git diff rango/views.py
diff --git a/rango/views.py b/rango/views.py
index 117afb3..6aeae71 100644
--- a/rango/views.py
+++ b/rango/views.py
@@ -1,5 +1,21 @@
 from django.http import HttpResponse
+from django.shortcuts import render


 def index(request):
-    return HttpResponse("Rango says hey there partner!")
+    """
+    Construct a dicitionary to pass to the template engine as its context.
+    Note the key boldmessage is the same as  in the template!
+    """
+    context_dict = {'boldmessage': 'Crunchy, creamy, cookie, candy, cupcake!'}
+
+    """
+    Return a rendered response to send to the client.
+    We make use of the shortcut function to make our lives easier.
+    Note that the first parameter is the template we wish to use.
+    """
+    return render(request, 'rango/index.html', context=context_dict)
</code></pre>

<p>これも見れば大体わかるだろう。<code>render(request, 'index.html', context=context_dict)</code>だけに注目すれば良い。<code>render</code>の引数の１つ目はリクエストオブジェクトだ。これはお作法として「１つめはリクエストオブジェクト」とおぼえておけば良い。２つ目の引数は、このレンダリング処理が利用するテンプレートの位置を教えている。ディレクトリの位置は先ほど<code>'DIRS': [TEMPLATE_DIR, ]</code>と設定しているので、ここでは<code>TEMPLATE_DIR</code>以降の相対パスを記述すれば良い、ということになる。では３つ目は？これはcontextを渡している。一口にcontextといっても意味するところはまさにcontextに依存するわけだが、ここでは「テンプレートファイルに渡す情報」と理解しておけば良い。よって<code>context=context_dict</code>は<code>{'boldmessage': 'Crunchy, creamy, cookie, candy, cupcake!'}</code>という辞書変数をテンプレートファイルに渡していることを意味する。</p>

<p>さて、コードの順序とは逆だが、ここでテンプレートファイルに渡しているコンテキスト情報を見てみる。キーが<code>boldmessage</code>で値が<code>Crunchy, creamy, cookie, candy, cupcake!</code>だ。今回の処理では、「テンプレートファイルの中にある<code>boldmessage</code>というプレースホルダーに<code>Crunchy, creamy, cookie, candy, cupcake!</code>という値を渡す」ということになる。実際に<code>python runserver</code>を実行して <a href="http://127.0.0.1:8000/rango/">http://127.0.0.1:8000/rango/</a> にアクセスすると太字になった<strong>Crunchy, creamy, cookie, candy, cupcake!</strong>がブラウザに表示されるはずだ。</p>

<p>HTMLが配信されるようになった。とくれば次はCSSやJavascriptなどを使いたくなる。このような静的なファイルは本来はDjangoの守備範囲ではない。なぜならば、これは「静的」であり、サーバーサイドで生成するようなものではないからだ。とはいえ、Djangoアプリケーションで静的ファイルを配信することはもちろん可能である。</p>

<p>まず静的ファイルを配置するディレクトリを設定する。今回はtemplateディレクトリと同様にプロジェクトのルートに<code>static</code>ディレクトリを配置する。</p>

<pre><code class="console">$ ls -l
total 20
drwxr-xr-x 11 sgyk   374  9  6 23:16 ./
drwxr-xr-x  9 sgyk   306  9  4 22:40 ../
drwxr-xr-x 12 sgyk   408  9  6 22:55 .git/
-rw-r--r--  1 sgyk  3329  9  4 23:09 .gitignore
drwxr-xr-x 12 sgyk   408  9  6 23:01 .idea/
-rw-r--r--  1 sgyk 12288  9  4 22:52 db.sqlite3
-rwxr-xr-x  1 sgyk   823  9  4 22:40 manage.py*
drwxr-xr-x 11 sgyk   374  9  6 22:48 rango/
drwxr-xr-x  2 sgyk    68  9  6 23:16 static/    # &lt;- コレ
drwxr-xr-x  7 sgyk   238  9  6 22:48 tango_with_django_project/
drwxr-xr-x  3 sgyk   102  9  6 22:47 templates/
</code></pre>

<p>次にtemplatesディレクトリのときと同様にDjangoにstaticディレクトリの位置を教えてあげれば良い。ここでも絶対パスとして定義するようにすること。</p>

<pre><code class="diff">$ git diff
diff --git a/tango_with_django_project/settings.py b/tango_with_django_project/settings.py
index 634f1b7..cc817d7 100644
--- a/tango_with_django_project/settings.py
+++ b/tango_with_django_project/settings.py
@@ -121,3 +121,5 @@ USE_TZ = True
 # https://docs.djangoproject.com/en/1.11/howto/static-files/

 STATIC_URL = '/static/'
+
+STATIC_DIR = os.path.join(BASE_DIR, 'static')
</code></pre>

<p>次に<code>STATICFILES_DIRS</code>を定義する。以下のようにすれば良い。</p>

<pre><code class="diff">$ git diff
diff --git a/tango_with_django_project/settings.py b/tango_with_django_project/settings.py
index 634f1b7..2cec3bc 100644
--- a/tango_with_django_project/settings.py
+++ b/tango_with_django_project/settings.py
@@ -121,3 +121,7 @@ USE_TZ = True
 # https://docs.djangoproject.com/en/1.11/howto/static-files/

 STATIC_URL = '/static/'

STATIC_DIR = os.path.join(BASE_DIR, 'static')
+
+STATICFILES_DIRS = [STATIC_DIR, ]
</code></pre>

<p><code>STATICFILES_DIRS</code>については「そういうもの」とおぼえておけばよい。要はお作法なのだ。詳細を知りたいなら <a href="https://docs.djangoproject.com/en/1.11/howto/static-files/">https://docs.djangoproject.com/en/1.11/howto/static-files/</a> を参照すること。また、<code>STATIC_URL = '/static/'</code>もちゃんと定義されていることを確認すること。これはDjangoプロジェクトを始める時点で生成されるファイルに予め記述されているはずだが、なければ上記のように定義しておく。<code>STATIC_URL</code>は定義されている値から想像できるように、静的ファイルを配信するときのURLだ。例えば、画像を/static/rango.jpgとして配置すると、ブラウザ上では <a href="http://127.0.0.1:8000/static/rango.jpg">http://127.0.0.1:8000/static/rango.jpg</a> としてアクセスできるようになる。また、<code>STATIC_URL</code>に定義する値はスラッシュを前後につけること。<code>STATIC_URL  = 'static/'</code>や<code>STATIC_URL  = '/static'</code>ではエラーになる。</p>

<p>では静的ファイルをどのようにテンプレートに組み込むか。これは簡単だ。まずは変更後のテンプレートファイルを見て欲しい。
<code>diff 
$ git diff templates/rango/index.html
diff --git a/templates/rango/index.html b/templates/rango/index.html
index 8d06f2d..6895561 100644
--- a/templates/rango/index.html
+++ b/templates/rango/index.html
@@ -1,4 +1,7 @@
 &lt;!DOCTYPE html&gt;
+
+{% load staticfiles %}
+
 &lt;html lang="en"&gt;
 &lt;head&gt;
   &lt;meta charset="UTF-8"&gt;
@@ -13,5 +16,9 @@
 &lt;div&gt;
   &lt;a href="http://sgykfjsm.github.io/rango/about/"&gt;About&lt;/a&gt;
 &lt;/div&gt;
+&lt;div&gt;
+  &lt;img src="{% static "rango.jpg" %}" alt="Picture of Rango" /&gt;
+&lt;/div&gt;
+
 &lt;/body&gt;
 &lt;/html&gt;
</code></p>

<p>テンプレートファイルの上部で<code>{% load staticfiles %}</code>と書いてDjangoに対して静的ファイルを使うことを宣言する。次に通常のHTMLタグを記述して参照したい静的ファイルを<code>{% static "rango.jpg" %}</code>と書く。これについて説明する。<code>{{ foo }}</code>をプレースホルダーと呼んでいたのに対して、<code>{% ... %}</code>は<strong>テンプレートタグ</strong>と呼ぶ。詳細な説明は一旦スキップして、ここでは<code>{% static %}</code>として先ほど設定した<code>STATIC_URL</code>と結びついて参照先URLを生成する。つまり、コードで表現すると<code>{% static "rango.jpg" %}</code>は<code>STATIC_URL + "rango.jpg"</code>となり<code>/static/smile.jpg</code>という文字列を生成する。</p>

<p>先述した静的ファイルの配信はあくまでサイトないしはWebアプリケーションのアセットを前提としたものだった。しかし、例えばユーザーやサイト管理者が任意に画像をアップロードし、それをコンテンツとして配信しないといけない場合はどうだろうか。こういったファイルは更新または削除されうるため、「静的」なコンテンツとは言えない。しかし、サーバーサイドのアプリケーションが生成するとも言えない。こういった場合、やはりDjangoに「このファイルは外部ユーザーが管理しているファイルですよ」と教えてあげる設定をしてあげれば良い。</p>

<p>まずは以下の様に外部からアップロードされるファイルを保存する場所を設定する。</p>

<pre><code class="diff">$ git diff tango_with_django_project/settings.py
diff --git a/tango_with_django_project/settings.py b/tango_with_django_project/settings.py
index 2cec3bc..7e8a909 100644
--- a/tango_with_django_project/settings.py
+++ b/tango_with_django_project/settings.py
@@ -125,3 +125,9 @@ STATIC_URL = '/static/'
 STATIC_DIR = os.path.join(BASE_DIR, 'static')

 STATICFILES_DIRS = [STATIC_DIR, ]
+
+MEDIA_DIR = os.path.join(BASE_DIR, 'media')
+
+MEDIA_ROOT = MEDIA_DIR
+
+MEDIA_URL = '/media/'
</code></pre>

<p>次に、この<code>MEDIA_URL</code>をアプリケーションのURLとして登録してあげる。</p>

<pre><code class="diff">$ git diff tango_with_django_project/urls.py
diff --git a/tango_with_django_project/urls.py b/tango_with_django_project/urls.py
index 85abbc4..7050919 100644
--- a/tango_with_django_project/urls.py
+++ b/tango_with_django_project/urls.py
@@ -13,13 +13,15 @@ Including another URLconf
     1. Import the include() function: from django.conf.urls import url, include
     2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))
 """
+from django.conf import settings
 from django.conf.urls import url
 from django.contrib import admin
 from django.conf.urls import include
+from django.conf.urls.static import static
 from rango import views

 urlpatterns = [
     url(r'^$', views.index, name='index'),
     url(r'^rango/', include('rango.urls')),
     url(r'^admin/', admin.site.urls),
-]
+] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
</code></pre>

<p>これにより、<a href="http://127.0.0.1:8000/media/user.jpg">http://127.0.0.1:8000/media/user.jpg</a> などのようにアクセスできるようになる。</p>

<p>なお、<code>django.conf.urls.static.static</code>を見ればわかるが、このURLでアクセスできるのはsettings.pyの中で<code>DEBUG = True</code>となっているときだけである。詳細は <a href="https://docs.djangoproject.com/en/1.11/howto/static-files/#serving-files-uploaded-by-a-user-during-development">https://docs.djangoproject.com/en/1.11/howto/static-files/#serving-files-uploaded-by-a-user-during-development</a> を参照すること。</p>

<p>次に、テンプレートで使用する場合はリクエストオブジェクトに<code>MEDIA_URL</code>の情報を与えるために<code>django.template.context_processors.media</code>を与える。このcontext_processorsについては <a href="https://docs.djangoproject.com/en/1.11/ref/templates/api/#django-template-context-processors-media">https://docs.djangoproject.com/en/1.11/ref/templates/api/#django-template-context-processors-media</a> を参照すること。</p>

<pre><code class="diff">$ git diff tango_with_django_project/settings.py
diff --git a/tango_with_django_project/settings.py b/tango_with_django_project/settings.py
index 7e8a909..68b8335 100644
--- a/tango_with_django_project/settings.py
+++ b/tango_with_django_project/settings.py
@@ -65,6 +65,7 @@ TEMPLATES = [
                 'django.template.context_processors.request',
                 'django.contrib.auth.context_processors.auth',
                 'django.contrib.messages.context_processors.messages',
+                'django.template.context_processors.media',
             ],
         },
     },
</code></pre>

<p>テンプレートへの実際の埋め込みは以下の通り。上の設定でリクエストオブジェクトは<code>MEDIA_URL</code>が使えるようになっているので、素直にそのまま設定すれば良い。</p>

<pre><code class="diff ">/tango_with_django_project (git)-[master][!][*]
$ git diff templates/rango/
diff --git a/templates/rango/index.html b/templates/rango/index.html
index 6895561..08398ef 100644
--- a/templates/rango/index.html
+++ b/templates/rango/index.html
@@ -19,6 +19,8 @@
 &lt;div&gt;
   &lt;img src="{% static "smile.jpg" %}" alt="Picture of Rango" /&gt;
 &lt;/div&gt;
-
+&lt;div&gt;
+  &lt;img src="{{ MEDIA_URL }}user.jpg" %}" alt="Picture of User" /&gt;
+&lt;/div&gt;
 &lt;/body&gt;
 &lt;/html&gt;
</code></pre>

<p>テンプレートの話はとりあえずここまで。</p>
]]></content>
  </entry>
  
</feed>
